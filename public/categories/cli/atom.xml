<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://hemanth.github.io/nmotw.in/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://hemanth.github.io/nmotw.in/"/>
  <updated>2014-07-17T18:08:25+05:30</updated>
  <id>http://hemanth.github.io/nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[n_]]></title>
    <link href="http://hemanth.github.io/nmotw.in/n/"/>
    <updated>2014-07-17T17:51:19+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/n</id>
    <content type="html"><![CDATA[<p>For all those <a href="https://www.npmjs.org/package/lodash">lodash</a> &lt;3'rs out there, here is a sleek node module that lets you to start your REPL with Lo-Dash required by default.</p>

<p><a href="https://www.npmjs.org/package/n_">n_</a> is that cli app which dose this job for you, it makes use a the <code>repl</code> module and injects lodash into the context.</p>

<p>If you notice in the node REPL, <code>_</code> contains the result of the last expression.</p>

<p>```javascript</p>

<blockquote><p>3 + 4</p>

<p>_ + 1</p>

<p>8</p></blockquote>

<p>```</p>

<p>As this modules loads Lo-Dash to <code>_</code> it redirects REPL changes of <code>_</code> the new special variable <code>$</code></p>

<p>Install this module globally: <code>npm install -g n_</code></p>

<p><strong>Sample usage:</strong></p>

<p><code>sh
$ n_ # This would start the node REPL with Lo-Dash loaded.
</code></p>

<p>```javascript</p>

<p>n<em> > </em>.VERSION
'2.4.1'</p>

<p>n<em>> </em>.shuffle([1,2,3,4])
[ 2, 1, 4, 3 ]</p>

<p>```</p>

<p><code>javascript
n_ &gt; _.keys(_)
[ 'support',
  'templateSettings',
  'after',
  'assign',
  'at',
  'bind',
  'bindAll',
  'bindKey',
  'chain',
  'compact',
  'compose',
  'constant',
  'countBy',
  'create',
  'createCallback',
  'curry',
  'debounce',
  'defaults',
  'defer',
  'delay',
  'difference',
  'filter',
  'flatten',
  'forEach',
  'forEachRight',
  'forIn',
  'forInRight',
  'forOwn',
  'forOwnRight',
  'functions',
  'groupBy',
  'indexBy',
  'initial',
  'intersection',
  'invert',
  'invoke',
  'keys',
  'map',
  'mapValues',
  'max',
  'memoize',
  'merge',
  'min',
  'omit',
  'once',
  'pairs',
  'partial',
  'partialRight',
  'pick',
  'pluck',
  'property',
  'pull',
  'range',
  'reject',
  'remove',
  'rest',
  'shuffle',
  'sortBy',
  'tap',
  'throttle',
  'times',
  'toArray',
  'transform',
  'union',
  'uniq',
  'values',
  'where',
  'without',
  'wrap',
  'xor',
  'zip',
  'zipObject',
  'collect',
  'drop',
  'each',
  'eachRight',
  'extend',
  'methods',
  'object',
  'select',
  'tail',
  'unique',
  'unzip',
  'clone',
  'cloneDeep',
  'contains',
  'escape',
  'every',
  'find',
  'findIndex',
  'findKey',
  'findLast',
  'findLastIndex',
  'findLastKey',
  'has',
  'identity',
  'indexOf',
  'isArguments',
  'isArray',
  'isBoolean',
  'isDate',
  'isElement',
  'isEmpty',
  'isEqual',
  'isFinite',
  'isFunction',
  'isNaN',
  'isNull',
  'isNumber',
  'isObject',
  'isPlainObject',
  'isRegExp',
  'isString',
  'isUndefined',
  'lastIndexOf',
  'mixin',
  'noConflict',
  'noop',
  'now',
  'parseInt',
  'random',
  'reduce',
  'reduceRight',
  'result',
  'runInContext',
  'size',
  'some',
  'sortedIndex',
  'template',
  'unescape',
  'uniqueId',
  'all',
  'any',
  'detect',
  'findWhere',
  'foldl',
  'foldr',
  'include',
  'inject',
  'first',
  'last',
  'sample',
  'take',
  'head',
  'VERSION' ]
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/n_/n_.gif" alt="n_" /></p>

<p>Thanks to <a href="http://borisdiakur.com/">Boris Diakur</a> for publishing this module!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mute-stream]]></title>
    <link href="http://hemanth.github.io/nmotw.in/mute-stream/"/>
    <updated>2014-07-03T18:32:49+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/mute-stream</id>
    <content type="html"><![CDATA[<blockquote><p>Bytes go in, but they don't come out (when muted).</p></blockquote>

<p><a href="https://www.npmjs.org/package/mute-stream">mute-stream</a> as the name says it mutes the stream, as in it's a pass-through stream, but when muted, the bytes are silently dropped, rather than being passed through.</p>

<p><strong>Installing it:</strong> <code>npm install mute-stream</code></p>

<p><strong>Example usage:</strong></p>

<p>```javascript
var ms = new (require('mute-stream'))({});</p>

<p>ms.pipe(process.stdout);</p>

<p>ms.write('Shout\n');
ms.mute();
ms.write('Shout louder!\n');
ms.unmute();
ms.write('Phew!\n');</p>

<p>```</p>

<p><code>({})</code> is the options part, that can be either of:</p>

<ul>
<li><p>replace => Replaces the muted string with the specified string. (Check the gif)</p></li>
<li><p>prompt =>  prompt with a readline stream, to avoid backspace overwrites.</p></li>
</ul>


<p>It also provides <code>ms.muted()</code> method to check if the stream is already muted.</p>

<blockquote><p>The MuteStream object acts as a facade to its pipe source and destination.</p></blockquote>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/mute-stream/mute-stream.gif" alt="" /></p>

<p>Thanks to <a href="http://blog.izs.me/">Isaac Z. Schlueter</a> for helping us to mute the noise! ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PSI]]></title>
    <link href="http://hemanth.github.io/nmotw.in/psi/"/>
    <updated>2014-06-19T19:22:39+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/psi</id>
    <content type="html"><![CDATA[<p>If you are into web development at one point or the other you would have used Google's pagespeed <a href="http://developers.google.com/speed/pagespeed/insights/">insights</a> to improve the performance of your site.</p>

<p>Now it's even easier to get those insights on your CLI with <a href="https://www.npmjs.org/package/psi">psi</a> thanks to the <a href="http://addyosmani.com/blog/">Addy Osmani</a> for such a wonderful module.</p>

<p>Formal defination of the module:</p>

<blockquote><p>PageSpeed Insights With Reporting</p></blockquote>

<p>Run mobile and desktop performance tests for your deployed site using <a href="https://developers.google.com/speed/docs/insights/v1/getting_started">Google PageSpeed Insights</a> with tidy reporting for your build process. A sample <a href="https://github.com/addyosmani/psi-gulp-sample">Gulpfile</a> demonstrating use is also available.</p>

<p>Uses <a href="https://github.com/zrrrzzt/gpagespeed/">gpagespeed</a> and the reporter in <a href="https://github.com/jrcryer/grunt-pagespeed">grunt-pagespeed</a>.</p>

<p>Install it -> <code>$ npm install psi</code></p>

<p><strong>Example usage:</strong></p>

<p>P.S: Registering for an API key from the <a href="https://developers.google.com/speed/docs/insights/v1/getting_started#auth">Google Developer Console</a> is recommended.</p>

<p><strong>In code:</strong></p>

<p>```js
var psi = require('psi');</p>

<p>psi({</p>

<pre><code>// key: '...', optional
url: 'http://nmotw.in',
paths: '',           // optional
locale: 'en_US',     // optional
strategy: 'mobile',  // optional
threshold: 80        // optional
</code></pre>

<p>});
```</p>

<p><strong>On CLI:</strong></p>

<p>```sh
$ psi http://nmotw.in --strategy desktop
Running Pagespeed Insights
Pagespeed Insights: Processing results</p>

<hr />

<p>URL:      http://nmotw.in/
Strategy: desktop
Score:    90</p>

<hr />

<p>Number Resources                                 | 16
Number Hosts                                     | 7
Total Request Bytes                              | 1538
Number Static Resources                          | 8
Html Response Bytes                              | 7019
Css Response Bytes                               | 17484
Image Response Bytes                             | 384
Javascript Response Bytes                        | 228348
Other Response Bytes                             | 221982
Number Js Resources                              | 5
Number Css Resources                             | 3</p>

<hr />

<p>Avoid Landing Page Redirects                     | 0
Enable Gzip Compression                          | 0
Leverage Browser Caching                         | 1.5
Main Resource Server Response Time               | 0
Minify Css                                       | 0
Minify HTML                                      | 0
Minify Java Script                               | 0.16
Minimize Render Blocking Resources               | 8
Optimize Images                                  | 0
Prioritize Visible Content                       | 0</p>

<hr />

<p>```</p>

<p>If you have bunch of sites to analyse you could something like:
<code>sh
cat links | xargs -L1 psi &gt; analysis.report
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/psi/psi.gif" alt="psi" /></p>
]]></content>
  </entry>
  
</feed>
