<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CLI | NMOTW]]></title>
  <link href="http://hemanth.github.io/nmotw.in/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://hemanth.github.io/nmotw.in/"/>
  <updated>2014-04-10T18:19:18+05:30</updated>
  <id>http://hemanth.github.io/nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[configstore]]></title>
    <link href="http://hemanth.github.io/nmotw.in/configstore/"/>
    <updated>2014-03-20T17:53:08+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/configstore</id>
    <content type="html"><![CDATA[<p>CLI apps normally use configurations for different situations like:</p>

<ul>
<li><p>Saving the state of an app and restoring it.</p></li>
<li><p>Having global and user level configurations for their own benefits.</p></li>
<li><p>Maintaining interval threshold value for cron like activities.</p></li>
<li><p>Storing strings for Internationalization and localization.</p></li>
</ul>


<p>And many more similar use cases.</p>

<p><a href="https://github.com/yeoman/configstore">ConfigStore</a> is one such node module that helps you to easily load and persist config without having to think about where and how!</p>

<p>This is wonderful module is a gift from <a href="http://yeoman.io">Yeoman</a> which has about 18432 downloads yesterday alone!</p>

<p>Installing is it just like any other module: <code>$ npm install configstore</code></p>

<p><strong>API:</strong></p>

<p>The API set is very simple had has:</p>

<ul>
<li><p><code>set(key, val)</code> -> Set an item.</p></li>
<li><p><code>get(key)</code> -> Get an item.</p></li>
<li><p><code>del(key)</code> -> To delete an item.</p></li>
<li><p><code>all</code> -> Get all the items in the current config store and replace them all with a new object.</p></li>
<li><p><code>size</code> -> Count of the items.</p></li>
<li><p><code>path</code> -> File path to the config store.</p></li>
</ul>


<p><strong>Example usage:</strong></p>

<p>```javascript</p>

<p>var Configstore =  require('configstore');</p>

<p>var conf = new Configstore('appConf');</p>

<p>/*
  var conf = new ( require('configstore') )('appConf');</p>

<p>  var conf = new ( require('configstore') )\</p>

<pre><code>         ('appConf', {'ans': 42});
</code></pre>

<p>  i.e  Configstore(id, defaults);
  id -> mandator
  defaults -> optional</p>

<p>*/</p>

<p>// Set some values.
conf.set('life', 42);
conf.set('key', {'scrt': '42'});</p>

<p>// Get some values.
conf.get('life'); // 42
conf.get('key'); // {'scrt': 42}</p>

<p>// Delete a value.
conf.del('life');
conf.get('life'); // undefined.</p>

<p>// Get the count.
conf.size() // 1</p>

<p>// Reset the entier conf with new conf.
conf.all = {'ans' : 42};</p>

<p>```</p>

<p><strong>Under the covers:</strong></p>

<p>Config is stored as a <a href="http://www.yaml.org/">YAML</a> file in <code>$XDG_CONFIG_HOME</code> or <code>~/.config/configstore/your-config.yaml</code> there is an <a href="https://github.com/yeoman/configstore/issues/10">issue</a> for JSON support as well.</p>

<p>For the above example:</p>

<p>```sh</p>

<p>$ cat ~/.config/configstore/appConf.yaml</p>

<h1>Would be something like</h1>

<p>key:
  scrt: 42
life: 42</p>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/configstore/configstore.gif" alt="configstore" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chalk]]></title>
    <link href="http://hemanth.github.io/nmotw.in/chalk/"/>
    <updated>2014-03-13T18:33:53+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/chalk</id>
    <content type="html"><![CDATA[<p>There are many wonderful node modules that adhere to Unix philosophy:</p>

<blockquote><p>"Write programs that do one thing and do it well."</p></blockquote>

<p>Out of many such one such elegant module is <a href="https://www.npmjs.org/package/chalk">chalk</a> thanks to <a href="http://sindresorhus.com/hi/">Sindre Sorhus</a> for that.</p>

<p>Whenever one wants to color the terminal, as in styling the strings on the console the first module that would come to mind is <a href="https://github.com/Marak/colors.js">colors.js</a> but one of the major drawbacks with that being it extending <code>String.portotye</code> or be <a href="https://github.com/yeoman/yo/issues/68">these</a> problems.</p>

<p>Installing chalk is like any other module: <code>npm install --save chalk</code></p>

<p>Apart from allow the normal styling syntax, it also provides multiple styles, nested styles and multiple arguments.</p>

<p><strong>For example:</strong></p>

<p>```javascript
var chalk = require('chalk');</p>

<p>console.log(  chalk.blue.bgRed.bold('Hello world!')  );</p>

<p>console.log(  chalk.red('Hello', chalk.underline('world') + '!')  );</p>

<p>```</p>

<p>Here is a simple snippet for printing all of the styles it provides:</p>

<p>```javascript
var chalk = require('chalk');</p>

<p>Object.keys(chalk.styles).forEach(function(style) {</p>

<pre><code>if( style !== "reset") {
  process.stdout.write(chalk[style](style) + ' ');
}
</code></pre>

<p>});
```</p>

<p><strong>gif FTW!?</strong></p>

<p><img src="http://nmotw.in/images/chalk/chalk.gif" alt="chalk" /></p>

<p>Until next week, happy coloring!</p>

<p><img src="http://nmotw.in/images/chalk/chalk.png" alt="chalk-colors" /></p>
]]></content>
  </entry>
  
</feed>
