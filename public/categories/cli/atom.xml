<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | NMOTW]]></title>
  <link href="http://nmotw.in//github/public/categories/cli/atom.xml" rel="self"/>
  <link href="http://nmotw.in//github/"/>
  <updated>2019-03-16T15:25:27+05:30</updated>
  <id>http://nmotw.in//github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[package-size]]></title>
    <link href="http://nmotw.in//github/package-size/"/>
    <updated>2019-02-13T00:21:28+05:30</updated>
    <id>http://nmotw.in//github/package-size</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/egoist/package-size">package-size</a></h1>

<blockquote><p>Get the bundle size of an npm packages.</p></blockquote>

<p><code>package-size</code> is a sweet CLI util, that gives us info about the bundle size of npm packages.</p>

<p><strong>What it does?</strong></p>

<ul>
<li>Install the packages to a temp directory.</li>
<li>Bundle the packages with webpack and get the bundle size.</li>
<li>Show you the bundle size and cache it by package version.</li>
</ul>


<p><strong>Get it:</strong> <code>npm install -g package-size</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh</p>

<h1>get the size of vue bundle</h1>

<p>package-size vue</p>

<h1>get the size of react+react-dom bundle</h1>

<p>package-size react,react-dom</p>

<h1>get the size of vue react+react-dom preact bundles</h1>

<p>package-size vue react,react-dom preact</p>

<h1>get the size of react+react-dom without using the cache</h1>

<p>package-size react,react-dom --no-cache</p>

<h1>get the size of file in current working directory</h1>

<p>package-size ./dist/index.js</p>

<h1>or a package in current working directory, explictly using <code>--cwd</code> flag</h1>

<p>package-size vue --cwd</p>

<h1>or event multiple versions for the same package!</h1>

<p>package-size react@0.10 react@0.14 react@15</p>

<h1>save results to file system in JSON format</h1>

<h1>defaults to ./package-size-output.json</h1>

<p>package-size cherow --output</p>

<h1>or custom path</h1>

<p>package-size cherow --output stats.json</p>

<h1>analyze bundle with webpack-bundle-analyzer</h1>

<p>package-size cherow --analyze
```</p>

<p>```js
const getSizes = require('package-size')</p>

<p>getSizes('react,react-dom', options)
  .then(data => {</p>

<pre><code>console.log(data)
//=&gt;
{
  name: 'react,react-dom',
  size: 12023, // in bytes
  minified: 2342,
  gzipped: 534,
  versionedName: 'react@16.0.0,react-dom@16.0.0'
}
</code></pre>

<p>  })
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/package-size/package-size.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gauge]]></title>
    <link href="http://nmotw.in//github/gauge/"/>
    <updated>2018-12-30T06:59:09+05:30</updated>
    <id>http://nmotw.in//github/gauge</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/gauge">gauge</a></h1>

<blockquote><p>Terminal based horizontal gauge.</p></blockquote>

<p><code>gauge</code> is a terminal based horizontal gauge / progress bar which provides the user the totally control on the progess indication, plusation or hiding the porgress bar. It has provides a convenient theming option.</p>

<p><strong>Get it:</strong> <code>npm install gauge</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
const Gauge = require('gauge');
const gauge = new Gauge();</p>

<p>gauge.show("test", 0.20);</p>

<p>gauge.pulse("this");</p>

<p>gauge.hide();
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/gauge/gauge.gif" alt="gauge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fx]]></title>
    <link href="http://nmotw.in//github/fx/"/>
    <updated>2018-11-16T08:20:35+05:30</updated>
    <id>http://nmotw.in//github/fx</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fx">fx</a></h1>

<blockquote><p>CLI JSON processing tool</p></blockquote>

<p><code>fx</code> is one of a kind JSON processing tool, that provides:</p>

<ul>
<li>Don't need to learn new syntax</li>
<li>Plain JavaScript</li>
<li>Formatting and highlighting</li>
<li>Standalone binary</li>
<li>Interactive mode üéâ</li>
</ul>


<p><strong>Get it:</strong> <code>npm install -g fx</code></p>

<p><strong>Sample usage:</strong></p>

<p><code>sh
echo '{...}' | fx [code ...]
</code></p>

<p><code>sh
echo '{"foo": [{"bar": "value"}]}' | fx 'x =&gt; x.foo[0].bar'
</code></p>

<p><code>sh
$ echo '{"count": 0}' | fx '{...this, count: 1}'
{
  "count": 1
}
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fx/fx.gif" alt="fx" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[please-upgrade-node]]></title>
    <link href="http://nmotw.in//github/please-upgrade-node/"/>
    <updated>2018-09-23T15:42:17+05:30</updated>
    <id>http://nmotw.in//github/please-upgrade-node</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/please-upgrade-node">please-upgrade-node</a></h1>

<blockquote><p>üíÅ show a message to your users to upgrade Node instead of a stacktrace</p></blockquote>

<p><code>please-upgrade-node</code>checks if the users node version is statisfying the <code>engines</code> version in your <code>package.json</code> if not warns, uber useful for CLI apps relying on versions.</p>

<p><strong>GET IT:</strong> <code>npm install please-upgrade-node</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js</p>

<h1>!/usr/bin/env node</h1>

<p>const pkg = require('./package.json')
require('please-upgrade-node')(pkg) // &lt;- Must run BEFORE requiring any other modules
```</p>

<p>in <code>package.json</code>:</p>

<p>```
{
  "engines": {</p>

<pre><code>"node": "&gt;=6"
</code></pre>

<p>  }
}
```</p>

<p>P.S: <code>&gt;=</code> is the only operator supported.</p>

<p>You could also:</p>

<p>```js
pleaseUpgradeNode(pkg, {
  exitCode: 0, // Default: 1
  message: function(requiredVersion) {</p>

<pre><code>return 'Oops this program require Node ' +  requiredVersion
</code></pre>

<p>  }
})
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/please-upgrade-node/please-upgrade-node.gif" alt="please-upgrade-node" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mapscii]]></title>
    <link href="http://nmotw.in//github/mapscii/"/>
    <updated>2018-09-16T18:42:56+05:30</updated>
    <id>http://nmotw.in//github/mapscii</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/mapscii">MapSCII</a></h1>

<blockquote><p>The Whole World In Your Console!</p></blockquote>

<p><code>MapSCII</code> make major use of <code>@mapbox/vector-tile</code> to bring the entire world map to your console.</p>

<p><strong>Get it:</strong> <code>npm install -g mapscii</code></p>

<p><strong>Navigation:</strong></p>

<ul>
<li>Arrows up, down, left, right to scroll around</li>
<li>Press a or z to zoom in and out</li>
<li>Press q to quit</li>
</ul>


<p><strong>Sample usage:</strong></p>

<p>```sh
$ mapscii</p>

<h1>you should see the entire map on the CLI</h1>

<p>```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/mapscii/mapscii.gif" alt="mapscii" /></p>
]]></content>
  </entry>
  
</feed>
