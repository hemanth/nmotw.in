<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | NMOTW]]></title>
  <link href="http://nmotw.in//github/public/categories/network/atom.xml" rel="self"/>
  <link href="http://nmotw.in//github/"/>
  <updated>2019-04-21T12:34:05+05:30</updated>
  <id>http://nmotw.in//github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ip]]></title>
    <link href="http://nmotw.in//github/ip/"/>
    <updated>2017-01-12T21:08:54+05:30</updated>
    <id>http://nmotw.in//github/ip</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ip">ip</a></h1>

<blockquote><p>IP address utilities.</p></blockquote>

<p><code>ip</code> sweet and simple module that provide the below util methods to play with <code>IP</code>!</p>

<ul>
<li>toBuffer</li>
<li>toString</li>
<li>isV4Format</li>
<li>isV6Format</li>
<li>fromPrefixLen</li>
<li>mask</li>
<li>cidr</li>
<li>subnet</li>
<li>cidrSubnet</li>
<li>not</li>
<li>or</li>
<li>isEqual</li>
<li>isPrivate</li>
<li>isPublic</li>
<li>isLoopback</li>
<li>loopback</li>
<li>address</li>
<li>toLong</li>
<li>fromLong</li>
</ul>


<p><strong>Get it:</strong> <code>npm install --save ip</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js</p>

<p>const ip = require('ip');</p>

<p>ip.address() // my ip address
ip.isEqual('::1', '::0:1'); // true
ip.toBuffer('127.0.0.1') // Buffer([127, 0, 0, 1])
ip.toString(new Buffer([127, 0, 0, 1])) // 127.0.0.1
ip.fromPrefixLen(24) // 255.255.255.0
ip.mask('192.168.1.134', '255.255.255.0') // 192.168.1.0
ip.cidr('192.168.1.134/26') // 192.168.1.128
ip.not('255.255.255.0') // 0.0.0.255
ip.or('192.168.1.134', '0.0.0.255') // 192.168.1.255
ip.isPrivate('127.0.0.1') // true
ip.isV4Format('127.0.0.1'); // true
ip.isV6Format('::ffff:127.0.0.1'); // true</p>

<p>// operate on buffers in-place
var buf = new Buffer(128);
var offset = 64;
ip.toBuffer('127.0.0.1', buf, offset);  // [127, 0, 0, 1] at offset 64
ip.toString(buf, offset, 4);            // '127.0.0.1'</p>

<p>// subnet information
ip.subnet('192.168.1.134', '255.255.255.192')
// { networkAddress: '192.168.1.128',
//   firstAddress: '192.168.1.129',
//   lastAddress: '192.168.1.190',
//   broadcastAddress: '192.168.1.191',
//   subnetMask: '255.255.255.192',
//   subnetMaskLength: 26,
//   numHosts: 62,
//   length: 64,
//   contains: function(addr){...} }
ip.cidrSubnet('192.168.1.134/26')
// Same as previous.</p>

<p>// range checking
ip.cidrSubnet('192.168.1.134/26').contains('192.168.1.190') // true</p>

<p>// ipv4 long conversion
ip.toLong('127.0.0.1'); // 2130706433
ip.fromLong(2130706433); // '127.0.0.1'
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/ip/ip.gif" alt="ip" /></p>
]]></content>
  </entry>
  
</feed>
