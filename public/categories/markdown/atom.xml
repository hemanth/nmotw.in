<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: markdown | NMOTW]]></title>
  <link href="http://nmotw.in//github/public/categories/markdown/atom.xml" rel="self"/>
  <link href="http://nmotw.in//github/"/>
  <updated>2018-12-10T09:39:53+05:30</updated>
  <id>http://nmotw.in//github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[evalmd]]></title>
    <link href="http://nmotw.in//github/evalmd/"/>
    <updated>2016-12-29T17:14:52+05:30</updated>
    <id>http://nmotw.in//github/evalmd</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/evalmd">evalmd</a></h1>

<blockquote><p>ðŸŽ£ Evaluates JavaScript code blocks from markdown files.</p></blockquote>

<p><code>evalmd</code> parses your markdown files, extract the JavaScript code blocks from them and evaluate it, in the eval bombs it reports and there are ease flags to turn off evaluation for specific code blocks.</p>

<p>The <code>javascript</code> or <code>js</code> code blocks works fine with it.</p>

<p><strong>Get it:</strong> <code>npm install -g evalmd</code></p>

<p><strong>Sample usage CLI:</strong></p>

<p>```sh</p>

<p>$ evalmd</p>

<p>evalmd - Evaluate the javascript in markdown files</p>

<p>Options:
  -i, --include    Includes prevented blocks  [default: false]
  -P, --prevent    Prevent code from being evaluated  [default: false]
  -b, --block      Change the scope to block level  [default: false]
  -o, --output     Output js  [choices: false, true, "preserve", "concat", "preserveAlter", "concatAlter"] [default: false]
  -n, --nonstop    Runs all files regardless if error  [default: false]
  -s, --silent     Silence <code>evalmd</code> logging  [default: false]
  -u, --uniform    Does not use absolute urls when error logging  [default: false]
  -D, --debug      Debug Output  [default: false]
  -h, --help       Show help  [boolean]
  --path           Prefix local module with path  [default: "./"]
  --package        Th path of a package.json  [default: "./package.json"]
  --version        Show version number  [boolean]
  -d, --delimeter  [default: false]</p>

<p>Examples:
  evalmd &lt;file(s)>        Evaluate file(s)
  evalmd &lt;file(s)> -n     Evaluate file(s) uninterrupted
  evalmd &lt;file(s)> -b     Evaluate block(s)
  evalmd &lt;file(s)> -bn    Evaluate block(s) uninterrupted
  evalmd &lt;file(s)> -Po    Outputs js file(s)
  evalmd &lt;file(s)> -Pio   Outputs js file(s) with all block(s) (for linting)
  evalmd &lt;file(s)> -Pob   Outputs block(s)
  evalmd &lt;file(s)> -Piob  Outputs all blocks(s) (for linting)
```</p>

<p><strong>Sample usage from code:</strong></p>

<p><code>js
var evalmd = require('evalmd');
assert.equal(typeof evalmd, 'function'); // true
</code></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/evalmd/evalmd.gif" alt="evalmd" /></p>
]]></content>
  </entry>
  
</feed>
