<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: dom | NMOTW]]></title>
  <link href="http://nmotw.in//github/public/categories/dom/atom.xml" rel="self"/>
  <link href="http://nmotw.in//github/"/>
  <updated>2019-02-09T12:03:00+05:30</updated>
  <id>http://nmotw.in//github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[scrolldir]]></title>
    <link href="http://nmotw.in//github/scrolldir/"/>
    <updated>2017-12-30T15:32:47+05:30</updated>
    <id>http://nmotw.in//github/scrolldir</id>
    <content type="html"><![CDATA[<h1><a href="https://nmpjs.org/scrolldir">scrolldir</a></h1>

<blockquote><p>leverage scroll direction with CSS ⬆⬇</p></blockquote>

<p><code>0</code> dep, <code>1KB</code> micro JS lib to easily leverage vertical scroll direction in CSS via a data attribute.</p>

<p><strong>Get it:</strong> <code>npm install scrolldir</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
scrollDir();</p>

<p>scrollDir({ attribute: 'new-attribute-name' });</p>

<p>scrollDir({ el: 'your-new-selector' });</p>

<p>scrollDir({ off: true });</p>

<p>scrollDir({ direction: 'up' });
```</p>

<p>ScrollDir will set the <code>data-scrolldir</code> attribute on the <code>&lt;html&gt;</code> element to <code>up</code> or <code>down</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/scrolldir/scrolldir.gif" alt="scrolldir.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fitty]]></title>
    <link href="http://nmotw.in//github/fitty/"/>
    <updated>2017-08-03T13:03:33+05:30</updated>
    <id>http://nmotw.in//github/fitty</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fitty">fitty</a></h1>

<blockquote><p>Makes text fit perfectly.</p></blockquote>

<p>Fitty, Snugly text resizing: Scales up (or down) text so it fits perfectly to its parent container.</p>

<p>The crux is of fitty is the <code>fit</code> method which marks the fitty as dirty and requests a redraw (this will also redraw any other fitty marked as dirty).</p>

<p><strong>Get it:</strong> <code>npm install fitty</code></p>

<p><strong>Sample usage:</strong></p>

<p>```html
const fitty = require('fitty');</p>

<p>fitty('#my-element);
```</p>

<p>Default options:</p>

<p><code>js
const defaultOptions = {
  minSize: 16,
  maxSize: 512,
  multiLine: true,
  observeMutations: 'MutationObserver' in w ? mutationObserverDefaultSetting : false
};
</code>
Yes, it uses <code>MutationObserver</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/fitty/fitty.gif" alt="fitty" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stikcybits]]></title>
    <link href="http://nmotw.in//github/stikcybits/"/>
    <updated>2017-07-08T15:28:28+05:30</updated>
    <id>http://nmotw.in//github/stikcybits</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/stickybits">stickybits</a></h1>

<blockquote><p>Alternative to position: sticky polyfills.</p></blockquote>

<ul>
<li><p>Aprox <code>~2KB</code> of javascript that would help us to know when a DOM element is stuck (position:sticky).</p></li>
<li><p>It can add a CSS Sticky Class <code>.js-is-sticky</code> when <code>position: sticky</code> elements become active and a CSS Stuck Class <code>.js-is-stuck</code> when they become stuck.</p></li>
<li><p>Loosely mimics <code>position: sticky</code> to consistently stick elements vertically across multiple platforms.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install stickybits</code></p>

<p><strong>Sample usage:</strong></p>

<p>```js
 stickybits('selector', options);</p>

<p> /*
Options:</p>

<pre><code>- target = el (DOM element)
- offset = 0 || 'dealer's choice'
- verticalPosition = top || bottom
- useStickyClasses = true || false
- elStyles = CSS Styles
- positionVal = fixed || sticky
</code></pre>

<p> */
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/stickybits/stickybits.gif" alt="stickybits.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dom-scroll-into-view]]></title>
    <link href="http://nmotw.in//github/dom-scroll-into-view/"/>
    <updated>2017-06-18T15:32:27+05:30</updated>
    <id>http://nmotw.in//github/dom-scroll-into-view</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dom-scroll-into-view">dom-scroll-into-view</a></h1>

<blockquote><p>scroll node in contain to make node visible</p></blockquote>

<p><code>dom-scroll-into-view</code> a dom util that helps in scrolling to node that is targeted.</p>

<p><strong>Get it:</strong> <code>npm install dom-scroll-into-view</code></p>

<p><strong>Sample usage:</strong></p>

<p><code>js
var scrollIntoView = require('dom-scroll-into-view');
scrollIntoView(source,container,config);
</code></p>

<p>```js
//config
   {</p>

<pre><code>   alignWithLeft,
   alignWithTop,
   allowHorizontalScroll,
   onlyScrollIfNeeded,
   offsetTop,
   offsetLeft,
   offsetBottom,
   offsetRight
</code></pre>

<p>   }
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/dom-scroll-into-view/dom-scroll-into-view.gif" alt="dom-scroll-into-view.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what-input]]></title>
    <link href="http://nmotw.in//github/what-input/"/>
    <updated>2017-04-07T19:40:55+05:30</updated>
    <id>http://nmotw.in//github/what-input</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/what-input">what-input</a></p>

<blockquote><p>A global utility for tracking the current input method (mouse, keyboard or touch).</p></blockquote>

<p>What Input adds data attributes to the <html> tag based on the type of input being used.</p>

<p>It also exposes a simple API that can be used for scripting interactions.</p>

<p><strong>GET IT:</strong> <code>npm install --save what-input</code></p>

<p><strong>Sample usage:</strong></p>

<p><code>``js
whatInput.ask(); // returns</code>mouse<code>,</code>keyboard<code>or</code>touch`</p>

<p>whatInput.types(); // ex. returns ['mouse', 'keyboard']</p>

<p>whatInput.ask('loose'); // returns <code>mouse</code> because mouse movement was detected</p>

<p>myButton.addEventListener('click', function() {</p>

<p>  if (whatInput.ask() === 'mouse') {</p>

<pre><code>// do mousy things
</code></pre>

<p>  } else if (whatInput.ask() === 'keyboard') {</p>

<pre><code>// do keyboard things
</code></pre>

<p>  }</p>

<p>});
```</p>

<p>Event mapping:</p>

<p>```js
// mapping of events to input types
const inputMap = {</p>

<pre><code>'keyup': 'keyboard',
'mousedown': 'mouse',
'mousemove': 'mouse',
'MSPointerDown': 'pointer',
'MSPointerMove': 'pointer',
'pointerdown': 'pointer',
'pointermove': 'pointer',
'touchstart': 'touch'
</code></pre>

<p>};
```</p>

<p><strong>GIF FTW:</strong></p>

<p><img src="/images/what-input/what-input.gif" alt="what-input" /></p>
]]></content>
  </entry>
  
</feed>
