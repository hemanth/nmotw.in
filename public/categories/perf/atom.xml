<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: perf | NMOTW]]></title>
  <link href="http://nmotw.in//github/public/categories/perf/atom.xml" rel="self"/>
  <link href="http://nmotw.in//github/"/>
  <updated>2018-09-23T15:49:50+05:30</updated>
  <id>http://nmotw.in//github/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[hiper]]></title>
    <link href="http://nmotw.in//github/hiper/"/>
    <updated>2018-07-28T15:08:33+05:30</updated>
    <id>http://nmotw.in//github/hiper</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/hiper">hiper</a></h1>

<blockquote><p>üöÄ A statistical analysis tool for performance testing.</p></blockquote>

<p><code>hiper</code> is short for  <em>Hi</em> <em>per</em>formance, makes use of <code>puppeteer</code> and gives us the below performance metrics.</p>

<ul>
<li>DNS lookup time</li>
<li>TCP connect time</li>
<li>TTFB</li>
<li>Download time of the page</li>
<li>After DOM Ready download time</li>
<li>White screen time</li>
<li>DOM Ready time</li>
<li>Load time</li>
</ul>


<p><strong>Get it:</strong> <code>npm install hiper</code></p>

<p><strong>Sample usage:</strong></p>

<p>```sh
hiper --help</p>

<p>Usage: hiper [options] [url]</p>

<p>üöÄ A statistical analysis tool for performance testing</p>

<p>Options:</p>

<p>   -v, --version                output the version number
   -n, --count <n>              specified loading times (default: 20)
   -c, --config <path>          load the configuration file
   -u, --useragent <ua>         to set the useragent
   -H, --headless [b]           whether to use headless mode (default: true)
   -e, --executablePath <path>  use the specified chrome browser
   --no-cache                   disable cache (default: false)
   --no-javascript              disable javascript (default: false)
   --no-online                  disable network (defalut: false)
   -h, --help                   output usage information
```</p>

<p>```
$ hiper nmotw.in</p>

<hr />

<ul>
<li><ul>
<li><ul>
<li>(<em>)</em> <strong>   </strong>_ _ __</li>
</ul>
</li>
</ul>
</li>
<li>|<em>* * * '</em> \ / _ \ '__|</li>
<li>_  * * |<em>) *  __/ |
|</em><em> |<em>|</em></em> .<strong>/ _</strong>|_|

<pre><code> |_|
</code></pre></li>
</ul>


<p>üöÄ It takes 1.669 s to load <code>https://nmotw.in</code> 20 times</p>

<p>  DNS lookup time                 1.00 ms
  TCP connect time                126.00 ms
  TTFB                            551.00 ms
  Download time of the page       7.00 ms
  After DOM Ready download time   558.00 ms
  White screen time               699.00 ms
  DOM Ready time                  936.00 ms
  Load time                       1.26 s
```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/hiper/hiper.gif" alt="hiper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cost-of-modules]]></title>
    <link href="http://nmotw.in//github/cost-of-modules/"/>
    <updated>2016-12-01T19:06:43+05:30</updated>
    <id>http://nmotw.in//github/cost-of-modules</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/cost-of-modules">cost-of-modules</a></h1>

<blockquote><p>Find out which of your dependencies is slowing you down üê¢</p></blockquote>

<p><code>cost-of-modules</code> is a cheeky module that generates a neat table of dependencies with children and size, which would help us to easily
identify which dependency is slowing the module down.</p>

<p><strong>Get it:</strong> <code>npm install -g cost-of-modules</code></p>

<p>_Usage:__ Run <code>cost-of-modules</code> in the directory you are working in.</p>

<p><strong>Options</strong></p>

<p><code>--less</code>  Show the biggest 10 modules</p>

<p><code>--yarn</code>  Use yarn instead of npm to install dependencies</p>

<p><code>--no-install</code>  Skip installation</p>

<p><code>--include-dev</code>  Include devDependencies as well - for üöÄ collaborator experience</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/cost-of-modules/cost-of-modules.gif" alt="cost-of-modules" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svgo]]></title>
    <link href="http://nmotw.in//github/svgo/"/>
    <updated>2015-10-15T21:50:41+05:30</updated>
    <id>http://nmotw.in//github/svgo</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/svgo">svgo</a></h1>

<blockquote><p><strong>SVG O</strong>ptimizer</p></blockquote>

<p>Optimizes SVG by cleaning:</p>

<ul>
<li><p>Editor metadata.</p></li>
<li><p>Comments.</p></li>
<li><p>Hidden elements.</p></li>
<li><p>Default or non-optimal values.</p></li>
<li><p>Other stuff that can be safely removed or converted without affecting SVG rendering result.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install --global svgo</code></p>

<p><strong>Sample usage on CLI:</strong></p>

<p>```
Usage:
  svgo [OPTIONS] [ARGS]</p>

<p>Options:
  -h, --help : Help
  -v, --version : Version
  -i INPUT, --input=INPUT : Input file, "-" for STDIN
  -s STRING, --string=STRING : Input SVG data string
  -f FOLDER, --folder=FOLDER : Input folder, optimize and rewrite all *.svg files
  -o OUTPUT, --output=OUTPUT : Output file or folder (by default the same as the input), "-" for STDOUT
  -p PRECISION, --precision=PRECISION : Set number of digits in the fractional part, overrides plugins params
  --config=CONFIG : Config file to extend or replace default
  --disable=DISABLE : Disable plugin by name
  --enable=ENABLE : Enable plugin by name
  --datauri=DATAURI : Output as Data URI string (base64, URI encoded or unencoded)
  --pretty : Make SVG pretty printed
  --show-plugins : Show available plugins and exit</p>

<p>Arguments:
  INPUT : Alias to --input
  OUTPUT : Alias to --output
```</p>

<p>```sh
  $ svgo red.svg red.min.svg</p>

<p>  Done in 68 ms!
  0.708 KiB - 70.8% = 0.207 KiB
```</p>

<p><strong>Sample API usage:</strong></p>

<p>```js
var readFile = require('fs').readFile,</p>

<pre><code>path = require('path'),
SVGO = require('svgo'),
filepath = PATH.resolve(__dirname, 'test.svg'),
svgo = new SVGO(/*{ custom config object }*/);
</code></pre>

<p>readFile(filepath, 'utf8', function(err, data) {</p>

<pre><code>if (err) {
    throw err;
}

svgo.optimize(data, function(result) {
    console.log(result);
    // {
    //     // optimized SVG data string
    //     data: '&lt;svg width="10" height="20"&gt;test&lt;/svg&gt;'
    //     // additional info such as width/height
    //     info: {
    //         width: '10',
    //         height: '20'
    //     }
    // }
});
</code></pre>

<p>});
```</p>

<p>P.S: Don't miss to read <a href="https://github.com/svg/svgo/blob/master/docs/how-it-works/en.md#how-it-works">How it works!</a></p>

<p><strong>GIF FTW!</strong></p>

<p><img src="/images/svgo/svgo.gif" alt="svgo.gif" /></p>
]]></content>
  </entry>
  
</feed>
