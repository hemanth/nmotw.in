<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hemanth.HM]]></title>
  <link href="/atom.xml" rel="self"/>
  <link href="/"/>
  <updated>2021-01-27T05:05:49-08:00</updated>
  <id>/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[zero]]></title>
    <link href="/blog/2019/zero/"/>
    <updated>2019-09-26T04:15:10-07:00</updated>
    <id>/blog/2019/zero</id>
    <content type="html"><![CDATA[<h1><a href="https://zeroserver.io/">zero</a></h1>

<blockquote><p>Zero configuration web framework.</p></blockquote>

<p><code>Zero</code> abstracts the usual project configuration for routing, bundling, and transpiling to make it easier to get started.Inbuild support for <code>Node.js</code>, <code>React</code>, <code>HTML</code>, <code>MDX</code>, and <code>static files</code> and put them all in a folder.
Auto configuration, File-system Based Routing and Auto Dependency Resolution are the major features of <code>zero</code>.</p>

<p><strong>Get it:</strong> <code>npm install zero</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// time.js</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">moment</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;moment&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">().</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;LT&#39;</span><span class="p">);</span>   <span class="c1">// 11:51 AM</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="nx">time</span><span class="o">:</span> <span class="nx">time</span> <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>zero</code> should serve <code>http://localhost:3000/time</code></p>

<p><strong>GIF FTW</strong></p>

<p><img src="//images/zero/zero.gif" alt="zero" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vfile]]></title>
    <link href="/blog/2019/vfile/"/>
    <updated>2019-09-21T04:34:56-07:00</updated>
    <id>/blog/2019/vfile</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/vfile">vfile</a></h1>

<blockquote><p>Virtual file format for text processing.</p></blockquote>

<p><code>vfile</code> can be used anywhere where files need a lightweight representation, is a part of <code>unified</code>, a text processing umbrella.
Each processors that parse, transform, and compile text, and need a virtual representation of files and a place to store messages about them.</p>

<p><strong>Get it:</strong> <code>npm install vfile</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">vfile</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;vfile&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">vfile</span><span class="p">({</span><span class="nx">path</span><span class="o">:</span> <span class="s1">&#39;~/example.txt&#39;</span><span class="p">,</span> <span class="nx">contents</span><span class="o">:</span> <span class="s1">&#39;Alpha *braavo* charlie.&#39;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">path</span> <span class="c1">// =&gt; &#39;~/example.txt&#39;</span>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">dirname</span> <span class="c1">// =&gt; &#39;~&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">extname</span> <span class="o">=</span> <span class="s1">&#39;.md&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">basename</span> <span class="c1">// =&gt; &#39;example.md&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">basename</span> <span class="o">=</span> <span class="s1">&#39;index.text&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">history</span> <span class="c1">// =&gt; [&#39;~/example.txt&#39;, &#39;~/example.md&#39;, &#39;~/index.text&#39;]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">file</span><span class="p">.</span><span class="nx">message</span><span class="p">(</span><span class="s1">&#39;`braavo` is misspelt; did you mean `bravo`?&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">line</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">column</span><span class="o">:</span> <span class="mi">8</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">messages</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/vfile/vfile.gif" alt="vfile.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[uxm]]></title>
    <link href="/blog/2019/uxm/"/>
    <updated>2019-09-14T00:34:28-07:00</updated>
    <id>/blog/2019/uxm</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/uxm">uxm</a></h1>

<blockquote><p>User Experience Metric</p></blockquote>

<p>User Experience Metric aka <code>uxm</code> a tiny (1kb gzip) utility library for collecting web performance metrics
that affect user experience. Graceful support of latest browser APIs like Performance Paint Timing, Network Information, or Device Memory,  User Timing API and experimental Long Tasks support for interactivity metrics.</p>

<p><strong>Get it:</strong> <code>npm install uxm</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">uxm</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;uxm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">uxm</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="nx">metrics</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">metrics</span><span class="p">)</span> <span class="c1">// -&gt;</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;deviceType&quot;</span><span class="o">:</span> <span class="s2">&quot;desktop&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;effectiveConnectionType&quot;</span><span class="o">:</span> <span class="s2">&quot;4g&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;firstPaint&quot;</span><span class="o">:</span> <span class="mi">1646</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;firstContentfulPaint&quot;</span><span class="o">:</span> <span class="mi">1646</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;domContentLoaded&quot;</span><span class="o">:</span> <span class="mi">1698</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;onLoad&quot;</span><span class="o">:</span> <span class="mi">2508</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">getUrl</span><span class="p">,</span> <span class="nx">getFirstContentfulPaint</span><span class="p">,</span> <span class="nx">getDomContentLoaded</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;uxm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">metrics</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">url</span><span class="o">:</span> <span class="nx">getUrl</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">fcp</span><span class="o">:</span> <span class="nx">getFirstContentfulPaint</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">dcl</span><span class="o">:</span> <span class="nx">getDomContentLoaded</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">getDeviceType</span><span class="p">,</span> <span class="nx">getDeviceMemory</span><span class="p">,</span> <span class="nx">getEffectiveConnectionType</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;uxm&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">device</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">type</span><span class="o">:</span> <span class="nx">getDeviceType</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">memory</span><span class="o">:</span> <span class="nx">getDeviceMemory</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">connection</span><span class="o">:</span> <span class="nx">getEffectiveConnectionType</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/uxm/uxm.gif" alt="umx" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lolex]]></title>
    <link href="/blog/2019/lolex/"/>
    <updated>2019-09-05T03:44:51-07:00</updated>
    <id>/blog/2019/lolex</id>
    <content type="html"><![CDATA[<h1><a href="https://nmp.im/lolex">lolex</a></h1>

<blockquote><p>Fake "timers"</p></blockquote>

<p><code>lolex</code> useful for testing, extract from <code>Sinon.JS</code> helps to fake timer:</p>

<ul>
<li><code>setTimeout</code></li>
<li><code>clearTimeout</code></li>
<li><code>setImmediate</code></li>
<li><code>clearImmediate</code></li>
<li><code>setInterval</code></li>
<li><code>clearInterval</code></li>
<li><code>requestAnimationFrame</code></li>
<li><code>cancelAnimationFrame</code></li>
<li><code>requestIdleCallback</code></li>
<li><code>cancelIdleCallback</code></li>
</ul>


<p>Along with a clock instance that controls the flow of time. Lolex also provides a <code>Date</code> implementation that gets its time from the clock.</p>

<p>In addition in browser environment lolex provides a <code>performance</code> implementation that gets its time from the clock. In Node environments lolex provides a <code>nextTick</code> implementation that is synchronized with the clock - and a <code>process.hrtime</code> shim that works with the clock.</p>

<p><strong>Get it:</strong> <code>npm install lolex</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">lolex</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lolex&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">clock</span> <span class="o">=</span> <span class="nx">lolex</span><span class="p">.</span><span class="nx">createClock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">clock</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;nmotw.in&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">},</span> <span class="mi">15</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="nx">clock</span><span class="p">.</span><span class="nx">tick</span><span class="p">(</span><span class="mi">15</span><span class="p">);</span> <span class="c1">// nmotw.in</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/lolex/lolex.gif" alt="lolex" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[text-diff]]></title>
    <link href="/blog/2019/text-diff/"/>
    <updated>2019-08-30T06:28:57-07:00</updated>
    <id>/blog/2019/text-diff</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/text-diff">text-diff</a></h1>

<blockquote><p>HTML formatted text diff!</p></blockquote>

<p><code>text-diff</code> is an implementation of <a href="https://github.com/google/diff-match-patch">diff-match-patch</a> which is a high-performance library in multiple languages that manipulates plain text.</p>

<p><strong>Get it:</strong> <code>npm install text-diff</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Diff</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;text-diff&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Diff</span><span class="p">();</span> <span class="c1">// options may be passed to constructor; see below</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">textDiff</span> <span class="o">=</span> <span class="nx">diff</span><span class="p">.</span><span class="nx">main</span><span class="p">(</span><span class="s1">&#39;text1&#39;</span><span class="p">,</span> <span class="s1">&#39;text2&#39;</span><span class="p">);</span> <span class="c1">// produces diff array</span>
</span><span class='line'><span class="nx">diff</span><span class="p">.</span><span class="nx">prettyHtml</span><span class="p">(</span><span class="nx">textDiff</span><span class="p">);</span> <span class="c1">// produces a formatted HTML string</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/text-diff/text-diff.gif" alt="text-diff" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[npkill]]></title>
    <link href="/blog/2019/npkill/"/>
    <updated>2019-08-23T04:55:10-07:00</updated>
    <id>/blog/2019/npkill</id>
    <content type="html"><![CDATA[<h1><a href="https://npkill.js.org/">npkill</a></h1>

<blockquote><p>Easily find and remove old and heavy node_modules folders</p></blockquote>

<p><code>npkill</code> is a cheeky CLI tool that helps us to clean up <code>node_modules</code> with a uber cool CLI experience.</p>

<p><strong>Get it:</strong> <code>npx npkill</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npkill --help
</span><span class='line'>
</span><span class='line'>   -c, --bg-color          Change row highlight color. Available colors are: blue, cyan, magenta, red, white and yellow. Default
</span><span class='line'>                           is blue.
</span><span class='line'>
</span><span class='line'>   -d, --directory         Set directory from which to start searching. By default, starting-point is .
</span><span class='line'>
</span><span class='line'>   -D, --delete-all        CURRENTLY DISABLED. Automatically delete all node_modules folders that are found.
</span><span class='line'>
</span><span class='line'>   -e, --show-errors       Show error messages <span class="k">if </span>any.
</span><span class='line'>
</span><span class='line'>   -f, --full              Start searching from the home of the user <span class="o">(</span>example: <span class="s2">&quot;/home/user&quot;</span> in linux<span class="o">)</span>.
</span><span class='line'>
</span><span class='line'>   -gb                     Show folder size in Gigabytes
</span><span class='line'>
</span><span class='line'>   -h, --help, ?           Show this <span class="nb">help </span>page, with all options.
</span><span class='line'>
</span><span class='line'>   -nu, --no-check-update  Dont check <span class="k">for </span>updates on startup.
</span><span class='line'>
</span><span class='line'>   -v, --version           Show version.
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/npkill/npkill.gif" alt="npkill" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[console-badge]]></title>
    <link href="/blog/2019/console-badge/"/>
    <updated>2019-08-18T02:33:48-07:00</updated>
    <id>/blog/2019/console-badge</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/console-badge">console-badge</a></h1>

<blockquote><p>🎨 Create simple badges in the browser console</p></blockquote>

<p><code>console-badge</code> fun little less than 1kB util that helps us to console log badges that can be customized and also provides  popular shields.io badge style as the default style.</p>

<p><strong>Get it:</strong> <code>npm install console-badge</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="o">*</span> <span class="nx">as</span> <span class="nx">consoleBadge</span> <span class="nx">from</span> <span class="s1">&#39;console-badge&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">consoleBadge</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">mode</span><span class="o">:</span> <span class="s1">&#39;shields.io&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">leftText</span><span class="o">:</span> <span class="s1">&#39;console-badge&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rightText</span><span class="o">:</span> <span class="s1">&#39;hello world 🚀&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rightBgColor</span><span class="o">:</span> <span class="s1">&#39;#ffc107&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rightTextColor</span><span class="o">:</span> <span class="s1">&#39;#1a1a1a&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">consoleBadge</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">leftText</span><span class="o">:</span> <span class="s1">&#39;😎 Check out our code here:&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">leftTextColor</span><span class="o">:</span> <span class="s1">&#39;#000&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">leftBgColor</span><span class="o">:</span> <span class="s1">&#39;#ddd&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rightText</span><span class="o">:</span> <span class="s1">&#39;https://nmotw.in&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">rightBgColor</span><span class="o">:</span> <span class="s1">&#39;#000&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/console-badge/console-badge.gif" alt="console-badge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[human-interval]]></title>
    <link href="/blog/2019/human-interval/"/>
    <updated>2019-08-08T02:51:19-07:00</updated>
    <id>/blog/2019/human-interval</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/human-interval">human-interval</a></h1>

<blockquote><p>Human readable interval parser.</p></blockquote>

<p><code>human-interval</code> with 60 lines of code and some smart use of regexps provides a easy way to parser intervals in human readable form.</p>

<p><strong>Get it:</strong> <code>npm install --save human-interval</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">humanInterval</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;human-interval&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Do something crazy!</span>
</span><span class='line'><span class="p">},</span> <span class="nx">humanInterval</span><span class="p">(</span><span class="s1">&#39;three minutes&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">humanInterval</span><span class="p">(</span><span class="s1">&#39;one minute&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">humanInterval</span><span class="p">(</span><span class="s1">&#39;1.5 minutes&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">humanInterval</span><span class="p">(</span><span class="s1">&#39;3 days and 4 hours&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">humanInterval</span><span class="p">(</span><span class="s1">&#39;3 days, 4 hours and 36 seconds&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/human-interval/human-interval.gif" alt="human-interval" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jay]]></title>
    <link href="/blog/2019/jay/"/>
    <updated>2019-08-01T03:46:11-07:00</updated>
    <id>/blog/2019/jay</id>
    <content type="html"><![CDATA[<h1><a href="http://npm.im/jay-repl">jay</a></h1>

<blockquote><p>Supercharged JavaScript REPL 😎</p></blockquote>

<p>Jay is a terminal-based JavaScript REPL focused on increasing prototyping speed and productivity, it provides:</p>

<ul>
<li>require modules directly from the registry</li>
<li>Eager eval (requires node >= 12.3.0)</li>
<li>Top level await</li>
<li>Typeahead + dropdown menu-style completion</li>
<li>Colored input</li>
<li>Bracket/quote pair completion</li>
<li>Fresh require</li>
<li>Full readline keybindings support</li>
<li>Lazy loaded built-in modules</li>
<li>_ variable</li>
</ul>


<p><strong>Get it:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g jay-repl</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npx -p jay-repl jay</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample usage:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ jay --help
</span><span class='line'>node v12.0.3 npm@6.9.0 jay-repl@0.2.1
</span><span class='line'>Type `&gt; jay.help()` in the prompt for more information.
</span><span class='line'>&gt;</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/jay/jay.gif" alt="jay" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[responselike]]></title>
    <link href="/blog/2019/responselike/"/>
    <updated>2019-07-28T01:42:19-07:00</updated>
    <id>/blog/2019/responselike</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/responselike">responselike</a></h1>

<blockquote><p>response-like object for mocking HTTP response stream.</p></blockquote>

<p><code>responselike</code> returns a streamable response object similar to a HTTP response stream. Useful for formatting cached responses so they can be consumed by code expecting a real response.</p>

<p><strong>Get it:</strong> <code>npm install responselike</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Response</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;responselike&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Response</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">},</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="s1">&#39;Hi!&#39;</span><span class="p">),</span> <span class="s1">&#39;https://example.com&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 200</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">headers</span><span class="p">;</span>
</span><span class='line'><span class="c1">// { foo: &#39;bar&#39; }</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'><span class="c1">// &lt;Buffer 48 69 21&gt;</span>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">url</span><span class="p">;</span>
</span><span class='line'><span class="c1">// &#39;https://example.com&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">response</span><span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">);</span>
</span><span class='line'><span class="c1">// Hi!</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/responselike/responselike.gif" alt="responselike" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[get-port]]></title>
    <link href="/blog/2019/get-port/"/>
    <updated>2019-07-19T03:01:34-07:00</updated>
    <id>/blog/2019/get-port</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/get-port">get-port</a></h1>

<blockquote><p>Get an available TCP port</p></blockquote>

<p><code>get-port</code> helps us to find a free TCP port from a list of ports or the entire port pool!</p>

<p>The crux of this module is in the below function:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const getAvailablePort = options =&gt; new Promise((resolve, reject) =&gt; {
</span><span class='line'>  const server = net.createServer();
</span><span class='line'>  server.unref();
</span><span class='line'>  server.on('error', reject);
</span><span class='line'>  server.listen(options, () =&gt; {
</span><span class='line'>      const {port} = server.address();
</span><span class='line'>      server.close(() =&gt; {
</span><span class='line'>          resolve(port);
</span><span class='line'>      });
</span><span class='line'>  });
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install get-port</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">getPort</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;get-port&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">await</span> <span class="nx">getPort</span><span class="p">());</span>
</span><span class='line'>    <span class="c1">//=&gt; 51402</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">await</span> <span class="nx">getPort</span><span class="p">({</span><span class="nx">port</span><span class="o">:</span> <span class="p">[</span><span class="mi">3000</span><span class="p">,</span> <span class="mi">3001</span><span class="p">,</span> <span class="mi">3002</span><span class="p">]}));</span>
</span><span class='line'>    <span class="c1">// Will use any element in the preferred ports array if available, otherwise fall back to a random port</span>
</span><span class='line'><span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">await</span> <span class="nx">getPort</span><span class="p">({</span><span class="nx">port</span><span class="o">:</span> <span class="nx">getPort</span><span class="p">.</span><span class="nx">makeRange</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="mi">3100</span><span class="p">)}));</span>
</span><span class='line'>    <span class="c1">// Will use any port from 3000 to 3100, otherwise fall back to a random port</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/get-port/get-port.gif" alt="get-port" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hjson]]></title>
    <link href="/blog/2019/hjson/"/>
    <updated>2019-07-13T08:52:19-07:00</updated>
    <id>/blog/2019/hjson</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/hsjon">hjson</a></h1>

<blockquote><p>A user interface for JSON.</p></blockquote>

<p><code>hjson</code>, human JSON if you may is a syntax extension to <code>JSON</code>, that allows us to create JSON with human friendly syntax with it's <code>prase</code> and <code>strigify</code> methods, like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">specify</span> <span class="nx">rate</span> <span class="k">in</span> <span class="nx">requests</span><span class="o">/</span><span class="nx">second</span> <span class="p">(</span><span class="nx">because</span> <span class="nx">comments</span> <span class="nx">are</span> <span class="nx">helpful</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rate</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// prefer c-style comments?</span>
</span><span class='line'>  <span class="cm">/* feeling old fashioned? */</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">did</span> <span class="nx">you</span> <span class="nx">notice</span> <span class="nx">that</span> <span class="nx">rate</span> <span class="nx">doesn</span><span class="err">&#39;</span><span class="nx">t</span> <span class="nx">need</span> <span class="nx">quotes</span><span class="o">?</span>
</span><span class='line'>  <span class="nx">hey</span><span class="o">:</span> <span class="nx">look</span> <span class="nx">ma</span><span class="p">,</span> <span class="nx">no</span> <span class="nx">quotes</span> <span class="k">for</span> <span class="nx">strings</span> <span class="nx">either</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">best</span> <span class="nx">of</span> <span class="nx">all</span>
</span><span class='line'>  <span class="nx">notice</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nx">anything</span><span class="o">:</span> <span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">yes</span><span class="p">,</span> <span class="nx">commas</span> <span class="nx">are</span> <span class="nx">optional</span><span class="o">!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GET IT:</strong> <code>npm install hjson</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Hjson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;hjson&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">Hjson</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">hjsonText</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">text2</span> <span class="o">=</span> <span class="nx">Hjson</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Usage:
</span><span class='line'>  hjson <span class="o">[</span>OPTIONS<span class="o">]</span>
</span><span class='line'>  hjson <span class="o">[</span>OPTIONS<span class="o">]</span> INPUT
</span><span class='line'>  hjson <span class="o">(</span>-h | --help | -?<span class="o">)</span>
</span><span class='line'>  hjson <span class="o">(</span>-V | --version<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>INPUT can be in JSON or Hjson format. If no file is given it will <span class="nb">read </span>from stdin.
</span><span class='line'>The default is to output as Hjson.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  <span class="o">(</span>-j | -json<span class="o">)</span>  output as formatted JSON.
</span><span class='line'>  <span class="o">(</span>-c | -json<span class="o">=</span>compact<span class="o">)</span>  output as JSON.
</span><span class='line'>Options <span class="k">for </span>Hjson output:
</span><span class='line'>  -sl         output the opening brace on the same line
</span><span class='line'>  -quote      quote all strings
</span><span class='line'>  -quote<span class="o">=</span>all  quote keys as well
</span><span class='line'>  -js         output in JavaScript/JSON compatible format
</span><span class='line'>              can be used with -rt and // comments
</span><span class='line'>  -rt         round trip comments
</span><span class='line'>  -nocol      disable colors
</span><span class='line'>  -cond<span class="o">=</span>n     <span class="nb">set </span>condense option <span class="o">(</span>default 60, 0 to disable<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Domain specific formats are optional extensions to Hjson and can be enabled with the following options:
</span><span class='line'>  +math: support <span class="k">for </span>Inf/inf, -Inf/-inf, Nan/naN and -0
</span><span class='line'>  +hex: parse hexadecimal numbers prefixed with 0x
</span><span class='line'>  +date: support ISO dates
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/hjson/hjson.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fetch-retry]]></title>
    <link href="/blog/2019/fetch-retry/"/>
    <updated>2019-07-06T01:53:46-07:00</updated>
    <id>/blog/2019/fetch-retry</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fetch-retry">fetch-retry</a></h1>

<blockquote><p>Adds retry functionality to the Fetch API.</p></blockquote>

<p><code>fetch-retry</code> in about 88 lines of code provides an extension to the <code>fetch</code> API to accept <code>retries</code>, <code>retryDelay</code>, and <code>retryOn</code> on the options object, when omitted will default to 3 retries, a 1000ms retry delay, and to retry only on network errors.</p>

<p><strong>Get it:</strong> <code>npm install fetch-retry</code></p>

<p><strong>Smaple usages:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span>  <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fetch-retry&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retries</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">retryDelay</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something with the result</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Retry on 503</span>
</span><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retryOn</span><span class="o">:</span> <span class="p">[</span><span class="mi">503</span><span class="p">]</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something with the result</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Custorm retry</span>
</span><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retryOn</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attempt</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// retry on any network error, or 4xx or 5xx status codes</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">retrying</span><span class="p">,</span> <span class="nx">attempt</span> <span class="nx">number</span> <span class="nx">$</span><span class="p">{</span><span class="nx">attempt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something with the result</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/fetch-retry/fetch-retry.gif" alt="fetch-retry" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toposort]]></title>
    <link href="/blog/2019/toposort/"/>
    <updated>2019-06-29T05:24:08-07:00</updated>
    <id>/blog/2019/toposort</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/toposort">toposort</a></h1>

<blockquote><p>Sort directed acyclic graphs</p></blockquote>

<p><code>toposort</code> does the topological sort or topological ordering of a directed graph.</p>

<p><strong>Get it:</strong> <code>npm install toposort</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// First, we define our edges.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">graph</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;put on your shoes&#39;</span><span class="p">,</span> <span class="s1">&#39;tie your shoes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shirt&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your jacket&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shorts&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your jacket&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shorts&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shoes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now, sort the vertices topologically, to reveal a legal execution order.</span>
</span><span class='line'><span class="nx">toposort</span><span class="p">(</span><span class="nx">graph</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [ &#39;put on your shirt&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shorts&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your jacket&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;tie your shoes&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sorting dependencies:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// This time, edges represent dependencies.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">graph</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;tie your shoes&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shoes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your jacket&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shirt&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shoes&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shorts&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your jacket&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shorts&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">toposort</span><span class="p">(</span><span class="nx">graph</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [ &#39;tie your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your jacket&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shirt&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shorts&#39; ]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now, reversing the list will reveal a legal execution order.</span>
</span><span class='line'><span class="nx">toposort</span><span class="p">(</span><span class="nx">graph</span><span class="p">).</span><span class="nx">reverse</span><span class="p">()</span>
</span><span class='line'><span class="c1">// [ &#39;put on your shorts&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shirt&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your jacket&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;tie your shoes&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/toposort/toposort.gif" alt="topsort" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emoji-flags]]></title>
    <link href="/blog/2019/emoji-flags/"/>
    <updated>2019-06-22T21:22:10-07:00</updated>
    <id>/blog/2019/emoji-flags</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/emoji-flags">emoji-flags</a></h1>

<blockquote><p>emoji flag symbol for a given country code.</p></blockquote>

<p><code>emoji-flags</code> is a sweet module that returns the emjoi flag for a given country code.</p>

<p><strong>Get it:</strong> <code>npm install emoji-flags</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">emojiFlags</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;emoji-flags&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// single country lookup by code</span>
</span><span class='line'><span class="nx">emojiFlags</span><span class="p">.</span><span class="nx">countryCode</span><span class="p">(</span><span class="s1">&#39;DK&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; { &quot;code&quot;: &quot;DK&quot;, &quot;emoji&quot;: &quot;🇩🇰&quot;, ... }</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// entire dataset</span>
</span><span class='line'><span class="nx">emojiFlags</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>emoji-flags --help
</span><span class='line'>
</span><span class='line'>  <span class="k">return </span>emoji flag symbol <span class="k">for </span>country code
</span><span class='line'>
</span><span class='line'>  Example
</span><span class='line'>    emoji-flags gb
</span><span class='line'>
</span><span class='line'>    emoji-flags dk --verbose
</span><span class='line'>
</span><span class='line'>    emoji-flags
</span><span class='line'>    <span class="o">=</span>&gt; returns the entire dataset
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/emoji-flags/emoji-flags.gif" alt="emoji-flags" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wait-on]]></title>
    <link href="/blog/2019/wait-on/"/>
    <updated>2019-06-13T21:41:12-07:00</updated>
    <id>/blog/2019/wait-on</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/wait-on">wait-on</a></h1>

<blockquote><p>wait for files, ports, sockets, http(s) resources.</p></blockquote>

<p><code>wait-on</code> is a cross-platform command line and API utility which will wait for files, ports, sockets, and http(s) resources to become available (or not available using reverse mode).</p>

<p><strong>Get it:</strong> <code>npm install [-g] wait-on</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">wait</span>-on file1 <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for file1, then exec NEXT_CMD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on f1 f2 <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for both f1 and f2, the exec NEXT_CMD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http://localhost:8000/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for http 2XX HEAD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on https://myserver/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for https 2XX HEAD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http-get://localhost:8000/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for http 2XX GET </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on https-get://myserver/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for https 2XX GET </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on tcp:4000 <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for service to listen on a TCP port</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on socket:/path/mysock <span class="c"># wait for service to listen on domain socket </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http://unix:/var/SOCKPATH:/a/foo <span class="c"># wait for http HEAD on domain socket </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http-get://unix:/var/SOCKPATH:/a/foo <span class="c"># wait for http GET on domain socket </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">waitOn</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// once here, all resources are available</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/wait-on/wait-on.gif" alt="wait-on" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zxcvbn]]></title>
    <link href="/blog/2019/zxcvbn/"/>
    <updated>2019-06-09T21:57:44-07:00</updated>
    <id>/blog/2019/zxcvbn</id>
    <content type="html"><![CDATA[<h1><a href="">zxcvbn</a></h1>

<blockquote><p>Password strength estimator!</p></blockquote>

<p><code>zxcvbn</code> is a uniq module through pattern matching and conservative estimation recognizes and weighs 30k common passwords helps us to estimate various parameters related to the strength of the password and also gives us the suggestion to improve the password.</p>

<p><strong>Get it:</strong> <code>npm install zxcvbn</code></p>

<p>__Sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">zxcvbn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;zxcvbn&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">zxcvbn</span><span class="p">(</span><span class="s1">&#39;Tr0ub4dour&amp;3&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ Would return an object like below:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  &quot;password&quot;: &quot;Tr0ub4dour&amp;3&quot;,</span>
</span><span class='line'><span class="cm">  &quot;guesses&quot;: 19058000,</span>
</span><span class='line'><span class="cm">  &quot;guesses_log10&quot;: 7.280077322611945,</span>
</span><span class='line'><span class="cm">  &quot;sequence&quot;: [</span>
</span><span class='line'><span class="cm">    {</span>
</span><span class='line'><span class="cm">      &quot;pattern&quot;: &quot;dictionary&quot;,</span>
</span><span class='line'><span class="cm">      &quot;i&quot;: 0,</span>
</span><span class='line'><span class="cm">      &quot;j&quot;: 9,</span>
</span><span class='line'><span class="cm">      &quot;token&quot;: &quot;Tr0ub4dour&quot;,</span>
</span><span class='line'><span class="cm">      &quot;matched_word&quot;: &quot;troubadour&quot;,</span>
</span><span class='line'><span class="cm">      &quot;rank&quot;: 11905,</span>
</span><span class='line'><span class="cm">      &quot;dictionary_name&quot;: &quot;us_tv_and_film&quot;,</span>
</span><span class='line'><span class="cm">      &quot;reversed&quot;: false,</span>
</span><span class='line'><span class="cm">      &quot;l33t&quot;: true,</span>
</span><span class='line'><span class="cm">      &quot;sub&quot;: {</span>
</span><span class='line'><span class="cm">        &quot;0&quot;: &quot;o&quot;,</span>
</span><span class='line'><span class="cm">        &quot;4&quot;: &quot;a&quot;</span>
</span><span class='line'><span class="cm">      },</span>
</span><span class='line'><span class="cm">      &quot;sub_display&quot;: &quot;0 -&gt; o, 4 -&gt; a&quot;,</span>
</span><span class='line'><span class="cm">      &quot;base_guesses&quot;: 11905,</span>
</span><span class='line'><span class="cm">      &quot;uppercase_variations&quot;: 2,</span>
</span><span class='line'><span class="cm">      &quot;l33t_variations&quot;: 4,</span>
</span><span class='line'><span class="cm">      &quot;guesses&quot;: 95240,</span>
</span><span class='line'><span class="cm">      &quot;guesses_log10&quot;: 4.978819386732842</span>
</span><span class='line'><span class="cm">    },</span>
</span><span class='line'><span class="cm">    {</span>
</span><span class='line'><span class="cm">      &quot;pattern&quot;: &quot;bruteforce&quot;,</span>
</span><span class='line'><span class="cm">      &quot;token&quot;: &quot;&amp;3&quot;,</span>
</span><span class='line'><span class="cm">      &quot;i&quot;: 10,</span>
</span><span class='line'><span class="cm">      &quot;j&quot;: 11,</span>
</span><span class='line'><span class="cm">      &quot;guesses&quot;: 100,</span>
</span><span class='line'><span class="cm">      &quot;guesses_log10&quot;: 2</span>
</span><span class='line'><span class="cm">    }</span>
</span><span class='line'><span class="cm">  ],</span>
</span><span class='line'><span class="cm">  &quot;calc_time&quot;: 2,</span>
</span><span class='line'><span class="cm">  &quot;crack_times_seconds&quot;: {</span>
</span><span class='line'><span class="cm">    &quot;online_throttling_100_per_hour&quot;: 686088000,</span>
</span><span class='line'><span class="cm">    &quot;online_no_throttling_10_per_second&quot;: 1905800,</span>
</span><span class='line'><span class="cm">    &quot;offline_slow_hashing_1e4_per_second&quot;: 1905.8,</span>
</span><span class='line'><span class="cm">    &quot;offline_fast_hashing_1e10_per_second&quot;: 0.0019058</span>
</span><span class='line'><span class="cm">  },</span>
</span><span class='line'><span class="cm">  &quot;crack_times_display&quot;: {</span>
</span><span class='line'><span class="cm">    &quot;online_throttling_100_per_hour&quot;: &quot;21 years&quot;,</span>
</span><span class='line'><span class="cm">    &quot;online_no_throttling_10_per_second&quot;: &quot;22 days&quot;,</span>
</span><span class='line'><span class="cm">    &quot;offline_slow_hashing_1e4_per_second&quot;: &quot;32 minutes&quot;,</span>
</span><span class='line'><span class="cm">    &quot;offline_fast_hashing_1e10_per_second&quot;: &quot;less than a second&quot;</span>
</span><span class='line'><span class="cm">  },</span>
</span><span class='line'><span class="cm">  &quot;score&quot;: 2,</span>
</span><span class='line'><span class="cm">  &quot;feedback&quot;: {</span>
</span><span class='line'><span class="cm">    &quot;warning&quot;: &quot;&quot;,</span>
</span><span class='line'><span class="cm">    &quot;suggestions&quot;: [</span>
</span><span class='line'><span class="cm">      &quot;Add another word or two. Uncommon words are better.&quot;,</span>
</span><span class='line'><span class="cm">      &quot;Capitalization doesn&#39;t help very much&quot;,</span>
</span><span class='line'><span class="cm">      &quot;Predictable substitutions like &#39;@&#39; instead of &#39;a&#39; don&#39;t help very much&quot;</span>
</span><span class='line'><span class="cm">    ]</span>
</span><span class='line'><span class="cm">  }</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/zxcvbn/zxcvbn.gif" alt="zxcvbn" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[store]]></title>
    <link href="/blog/2019/store/"/>
    <updated>2019-06-02T04:31:14-07:00</updated>
    <id>/blog/2019/store</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/store">store</a></h1>

<blockquote><p>Cross-browser storage for all use cases!</p></blockquote>

<p><code>store</code> provides basic <code>key/value</code> storage functionality (<code>get/set/remove/each</code>) as well as a rich set of plug-in <a href="https://github.com/marcuswestin/store.js#user-content-storages">storages</a> and extra functionality.</p>

<p><strong>Get it:</strong> <code>npm install store</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;store&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;site&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;nmotw.in&#39;</span> <span class="p">})</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">).</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;nmotw.in&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Example custom storage</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;myStorage&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">read</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">write</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">each</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">clearAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;store&#39;</span><span class="p">).</span><span class="nx">createStore</span><span class="p">(</span><span class="nx">storage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One could use <code>memoryStorage</code> or <code>localStorage</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="//images/store/store.gif" alt="store" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornis]]></title>
    <link href="/blog/2019/tornis/"/>
    <updated>2019-05-25T08:38:12-07:00</updated>
    <id>/blog/2019/tornis</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/tornis">tornis</a></h1>

<blockquote><p>Store for your viewport.</p></blockquote>

<p><code>tornis</code> a cheeky module with just 300 lines of code, enables us to track:</p>

<ul>
<li>Mouse position</li>
<li>Mouse cursor velocity</li>
<li>Viewport size</li>
<li>Scroll position</li>
<li>Scroll velocity</li>
</ul>


<p>Device orientation is under contruction, this can be thought as a store to your viewport, with state like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">scroll</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">changed</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">left</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">right</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">top</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">bottom</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">velocity</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">size</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">changed</span><span class="o">:</span> <span class="nb">Boolean</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">docY</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">mouse</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">changed</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="nx">velocity</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>      <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install tornis</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// From robb0wen/tornis</span>
</span><span class='line'><span class="c1">// import the Tornis store functions</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">watchViewport</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">unwatchViewport</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">getViewportState</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;tornis&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define a watched function, to be run on each update</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">updateValues</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">scroll</span><span class="p">,</span> <span class="nx">mouse</span><span class="p">,</span> <span class="nx">orientation</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">size</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something related to size</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">scroll</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something related to scroll position or velocity</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">mouse</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something related to mouse position or velocity</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// bind the watch function</span>
</span><span class='line'><span class="c1">// By default this will run the function as it is added to the watch list</span>
</span><span class='line'><span class="nx">watchViewport</span><span class="p">(</span><span class="nx">updateValues</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// to bind the watch function without calling it</span>
</span><span class='line'><span class="nx">watchViewport</span><span class="p">(</span><span class="nx">updateValues</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// when you want to stop updating</span>
</span><span class='line'><span class="nx">unwatchViewport</span><span class="p">(</span><span class="nx">updateValues</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// to get a snapshot of the current viewport state</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">getViewportState</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/tornis/tornis.gif" alt="tornis" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dinoql]]></title>
    <link href="/blog/2019/dinoql/"/>
    <updated>2019-05-17T23:57:30-07:00</updated>
    <id>/blog/2019/dinoql</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dinoql">dinoql</a></h1>

<blockquote><p>Query JS objects in GraphQL style!</p></blockquote>

<p><code>dinoql</code> provides GraphQL syntax for safe access of objects with aliases support, default resolvers fragments, variables and caching support and is highly customizable.</p>

<p><strong>Get it:</strong> <code>npm install dinoql</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">dinoql</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dinoql&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">users</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Victor Igor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;100&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Paul Gilbert&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;200&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span>
</span><span class='line'>  <span class="p">}],</span>  
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dinoql</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span><span class="err">`</span>
</span><span class='line'><span class="nx">users</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;200&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">`</span>
</span><span class='line'><span class="c1">// ^^ {users: [{name: &#39;Paul Gilbert&#39;}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="//images/dinoql/dinoql.gif" alt="dinoql-demo" /></p>
]]></content>
  </entry>
  
</feed>
