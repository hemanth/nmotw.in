<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2018-08-26T14:50:06+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[commitizen]]></title>
    <link href="http://nmotw.in/commitizen/"/>
    <updated>2018-08-26T14:37:52+05:30</updated>
    <id>http://nmotw.in/commitizen</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/commitizen">commitizen</a></h1>

<blockquote><p>Organized, detailed commits to git.</p></blockquote>

<p><code>commitizen</code> prompts to fill out any required commit fields at commit time. No more waiting until later for a git commit hook to run and reject your commit or reading the <code>contribution.md</code> for the commit format!</p>

<p><strong>Get it:</strong> <code>npm install -g commitizen</code></p>

<p><strong>Set up:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>npm install -g cz-conventional-changelog
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{ &quot;path&quot;: &quot;cz-conventional-changelog&quot; }&#39;</span> &gt; ~/.czrc
</span></code></pre></td></tr></table></div></figure>


<p>or</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>commitizen init cz-conventional-changelog --save-dev --save-exact
</span></code></pre></td></tr></table></div></figure>


<p>^ this reuslts in modification of your <code>package.json</code> to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="s2">&quot;config&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;commitizen&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;path&quot;</span><span class="o">:</span> <span class="s2">&quot;cz-conventional-changelog&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now one can just do <code>git cz</code> instead of <code>git commit</code> and enjoy the benifits!</p>

<p>Also, one could add it to <code>npm-scripts</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s2">&quot;scripts&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;commit&quot;</span><span class="o">:</span> <span class="s2">&quot;git-cz&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then execute: <code>npm run commit</code>.</p>

<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/commitizen/commitizen.gif" alt="commitizen" /></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tryor]]></title>
    <link href="http://nmotw.in/tryor/"/>
    <updated>2018-08-19T21:08:06+05:30</updated>
    <id>http://nmotw.in/tryor</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/tryor">tryor</a></h1>

<blockquote><p>try or return default.</p></blockquote>

<p><code>tryor</code> will give you back the return value of the function or, in case the function threw an exception, the default value.</p>

<p><code>tryor</code> just wrap the <code>fn</code> and <code>default</code> in try-catch as below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">tryor</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;use strict&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">fn</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">v</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install tryor</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// instead of</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">config</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">mayBeString</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">config</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// do this</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="nx">tryor</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">mayBeString</span><span class="p">),</span> <span class="p">{});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/tryor/tryor.gif" alt="tryor" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[aproba]]></title>
    <link href="http://nmotw.in/aproba/"/>
    <updated>2018-08-12T15:04:36+05:30</updated>
    <id>http://nmotw.in/aproba</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/aproba">aproba</a></h1>

<blockquote><p>A ridiculously light-weight function argument validator</p></blockquote>

<p><code>aproba</code> is of a kind an argument validator, that is concise and easier to use than assertions and doesn't encourage an infinite bikeshed of DSLs.</p>

<p><strong>Get it:</strong> <code>npm install aproba</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">validate</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;aproba&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">myfunc</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">validate</span><span class="p">(</span><span class="s1">&#39;SNF&#39;</span><span class="p">,</span> <span class="nx">args</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">myfunc</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{})</span> <span class="c1">// ok</span>
</span><span class='line'><span class="nx">myfunc</span><span class="p">(</span><span class="mi">123</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{})</span> <span class="c1">// type error</span>
</span><span class='line'><span class="nx">myfunc</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="mi">23</span><span class="p">)</span> <span class="c1">// missing arg error</span>
</span><span class='line'><span class="nx">myfunc</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{},</span> <span class="kc">true</span><span class="p">)</span> <span class="c1">// too many args error</span>
</span></code></pre></td></tr></table></div></figure>


<p>Valid types are:</p>

<table>
<thead>
<tr>
<th></th>
<th align="center"> type </th>
<th align="left"> description</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> *    </td>
<td align="left"> matches any type</td>
</tr>
<tr>
<td></td>
<td align="center"> A    </td>
<td align="left"> <code>Array.isArray</code> OR an <code>arguments</code> object</td>
</tr>
<tr>
<td></td>
<td align="center"> S    </td>
<td align="left"> typeof == string</td>
</tr>
<tr>
<td></td>
<td align="center"> N    </td>
<td align="left"> typeof == number</td>
</tr>
<tr>
<td></td>
<td align="center"> F    </td>
<td align="left"> typeof == function</td>
</tr>
<tr>
<td></td>
<td align="center"> O    </td>
<td align="left"> typeof == object and not type A and not type E</td>
</tr>
<tr>
<td></td>
<td align="center"> B    </td>
<td align="left"> typeof == boolean</td>
</tr>
<tr>
<td></td>
<td align="center"> E    </td>
<td align="left"> <code>instanceof Error</code> OR <code>null</code> <strong>(special: see below)</strong></td>
</tr>
<tr>
<td></td>
<td align="center"> Z    </td>
<td align="left"> == <code>null</code></td>
</tr>
</tbody>
</table>


<p>Validation failures throw one of the following <code>code</code> errors:</p>

<ul>
<li><code>EMISSINGARG</code></li>
<li><code>EINVALIDTYPE</code></li>
<li><code>ETOOMANYARGS</code></li>
<li><code>EUNKNOWNTYPE</code> (for an invalid type)</li>
</ul>


<p>P.S: For optinal args one can use a <code>|</code> ex: <code>SO|S</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/aproba/aproba.gif" alt="aproba.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pretty-error]]></title>
    <link href="http://nmotw.in/pretty-error/"/>
    <updated>2018-08-05T13:37:39+05:30</updated>
    <id>http://nmotw.in/pretty-error</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/pretty-error">pretty-errror</a></h1>

<blockquote><p>errors with less clutter</p></blockquote>

<p><code>pretty-error</code> turns error objects into something similar to an html document, and then uses <code>RenderKid</code> to render the document using simple html/css-like commands.</p>

<p><strong>Get it:</strong> <code>npm install pretty-error</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">PrettyError</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pretty-error&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">pe</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PrettyError</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">renderedError</span> <span class="o">=</span> <span class="nx">pe</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Some error message&#39;</span><span class="p">));</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">renderedError</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">doSomethingThatThrowsAnError</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">pe</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">error</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/pretty-error/pretty-error.gif" alt="pretty-error" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hiper]]></title>
    <link href="http://nmotw.in/hiper/"/>
    <updated>2018-07-28T15:08:33+05:30</updated>
    <id>http://nmotw.in/hiper</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/hiper">hiper</a></h1>

<blockquote><p>🚀 A statistical analysis tool for performance testing.</p></blockquote>

<p><code>hiper</code> is short for  <em>Hi</em> <em>per</em>formance, makes use of <code>puppeteer</code> and gives us the below performance metrics.</p>

<ul>
<li>DNS lookup time</li>
<li>TCP connect time</li>
<li>TTFB</li>
<li>Download time of the page</li>
<li>After DOM Ready download time</li>
<li>White screen time</li>
<li>DOM Ready time</li>
<li>Load time</li>
</ul>


<p><strong>Get it:</strong> <code>npm install hiper</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>hiper --help
</span><span class='line'>
</span><span class='line'>Usage: hiper <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>url<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>🚀 A statistical analysis tool <span class="k">for </span>performance testing
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>
</span><span class='line'>   -v, --version                output the version number
</span><span class='line'>   -n, --count &lt;n&gt;              specified loading <span class="nb">times</span> <span class="o">(</span>default: 20<span class="o">)</span>
</span><span class='line'>   -c, --config &lt;path&gt;          load the configuration file
</span><span class='line'>   -u, --useragent &lt;ua&gt;         to <span class="nb">set </span>the useragent
</span><span class='line'>   -H, --headless <span class="o">[</span>b<span class="o">]</span>           whether to use headless mode <span class="o">(</span>default: <span class="nb">true</span><span class="o">)</span>
</span><span class='line'>   -e, --executablePath &lt;path&gt;  use the specified chrome browser
</span><span class='line'>   --no-cache                   disable cache <span class="o">(</span>default: <span class="nb">false</span><span class="o">)</span>
</span><span class='line'>   --no-javascript              disable javascript <span class="o">(</span>default: <span class="nb">false</span><span class="o">)</span>
</span><span class='line'>   --no-online                  disable network <span class="o">(</span>defalut: <span class="nb">false</span><span class="o">)</span>
</span><span class='line'>   -h, --help                   output usage information
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>hiper nmotw.in
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  _   _ _
</span><span class='line'> * * * <span class="o">(</span>_<span class="o">)</span>_ __   ___ _ __
</span><span class='line'> * |_* * * <span class="s1">&#39;_ \ / _ \ &#39;</span>__|
</span><span class='line'> *  _  * * |_<span class="o">)</span> *  __/ |
</span><span class='line'> |_* |_|_* .__/ <span class="se">\_</span>__|_|
</span><span class='line'>         |_|
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>🚀 It takes 1.669 s to load <span class="sb">`</span>https://nmotw.in<span class="sb">`</span> 20 <span class="nb">times</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">  </span>DNS lookup <span class="nb">time                 </span>1.00 ms
</span><span class='line'>  TCP connect <span class="nb">time                </span>126.00 ms
</span><span class='line'>  TTFB                            551.00 ms
</span><span class='line'>  Download <span class="nb">time </span>of the page       7.00 ms
</span><span class='line'>  After DOM Ready download <span class="nb">time   </span>558.00 ms
</span><span class='line'>  White screen <span class="nb">time               </span>699.00 ms
</span><span class='line'>  DOM Ready <span class="nb">time                  </span>936.00 ms
</span><span class='line'>  Load <span class="nb">time                       </span>1.26 s
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/hiper/hiper.gif" alt="hiper" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[time-stamp]]></title>
    <link href="http://nmotw.in/time-stamp/"/>
    <updated>2018-07-22T13:12:10+05:30</updated>
    <id>http://nmotw.in/time-stamp</id>
    <content type="html"><![CDATA[<h1><a href="">time-stamp</a></h1>

<blockquote><p>Get a formatted timestamp.</p></blockquote>

<p>How many times have you created time stamp in your code base?</p>

<p><code>time-stamp</code> makes it easy to create them, this module revovles around the R.E -> <code>/(?=(YYYY|YY|MM|DD|HH|mm|ss|ms))\1([:\/]*)/;</code></p>

<p><strong>Supported formats:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YYYY: full year (ex: 2018)
</span><span class='line'>MM: month (ex: 04)
</span><span class='line'>DD: day (ex: 01)
</span><span class='line'>HH: hours (ex: 12)
</span><span class='line'>mm: minutes (ex: 59)
</span><span class='line'>ss: seconds (ex: 09)
</span><span class='line'>ms: milliseconds (ex: 532)</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">timeStamp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;time-stamp&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">();</span>
</span><span class='line'><span class="c1">//=&gt; 2018-07-23</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYYMMDD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 20180723</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYYMMDD:ss&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 20180723:10</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYY/MM/DD:mm:ss&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 2018/07/23:30:10</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYY:MM:DD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 2018:07:23</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;[YYYY:MM:DD]&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; [2018:07:23]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYY/MM/DD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 2018/07/23</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYY:MM&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 2018:07</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;YYYY&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 2018</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;MM&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 07</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;DD&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 23</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;HH&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 21</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;mm&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 30</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;ss&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 10</span>
</span><span class='line'>
</span><span class='line'><span class="nx">timestamp</span><span class="p">(</span><span class="s1">&#39;ms&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//=&gt; 365</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/time-stamp/time-stamp.gif" alt="time-stamp" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proxymise]]></title>
    <link href="http://nmotw.in/proxymise/"/>
    <updated>2018-07-15T15:52:27+05:30</updated>
    <id>http://nmotw.in/proxymise</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/proxymise">proxymise</a></h1>

<blockquote><p>Chainable Promise Proxy.</p></blockquote>

<p><code>proxymise</code> makes cheeky use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a> API and provides a high dose of syntax sugar in chaining promises.</p>

<p><strong>Get it:</strong> <code>npm install proxymise</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const proxymise = require('proxymise');</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Instead of thens
</span><span class='line'>foo.then(value =&gt; value.bar())
</span><span class='line'>  .then(value =&gt; value.baz())
</span><span class='line'>  .then(value =&gt; value.qux)
</span><span class='line'>  .then(value =&gt; console.log(value));</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Instead of awaits
</span><span class='line'>const value1 = await foo;
</span><span class='line'>const value2 = await value1.bar();
</span><span class='line'>const value3 = await value2.baz();
</span><span class='line'>const value4 = await value3.qux;
</span><span class='line'>console.log(value4);</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Use proxymise
</span><span class='line'>const value = await proxymise(foo).bar().baz().qux;
</span><span class='line'>console.log(value);</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/proxymise/proxymise.gif" alt="proxymise" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[auto-parse]]></title>
    <link href="http://nmotw.in/auto-parse/"/>
    <updated>2018-07-07T21:59:37+05:30</updated>
    <id>http://nmotw.in/auto-parse</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/auto-parse">auto-parse</a></h1>

<blockquote><p>auto-parse any value you happen to send in.</p></blockquote>

<p><code>auto-parse</code> any value you happen to send in like: <code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Array</code>, <code>Object</code>, <code>Function</code>, <code>undefined</code> and <code>null</code> and it shall get parsed to the appropriate value.</p>

<p><strong>GET IT:</strong> <code>npm install auto-parse</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">autoParse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;auto-parse&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">autoParse</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;TrUe&#39;</span><span class="p">,</span> <span class="s1">&#39; undefined &#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39; null &#39;</span><span class="p">,</span> <span class="s1">&#39;[]&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">age</span> <span class="o">:</span> <span class="s2">&quot;50&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">[1, true, undefined, null, [], {age: 50} ]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Set Type</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Boolean&#39;</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="kc">true</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;Number&#39;</span><span class="p">)</span>  <span class="o">=&gt;</span>   <span class="mi">0</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">Boolean</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="kc">true</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Number</span><span class="p">)</span>  <span class="o">=&gt;</span>   <span class="mi">0</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">1234</span><span class="p">,</span> <span class="nb">String</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="s1">&#39;1234&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// dates</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="s1">&#39;1989-11-30&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="nx">Thu</span> <span class="nx">Nov</span> <span class="mi">30</span> <span class="mi">1989</span> <span class="mi">18</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0600</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="s1">&#39;1989-11-30&#39;</span><span class="p">,</span> <span class="nb">Date</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="nx">Thu</span> <span class="nx">Nov</span> <span class="mi">30</span> <span class="mi">1989</span> <span class="mi">18</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0600</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Passing Functions to type</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Color</span> <span class="p">(</span><span class="nx">inputColor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">inputColor</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="s1">&#39;#AAA&#39;</span><span class="p">,</span> <span class="nx">Color</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="p">{</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#AAA&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/auto-parse/auto-parse.gif" alt="auto-parse" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error-stack-parser]]></title>
    <link href="http://nmotw.in/error-stack-parser/"/>
    <updated>2018-07-01T20:42:55+05:30</updated>
    <id>http://nmotw.in/error-stack-parser</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/error-stack-parser">error-stack-parser</a></h1>

<blockquote><p>Simple, cross-browser Error parser.</p></blockquote>

<p><code>error-stack-parser</code> library parses and extracts function names, URLs, line numbers, and column numbers from the given Error's stack as an Array of StackFrames.</p>

<p><strong>Get it:</strong> <code>npm install error-stack-parser</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">ErrorStackParser</span> <span class="o">=</span> <span class="nx">rquire</span><span class="p">(</span><span class="err">&quot;</span><span class="nx">error</span><span class="o">-</span><span class="nx">stack</span><span class="o">-</span><span class="nx">parser</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ErrorStackParser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;BOOM&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">=&gt; [</span>
</span><span class='line'><span class="cm">        StackFrame({functionName: &#39;foo&#39;, args: [], fileName: &#39;path/to/file.js&#39;, lineNumber: 35, columnNumber: 79, isNative: false, isEval: false}),</span>
</span><span class='line'><span class="cm">        StackFrame({functionName: &#39;Bar&#39;, fileName: &#39;https://cdn.somewherefast.com/utils.min.js&#39;, lineNumber: 1, columnNumber: 832, isNative: false, isEval: false, isConstructor: true}),</span>
</span><span class='line'><span class="cm">        StackFrame(... and so on ...)</span>
</span><span class='line'><span class="cm">   ]</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">ErrorStackParer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">[ &#39;parse&#39;,</span>
</span><span class='line'><span class="cm">  &#39;extractLocation&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseV8OrIE&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseFFOrSafari&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera9&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera10&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera11&#39; ]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/error-stack-parser/error-stack-parser.gif" alt="error-stack-parser" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ent]]></title>
    <link href="http://nmotw.in/ent/"/>
    <updated>2018-06-24T10:11:29+05:30</updated>
    <id>http://nmotw.in/ent</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ent">ent</a></h1>

<blockquote><p>Encode and decode HTML entities.</p></blockquote>

<p><code>ent</code> helps in encoding and ecoding HTML entities.</p>

<p><strong>Get it:</strong> <code>npm install ent</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">ent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ent</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="s1">&#39;&lt;span&gt;©moo&lt;/span&gt;&#39;</span><span class="p">))</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ent</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="s1">&#39;&amp;pi; &amp;amp; &amp;rho;&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="err">#</span><span class="mi">60</span><span class="p">;</span><span class="nx">span</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">62</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">169</span><span class="p">;</span><span class="nx">moo</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">60</span><span class="p">;</span><span class="err">/span&amp;#62;</span>
</span><span class='line'><span class="err">π</span> <span class="o">&amp;</span> <span class="err">ρ</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">ent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">encode</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent/encode&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ^ Escape unsafe characters in str with html entities.</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">decode</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent/decode&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ^ Convert html entities in str back to raw text.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ent/ent.gif" alt="ent" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[media-typer]]></title>
    <link href="http://nmotw.in/media-typer/"/>
    <updated>2018-06-15T16:35:15+05:30</updated>
    <id>http://nmotw.in/media-typer</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/media-typer">media-typer</a></h1>

<blockquote><p>RFC 6838 media type parser.</p></blockquote>

<p><code>media-typer</code> helps in parsing and formatting media type.</p>

<p><strong>Get it:</strong> <code>npm install media-typer</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">typer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;media-typer&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">typer</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;image/svg+xml; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{ type: &#39;image&#39;,</span>
</span><span class='line'><span class="cm">  subtype: &#39;svg&#39;,</span>
</span><span class='line'><span class="cm">  suffix: &#39;xml&#39;,</span>
</span><span class='line'><span class="cm">  parameters: { charset: &#39;utf-8&#39; } </span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">typer</span><span class="p">.</span><span class="nx">format</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;image&#39;</span><span class="p">,</span> <span class="nx">subtype</span><span class="o">:</span> <span class="s1">&#39;svg&#39;</span><span class="p">,</span> <span class="nx">suffix</span><span class="o">:</span> <span class="s1">&#39;xml&#39;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ &#39;image/svg+xml&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">typer</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* ^ Parse the `content-type` header from the given req.</span>
</span><span class='line'><span class="cm"> Short-cut for typer.parse(req.headers[&#39;content-type&#39;])*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/media-typer/media-typer.gif" alt="media-typer" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qw]]></title>
    <link href="http://nmotw.in/qw/"/>
    <updated>2018-06-10T16:10:46+05:30</updated>
    <id>http://nmotw.in/qw</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/qw">qw</a></p>

<blockquote><p>Quoted word literals!</p></blockquote>

<p>qw use template strings to bring over this little common convenience from Perl-land.</p>

<p><strong>Get it:</strong> <code>npm install qw</code></p>

<p><strong>_Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">qw</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;qw&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qw</span> <span class="err">`</span>
</span><span class='line'><span class="k">this</span>
</span><span class='line'><span class="nx">shall</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="nx">into</span>
</span><span class='line'><span class="nx">an</span> <span class="nx">array</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ [&quot;this&quot;, &quot;shall&quot;, &quot;break&quot;, &quot;into&quot;, &quot;an&quot;, &quot;array&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qw</span> <span class="err">`</span><span class="nx">also</span> <span class="nx">xpression</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="mi">40</span><span class="o">+</span><span class="mi">2</span><span class="p">}</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ [&quot;also&quot;, &quot;expression:&quot;, 42]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/qw/qw.gif" alt="qw.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[franc]]></title>
    <link href="http://nmotw.in/franc/"/>
    <updated>2018-05-31T15:52:58+05:30</updated>
    <id>http://nmotw.in/franc</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/franc">franc</a></h1>

<blockquote><p>Detect the language of text.</p></blockquote>

<p><code>franc</code> is a natural language detection lib that supports <code>188</code> languages (1M or more speakers).</p>

<p><strong>Get it:</strong> <code>npm install franc</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">franc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;franc&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">franc</span><span class="p">(</span><span class="s2">&quot;ಮಾನವ ಕುಟುಂಬದ ಸಮಸ್ತ ಸದಸ್ಯರ ಸಹಜ ಗೌರವವನ್ನೂ ಸಮಾನವೂ ಅನನ್ಯಹಾರ್ಯವೂ ಆದ ಹಕ್ಕುಗಳನ್ನು ಅಂಗೀಕರಿಸುವುದು ಪ್ರಪಂಚದಲ್ಲಿ&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ would return &quot;kan&quot; indicating that it&#39;s Kannada</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/franc/franc.gif" alt="franc.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what-dog]]></title>
    <link href="http://nmotw.in/what-dog/"/>
    <updated>2018-05-25T16:13:51+05:30</updated>
    <id>http://nmotw.in/what-dog</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/what-dog">what-dog</a></h1>

<blockquote><p>What 🐶 is this?</p></blockquote>

<p>Get the breed of a dog from an image using Microsoft's what-dog.</p>

<p><img src="what-dog.demo.png" alt="" /></p>

<p><strong>Get it:</strong> <code>npm install --save what-dog</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">whatDog</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;what-dog&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">((</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">await</span> <span class="nx">whatDog</span><span class="p">(</span><span class="s1">&#39;http://imgur.com/B7a15F5.jpg&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">})());</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  &quot;isDog&quot;: true,</span>
</span><span class='line'><span class="cm">  &quot;breed&quot;: &quot;Norfolk Terrier&quot;,</span>
</span><span class='line'><span class="cm">  &quot;about&quot;: &quot;Spirited, small but sturdy, feisty yet sweet personality&quot;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/what-dog/what-dog.gif" alt="what-dog.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[signal-exit]]></title>
    <link href="http://nmotw.in/signal-exit/"/>
    <updated>2018-05-20T20:33:02+05:30</updated>
    <id>http://nmotw.in/signal-exit</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/signal-exit">signal-exit</a></h1>

<blockquote><p>Fire an event no matter how a process exits.</p></blockquote>

<p><code>signal-exit</code> fires an event no matter how a process exits:</p>

<ul>
<li>reaching the end of execution.</li>
<li>explicitly having <code>process.exit(code)</code> called.</li>
<li>having <code>process.kill(pid, sig)</code> called.</li>
<li>receiving a fatal signal from outside the process</li>
</ul>


<p><strong>Get it:</strong> <code>npm install signal-exit</code></p>

<p><strong>Sample code:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">onExit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;signal-exit&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">onExit</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;process exited!&#39;</span><span class="p">,</span> <span class="nx">code</span><span class="p">,</span> <span class="nx">signal</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/signal-exit/signal-exit.gif" alt="signal-exit" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scrape-it]]></title>
    <link href="http://nmotw.in/scrape-it/"/>
    <updated>2018-05-12T11:34:02+05:30</updated>
    <id>http://nmotw.in/scrape-it</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/scrape-it">scrape-it</a></h1>

<blockquote><p>scraper for humans.</p></blockquote>

<p><code>scrape-it</code> uses <a href="https://www.npmjs.com/package/cheerio">cheerio</a> under the hood and makes it easier to scrape websites.</p>

<p><strong>Get it:</strong> <code>npm install [-g] scrape-it</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">scrapeIt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;scrape-it&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrapeIt</span><span class="p">(</span><span class="s2">&quot;https://nmotw.in&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">tagLine</span><span class="o">:</span> <span class="s2">&quot;.tagline&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">scraped</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scraped</span><span class="p">.</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ {tagLine: &quot;Node Mode Of The Week&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/scrape-it/scrape-it.gif" alt="scrape-it.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[global-cache]]></title>
    <link href="http://nmotw.in/global-cache/"/>
    <updated>2018-05-05T11:45:30+05:30</updated>
    <id>http://nmotw.in/global-cache</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/global-cache">global-cache</a></h1>

<blockquote><p>Use global object as a share singleton.</p></blockquote>

<p>From the 🐴's mouth -> Sometimes you have to do horrible things, like use the global object to share a singleton. Abstract that away, with this!</p>

<p><code>global-cache</code> attaches a cache to the global object. It attempts to make it as undiscoverable as possible:</p>

<ul>
<li><p>uses Symbols if available</p></li>
<li><p>if not, uses a string key that is not a valid identifier, so as not to show up in dot-notation browser autocomplete</p></li>
<li><p>makes it non-enumerable if property descriptors are supported</p></li>
<li><p>keys are required to be strings or symbols.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install global-cache</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">key</span><span class="o">=</span><span class="s1">&#39;key&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">cache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;global-cache&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">//[ undefined, false ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span><span class="nx">value</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">//[ {}, true ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">// [ undefined, false ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{ clear: [Function: clear],</span>
</span><span class='line'><span class="cm">  delete: [Function: deleteKey],</span>
</span><span class='line'><span class="cm">  get: [Function: get],</span>
</span><span class='line'><span class="cm">  has: [Function: has],</span>
</span><span class='line'><span class="cm">  set: [Function: set],</span>
</span><span class='line'><span class="cm">  setIfMissingThenGet: [Function: setIfMissingThenGet] }</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/global-cache/global-cache.gif" alt="global-cache.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dayjs]]></title>
    <link href="http://nmotw.in/dayjs/"/>
    <updated>2018-04-26T14:32:27+05:30</updated>
    <id>http://nmotw.in/dayjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dayjs">dayjs</a></h1>

<blockquote><p>⏰ Fast 2KB immutable date library.</p></blockquote>

<p><code>dayjs</code> is a minimalist JavaScript library for modern browsers with a largely Moment.js-compatible API, with:</p>

<p>🕒 Familiar Moment.js API &amp; patterns
💪 Immutable
🔥 Chainable
📦 2kb mini library
👫 All browsers support</p>

<p><strong>Get it:</strong> <code>npm install dayjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">dayjs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dayjs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dayjs</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;month&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;day&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="mi">2018</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dayjs/dayjs.gif" alt="dayjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tiny-glob]]></title>
    <link href="http://nmotw.in/tiny-glob/"/>
    <updated>2018-04-21T11:56:24+05:30</updated>
    <id>http://nmotw.in/tiny-glob</id>
    <content type="html"><![CDATA[<h1><a href="">tiny-glob</a></h1>

<blockquote><p>Match files and dirs using glob patterns.</p></blockquote>

<p><code>tiny-glob</code> is 🔥 extremely fast, 💪 powerful, 📦 tiny util to match files and folders using glob patterns.</p>

<p><strong>Get it:</strong> <code>npm install tiny-glob</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">glob</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;tiny-glob&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">glob</span><span class="p">(</span><span class="s1">&#39;src/*/*.{js,md}&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// =&gt; [ ... ] array of matching files</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Benchmark results:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">13</span><span class="p">,</span><span class="mi">405</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">±</span><span class="mf">1.80</span><span class="o">%</span> <span class="p">(</span><span class="mi">85</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">fast</span><span class="o">-</span><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">25</span><span class="p">,</span><span class="mi">745</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">±</span><span class="mf">2.76</span><span class="o">%</span> <span class="p">(</span><span class="mi">59</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">102</span><span class="p">,</span><span class="mi">658</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">±</span><span class="mf">0.79</span><span class="o">%</span> <span class="p">(</span><span class="mi">91</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">Fastest</span> <span class="nx">is</span> <span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span>
</span><span class='line'><span class="err">┌───────────┬─────────────────────────┬─────────────┬────────────────┐</span>
</span><span class='line'><span class="err">│</span> <span class="nx">Name</span>      <span class="err">│</span> <span class="nx">Mean</span> <span class="nx">time</span>               <span class="err">│</span> <span class="nx">Ops</span><span class="o">/</span><span class="nx">sec</span>     <span class="err">│</span> <span class="nx">Diff</span>           <span class="err">│</span>
</span><span class='line'><span class="err">├───────────┼─────────────────────────┼─────────────┼────────────────┤</span>
</span><span class='line'><span class="err">│</span> <span class="nx">glob</span>      <span class="err">│</span> <span class="mf">0.00007459990597268128</span>  <span class="err">│</span> <span class="mi">13</span><span class="p">,</span><span class="mf">404.843</span>  <span class="err">│</span> <span class="nx">N</span><span class="o">/</span><span class="nx">A</span>            <span class="err">│</span>
</span><span class='line'><span class="err">├───────────┼─────────────────────────┼─────────────┼────────────────┤</span>
</span><span class='line'><span class="err">│</span> <span class="nx">fast</span><span class="o">-</span><span class="nx">glob</span> <span class="err">│</span> <span class="mf">0.000038842529587611705</span> <span class="err">│</span> <span class="mi">25</span><span class="p">,</span><span class="mf">744.976</span>  <span class="err">│</span> <span class="mf">92.06</span><span class="o">%</span> <span class="nx">faster</span>  <span class="err">│</span>
</span><span class='line'><span class="err">├───────────┼─────────────────────────┼─────────────┼────────────────┤</span>
</span><span class='line'><span class="err">│</span> <span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span> <span class="err">│</span> <span class="mf">0.00000974110141018254</span>  <span class="err">│</span> <span class="mi">102</span><span class="p">,</span><span class="mf">657.796</span> <span class="err">│</span> <span class="mf">298.75</span><span class="o">%</span> <span class="nx">faster</span> <span class="err">│</span>
</span><span class='line'><span class="err">└───────────┴─────────────────────────┴─────────────┴────────────────┘</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/tiny-glob/tiny-glob.gif" alt="tiny-glob" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a11y]]></title>
    <link href="http://nmotw.in/a11y/"/>
    <updated>2018-04-15T07:01:25+05:30</updated>
    <id>http://nmotw.in/a11y</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/a11y">a11y</a></h1>

<blockquote><p>Easy accessibility audits powered by the Chrome Accessibility Tools</p></blockquote>

<p><code>a11y</code> conducts audits using the Chrome Accessibility Tools and PhantomJS and lists out the issues for a given URL.</p>

<p><strong>Get it:</strong> <code>npm install [-g] a11y</code></p>

<p><strong>Sample CLI usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  Runs an accessibility audit against a URL
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>a11y &lt;url&gt;
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    --viewport-size<span class="o">=</span>&lt;size&gt;  Set the viewport size
</span><span class='line'>    --delay                 Set the delay capturing the page
</span><span class='line'>    --verbose               Display more information
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>a11y todomvc.com
</span><span class='line'>    <span class="nv">$ </span>a11y http://todomvc.com https://google.com
</span><span class='line'>    <span class="nv">$ </span>a11y index.html -<span class="o">=</span>viewport-size<span class="o">=</span>1024x768
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample API usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>const <span class="nv">a11y</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;a11y&#39;</span><span class="o">)</span>;
</span><span class='line'>
</span><span class='line'>a11y<span class="o">(</span><span class="s1">&#39;nmotw.in&#39;</span>, <span class="o">(</span>err, reports<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    const <span class="nv">audit</span> <span class="o">=</span> reports.audit; // <span class="sb">`</span>a11y<span class="sb">`</span> Formatted report
</span><span class='line'>    const <span class="nv">report</span> <span class="o">=</span> reports.report; // DevTools Accessibility Audit formatted report
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/a11y/a11y.gif" alt="a11y.gif" /></p>
]]></content>
  </entry>
  
</feed>
