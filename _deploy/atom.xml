<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2018-05-12T11:59:03+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[scrape-it]]></title>
    <link href="http://nmotw.in/scrape-it/"/>
    <updated>2018-05-12T11:34:02+05:30</updated>
    <id>http://nmotw.in/scrape-it</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/scrape-it">scrape-it</a></h1>

<blockquote><p>scraper for humans.</p></blockquote>

<p><code>scrape-it</code> uses <a href="https://www.npmjs.com/package/cheerio">cheerio</a> under the hood and makes it easier to scrape websites.</p>

<p><strong>Get it:</strong> <code>npm install [-g] scrape-it</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">scrapeIt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;scrape-it&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrapeIt</span><span class="p">(</span><span class="s2">&quot;https://nmotw.in&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">tagLine</span><span class="o">:</span> <span class="s2">&quot;.tagline&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">scraped</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scraped</span><span class="p">.</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ {tagLine: &quot;Node Mode Of The Week&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/scrape-it/scrape-it.gif" alt="scrape-it.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[global-cache]]></title>
    <link href="http://nmotw.in/global-cache/"/>
    <updated>2018-05-05T11:45:30+05:30</updated>
    <id>http://nmotw.in/global-cache</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/global-cache">global-cache</a></h1>

<blockquote><p>Use global object as a share singleton.</p></blockquote>

<p>From the üê¥'s mouth -> Sometimes you have to do horrible things, like use the global object to share a singleton. Abstract that away, with this!</p>

<p><code>global-cache</code> attaches a cache to the global object. It attempts to make it as undiscoverable as possible:</p>

<ul>
<li><p>uses Symbols if available</p></li>
<li><p>if not, uses a string key that is not a valid identifier, so as not to show up in dot-notation browser autocomplete</p></li>
<li><p>makes it non-enumerable if property descriptors are supported</p></li>
<li><p>keys are required to be strings or symbols.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install global-cache</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">key</span><span class="o">=</span><span class="s1">&#39;key&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">cache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;global-cache&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">//[ undefined, false ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span><span class="nx">value</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">//[ {}, true ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">// [ undefined, false ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{ clear: [Function: clear],</span>
</span><span class='line'><span class="cm">  delete: [Function: deleteKey],</span>
</span><span class='line'><span class="cm">  get: [Function: get],</span>
</span><span class='line'><span class="cm">  has: [Function: has],</span>
</span><span class='line'><span class="cm">  set: [Function: set],</span>
</span><span class='line'><span class="cm">  setIfMissingThenGet: [Function: setIfMissingThenGet] }</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/global-cache/global-cache.gif" alt="global-cache.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dayjs]]></title>
    <link href="http://nmotw.in/dayjs/"/>
    <updated>2018-04-26T14:32:27+05:30</updated>
    <id>http://nmotw.in/dayjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dayjs">dayjs</a></h1>

<blockquote><p>‚è∞ Fast 2KB immutable date library.</p></blockquote>

<p><code>dayjs</code> is a minimalist JavaScript library for modern browsers with a largely Moment.js-compatible API, with:</p>

<p>üïí Familiar Moment.js API &amp; patterns
üí™ Immutable
üî• Chainable
üì¶ 2kb mini library
üë´ All browsers support</p>

<p><strong>Get it:</strong> <code>npm install dayjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">dayjs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dayjs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dayjs</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;month&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;day&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="mi">2018</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dayjs/dayjs.gif" alt="dayjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tiny-glob]]></title>
    <link href="http://nmotw.in/tiny-glob/"/>
    <updated>2018-04-21T11:56:24+05:30</updated>
    <id>http://nmotw.in/tiny-glob</id>
    <content type="html"><![CDATA[<h1><a href="">tiny-glob</a></h1>

<blockquote><p>Match files and dirs using glob patterns.</p></blockquote>

<p><code>tiny-glob</code> is üî• extremely fast, üí™ powerful, üì¶ tiny util to match files and folders using glob patterns.</p>

<p><strong>Get it:</strong> <code>npm install tiny-glob</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">glob</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;tiny-glob&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">glob</span><span class="p">(</span><span class="s1">&#39;src/*/*.{js,md}&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// =&gt; [ ... ] array of matching files</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Benchmark results:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">13</span><span class="p">,</span><span class="mi">405</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">¬±</span><span class="mf">1.80</span><span class="o">%</span> <span class="p">(</span><span class="mi">85</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">fast</span><span class="o">-</span><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">25</span><span class="p">,</span><span class="mi">745</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">¬±</span><span class="mf">2.76</span><span class="o">%</span> <span class="p">(</span><span class="mi">59</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">102</span><span class="p">,</span><span class="mi">658</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">¬±</span><span class="mf">0.79</span><span class="o">%</span> <span class="p">(</span><span class="mi">91</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">Fastest</span> <span class="nx">is</span> <span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span>
</span><span class='line'><span class="err">‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê</span>
</span><span class='line'><span class="err">‚îÇ</span> <span class="nx">Name</span>      <span class="err">‚îÇ</span> <span class="nx">Mean</span> <span class="nx">time</span>               <span class="err">‚îÇ</span> <span class="nx">Ops</span><span class="o">/</span><span class="nx">sec</span>     <span class="err">‚îÇ</span> <span class="nx">Diff</span>           <span class="err">‚îÇ</span>
</span><span class='line'><span class="err">‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</span>
</span><span class='line'><span class="err">‚îÇ</span> <span class="nx">glob</span>      <span class="err">‚îÇ</span> <span class="mf">0.00007459990597268128</span>  <span class="err">‚îÇ</span> <span class="mi">13</span><span class="p">,</span><span class="mf">404.843</span>  <span class="err">‚îÇ</span> <span class="nx">N</span><span class="o">/</span><span class="nx">A</span>            <span class="err">‚îÇ</span>
</span><span class='line'><span class="err">‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</span>
</span><span class='line'><span class="err">‚îÇ</span> <span class="nx">fast</span><span class="o">-</span><span class="nx">glob</span> <span class="err">‚îÇ</span> <span class="mf">0.000038842529587611705</span> <span class="err">‚îÇ</span> <span class="mi">25</span><span class="p">,</span><span class="mf">744.976</span>  <span class="err">‚îÇ</span> <span class="mf">92.06</span><span class="o">%</span> <span class="nx">faster</span>  <span class="err">‚îÇ</span>
</span><span class='line'><span class="err">‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§</span>
</span><span class='line'><span class="err">‚îÇ</span> <span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span> <span class="err">‚îÇ</span> <span class="mf">0.00000974110141018254</span>  <span class="err">‚îÇ</span> <span class="mi">102</span><span class="p">,</span><span class="mf">657.796</span> <span class="err">‚îÇ</span> <span class="mf">298.75</span><span class="o">%</span> <span class="nx">faster</span> <span class="err">‚îÇ</span>
</span><span class='line'><span class="err">‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/tiny-glob/tiny-glob.gif" alt="tiny-glob" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a11y]]></title>
    <link href="http://nmotw.in/a11y/"/>
    <updated>2018-04-15T07:01:25+05:30</updated>
    <id>http://nmotw.in/a11y</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/a11y">a11y</a></h1>

<blockquote><p>Easy accessibility audits powered by the Chrome Accessibility Tools</p></blockquote>

<p><code>a11y</code> conducts audits using the Chrome Accessibility Tools and PhantomJS and lists out the issues for a given URL.</p>

<p><strong>Get it:</strong> <code>npm install [-g] a11y</code></p>

<p><strong>Sample CLI usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  Runs an accessibility audit against a URL
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>a11y &lt;url&gt;
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    --viewport-size<span class="o">=</span>&lt;size&gt;  Set the viewport size
</span><span class='line'>    --delay                 Set the delay capturing the page
</span><span class='line'>    --verbose               Display more information
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>a11y todomvc.com
</span><span class='line'>    <span class="nv">$ </span>a11y http://todomvc.com https://google.com
</span><span class='line'>    <span class="nv">$ </span>a11y index.html -<span class="o">=</span>viewport-size<span class="o">=</span>1024x768
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample API usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>const <span class="nv">a11y</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;a11y&#39;</span><span class="o">)</span>;
</span><span class='line'>
</span><span class='line'>a11y<span class="o">(</span><span class="s1">&#39;nmotw.in&#39;</span>, <span class="o">(</span>err, reports<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    const <span class="nv">audit</span> <span class="o">=</span> reports.audit; // <span class="sb">`</span>a11y<span class="sb">`</span> Formatted report
</span><span class='line'>    const <span class="nv">report</span> <span class="o">=</span> reports.report; // DevTools Accessibility Audit formatted report
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/a11y/a11y.gif" alt="a11y.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cryptiles]]></title>
    <link href="http://nmotw.in/cryptiles/"/>
    <updated>2018-04-07T16:56:08+05:30</updated>
    <id>http://nmotw.in/cryptiles</id>
    <content type="html"><![CDATA[<h1><a href="https://npmjs.com/package/cryptiles">cryptiles</a></h1>

<blockquote><p>General purpose crypto utilities.</p></blockquote>

<p><code>cryptiles</code> provides util methods for creating cryptographically strong pseudo-random data with the below methods:</p>

<ul>
<li>fixedTimeComparison</li>
<li>randomBits</li>
<li>randomDigits</li>
<li>randomString</li>
</ul>


<p><strong>Get it:</strong> <code>npm install cryptiles</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">cryptiles</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;cryptiles&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">fixedTimeComparison</span><span class="p">(</span><span class="s1">&#39;abcd&#39;</span><span class="p">,</span><span class="s1">&#39;abcd&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">randomBits</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">randomDigits</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">randomString</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* ^</span>
</span><span class='line'><span class="cm">[</span>
</span><span class='line'><span class="cm">  true,</span>
</span><span class='line'><span class="cm">  Uint8Array &lt;66&gt;,</span>
</span><span class='line'><span class="cm">  &quot;42115&quot;,</span>
</span><span class='line'><span class="cm">  &quot;jsmx9&quot;</span>
</span><span class='line'><span class="cm">]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/cryptiles/cryptiles.gif" alt="cryptiles" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[april-fools]]></title>
    <link href="http://nmotw.in/april-fools/"/>
    <updated>2018-04-01T05:37:51+05:30</updated>
    <id>http://nmotw.in/april-fools</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/april-fools">april-fools</a></p>

<blockquote><p>Randomly fool with an <code>Error</code> on April 1st.</p></blockquote>

<p>‚ö†Ô∏è This is a foolproof way to lose friends and alienate people. Will likely get you fired!</p>

<p>Few lines of code to have fun on April fools day:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const date = new Date()
</span><span class='line'>
</span><span class='line'>if (date.getMonth() === 3 && date.getDate() === 1 && Math.floor(Math.random() * 6) + 1 === 1) {
</span><span class='line'>  const message = require('sentencer').make("Unexpected  with  ")
</span><span class='line'>
</span><span class='line'>  throw new Error(message)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Related module -> <a href="http://nmotw.in/sentencer/">sentencer</a>.</p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;april-fools&#39;</span><span class="p">);</span> <span class="c1">// That&#39;s it! And it would randomly throw an error like below.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Unexpected</span> <span class="nx">lunch</span> <span class="kd">with</span> <span class="nx">a</span> <span class="nx">brindle</span> <span class="nx">ravioli</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="err">/private/tmp/node_modules/april-fools/index.js:8:9)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">652</span><span class="o">:</span><span class="mi">30</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_extensions</span><span class="p">..</span><span class="nx">js</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">663</span><span class="o">:</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">load</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">565</span><span class="o">:</span><span class="mi">32</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">tryModuleLoad</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">505</span><span class="o">:</span><span class="mi">12</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_load</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">497</span><span class="o">:</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">require</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">596</span><span class="o">:</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">require</span> <span class="p">(</span><span class="nx">internal</span><span class="o">/</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">11</span><span class="o">:</span><span class="mi">18</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/april-fools/april-fools.gif" alt="april-fools" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[prompts]]></title>
    <link href="http://nmotw.in/prompts/"/>
    <updated>2018-03-22T23:39:35+05:30</updated>
    <id>http://nmotw.in/prompts</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/prompts">prompts</a></h1>

<blockquote><p>Lightweight, beautiful and user-friendly interactive CLI prompts</p></blockquote>

<p><code>prompts</code> Zero dep, promise based, unifined CLI prompt.</p>

<p><strong>Get it:</strong> <code>npm install prompts</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">prompts</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;prompts&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">questions</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;dish&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Do you like pizza?&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="nx">prev</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">==</span> <span class="s1">&#39;pizza&#39;</span> <span class="o">?</span> <span class="s1">&#39;text&#39;</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;topping&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Name a topping&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">prompts</span><span class="p">(</span><span class="nx">questions</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>API:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">prompts</span><span class="p">(</span><span class="nx">prompts</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">prompts:</span>
</span><span class='line'><span class="cm">Type: Array|Object</span>
</span><span class='line'>
</span><span class='line'><span class="cm">options: onSubmit or onCancel functions.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">prompt object properties:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  type: String || Function,</span>
</span><span class='line'><span class="cm">  name: String || Function,</span>
</span><span class='line'><span class="cm">  message: String || Function,</span>
</span><span class='line'><span class="cm">  initial: String || Function || Async Function</span>
</span><span class='line'><span class="cm">  format: Function || Async Function,</span>
</span><span class='line'><span class="cm">  onState: Function</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/prompts/prompts.gif" alt="prompts.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fkill]]></title>
    <link href="http://nmotw.in/fkill/"/>
    <updated>2018-03-18T09:01:19+05:30</updated>
    <id>http://nmotw.in/fkill</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fkill">fkill</a></h1>

<blockquote><p>Fabulously kill processes. Cross-platform.</p></blockquote>

<p>You you have mostly used something like: <code>pgrep &lt;progress&gt;</code> <code>kill -9 &lt;pid&gt;</code> <code>pkill &lt;procees&gt;</code>, but <code>fkill</code> makes it fabulosusly easy to kill!</p>

<p><strong>Get it:</strong> <code>npm install [-g] fkill[-cli]</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// API</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fkill</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fkill&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fkill</span><span class="p">(</span><span class="mi">8080</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Killed process&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fkill</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fkill</span><span class="p">(</span><span class="s1">&#39;:8080&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fkill</span><span class="p">([</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;Chrome&#39;</span><span class="p">,</span> <span class="s1">&#39;:8080&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>```</p>

<h1>cli</h1>

<p>‚ûú  ~ fkill --help</p>

<p>  Fabulously kill processes. Cross-platform.</p>

<p>  Usage</p>

<pre><code>$ fkill [&lt;pid|name|:port&gt; ‚Ä¶]
</code></pre>

<p>  Options</p>

<pre><code>--force -f    Force kill
--verbose -v  Show process arguments
</code></pre>

<p>  Examples</p>

<pre><code>$ fkill 1337
$ fkill safari
$ fkill :8080
$ fkill 1337 safari :8080
$ fkill
</code></pre>

<p>  To kill a port, prefix it with a colon. For example: :8080.</p>

<p>  Run without arguments to use the interactive interface.
  The process name is case insensitive.
  ```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fkill/fkill.gif" alt="fkill.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lazy-cache]]></title>
    <link href="http://nmotw.in/lazy-cache/"/>
    <updated>2018-03-11T21:59:26+05:30</updated>
    <id>http://nmotw.in/lazy-cache</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/lazy-cache">lazy-cache</a></h1>

<blockquote><p>Cache requires to be lazy-loaded when needed.</p></blockquote>

<p><code>lazy-cache</code> uses native, plain-vanilla, tried and true javascript getters to call node's <code>require()</code> system for faster and safer code. (~1second to 50milliseconds)</p>

<p><strong>Get it:</strong> <code>npm install lazy-cache</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">lazyOS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lazy-cache&quot;</span><span class="p">)(</span><span class="nx">require</span><span class="p">)(</span><span class="s1">&#39;os&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">lazyOS</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lazyOS</span><span class="p">().</span><span class="nx">arch</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/lazy-cache/lazy-cache.gif" alt="lazy-cache.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[async-exit-hook]]></title>
    <link href="http://nmotw.in/async-exit-hook/"/>
    <updated>2018-03-04T11:56:54+05:30</updated>
    <id>http://nmotw.in/async-exit-hook</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/async-exit-hook">async-exit-hook</a></h1>

<blockquote><p>Run some code when the process exits.</p></blockquote>

<p><code>async-exit-hook</code> is a fork from <code>exit-hook</code> which can catch:</p>

<ul>
<li>process SIGINT, SIGTERM and SIGHUP, SIGBREAK signals</li>
<li>process beforeExit and exit events</li>
<li>PM2's exit.</li>
</ul>


<p>As <code>process.on('exit')</code> event doesn't catch all the ways a process can exit.</p>

<p><strong>Get it:</strong> <code>npm install async-exit-hook</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exitHook</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;exiting&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exitHook</span><span class="p">(</span><span class="nx">callback</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;exiting&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/async-exit-hook/async-exit-hook.gif" alt="async-exit-hook" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pressure]]></title>
    <link href="http://nmotw.in/pressure/"/>
    <updated>2018-02-25T09:29:07+05:30</updated>
    <id>http://nmotw.in/pressure</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/pressure">pressure</a></p>

<blockquote><p>Handle Force Touch, 3D Touch, and Pointer Pressure on the web.</p></blockquote>

<p>Devices implement force differently <code>pressure</code> is trying to solve it across all devices, with polyfill and multi touch support.</p>

<p><strong>Get it:</strong> <code>npm install pressure</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Pressure</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pressure&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Pressure</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;#element&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">start</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this is called on force start</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">end</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// this is called on force end</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">startDeepPress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this is called on &quot;force click&quot; / &quot;deep press&quot;, aka once the force is greater than 0.5</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">endDeepPress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// this is called when the &quot;force click&quot; / &quot;deep press&quot; end</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">change</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">force</span><span class="p">,</span> <span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this is called every time there is a change in pressure</span>
</span><span class='line'>    <span class="c1">// force will always be a value from 0 to 1 on mobile and desktop</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">unsupported</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// NOTE: this is only called if the polyfill option is disabled!</span>
</span><span class='line'>    <span class="c1">// this is called once there is a touch on the element and the device or browser does not support Force or 3D touch</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below are the supported devices:</p>

<ul>
<li>Microsoft Surface, Wacom Tablets (Device that supports pointer events)</li>
<li>iPhone 6s, iPhone 6s Plus, iPhone 7, iPhone 7 Plus</li>
<li>MacBook 2015 &amp; MacBook Pro 2015</li>
<li>Magic Trackpad 2</li>
<li>iPad Pro with Apple Pencil</li>
<li>Safari, Chrome, anything using WKWebView</li>
</ul>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/pressure/pressure.gif" alt="pressure" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[randexp]]></title>
    <link href="http://nmotw.in/randexp/"/>
    <updated>2018-02-17T21:00:15+05:30</updated>
    <id>http://nmotw.in/randexp</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/randexp">randexp</a></h1>

<blockquote><p>Generate a random string that matches a given RegExp.</p></blockquote>

<p>What better way to generate a random string than with a language you can use to express the string you want? -- üê¥</p>

<p><strong>Get it:</strong> <code>npm install randexp</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// sets and ranges and references</span>
</span><span class='line'><span class="k">new</span> <span class="nx">RandExp</span><span class="p">(</span><span class="sr">/&lt;([a-z]\w{0,20})&gt;foo&lt;\1&gt;/</span><span class="p">).</span><span class="nx">gen</span><span class="p">();</span>
</span><span class='line'><span class="c1">// =&gt; &lt;m5xhdg&gt;foo&lt;m5xhdg&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// wildcard</span>
</span><span class='line'><span class="k">new</span> <span class="nx">RandExp</span><span class="p">(</span><span class="sr">/random stuff: .+/</span><span class="p">).</span><span class="nx">gen</span><span class="p">();</span>
</span><span class='line'><span class="c1">// =&gt; random stuff: l3m;Hf9XYbI [YPaxV&gt;U*4-_F!WXQh9&gt;;rH3i l!8.zoh?[utt1OWFQrE ^~8zEQm]~tK</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ignore case</span>
</span><span class='line'><span class="k">new</span> <span class="nx">RandExp</span><span class="p">(</span><span class="sr">/xxx xtreme dragon warrior xxx/i</span><span class="p">).</span><span class="nx">gen</span><span class="p">();</span>
</span><span class='line'><span class="c1">// =&gt; xxx xtReME dRAGON warRiOR xXX</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/randexp/randexp.gif" alt="randexp.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[thanks]]></title>
    <link href="http://nmotw.in/thanks/"/>
    <updated>2018-02-09T17:04:21+05:30</updated>
    <id>http://nmotw.in/thanks</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/thanks">thanks</a></h1>

<blockquote><p>üôå Give thanks to the open source maintainers you depend on! ‚ú®</p></blockquote>

<p><code>thanks</code> picks up the "nearest" <code>package.json</code> / <code>node_modules</code> folder and fetch all the mainterners who are seeking donation and lists them all in a neat table with the donation URL.</p>

<p><strong>Get it:</strong> <code>npm install -g thanks</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>thanks --help
</span><span class='line'>
</span><span class='line'>thanks - üôå Give thanks to the open <span class="nb">source </span>maintainers you depend on! ‚ú®
</span><span class='line'>
</span><span class='line'>Usage:
</span><span class='line'>    thanks &lt;flags&gt; <span class="o">[</span>CWD<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    If CWD is omitted, <span class="k">then </span>the current working directory is used. The <span class="s2">&quot;nearest&quot;</span>
</span><span class='line'>    package.json / node_modules folder will be used.
</span><span class='line'>
</span><span class='line'>Flags:
</span><span class='line'>    -v, --version   Show current version
</span><span class='line'>    -h, --help      Show usage information
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/thanks/thanks.gif" alt="thanks.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[graphql-request]]></title>
    <link href="http://nmotw.in/graphql-request/"/>
    <updated>2018-02-03T22:46:29+05:30</updated>
    <id>http://nmotw.in/graphql-request</id>
    <content type="html"><![CDATA[<h1><a href="">graphql-request</a></h1>

<blockquote><p>Minimal GraphQL client.</p></blockquote>

<p><code>graphql-request</code> is a minimal GraphQL promise based client. It's perfect for small scripts or simple apps, it doesn't have a built-in cache and has no integrations for frontend frameworks.</p>

<p><strong>Get it:</strong> <code>npm install graphql-request</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">GraphQLClient</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;graphql-request&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Run GraphQL queries/mutations using a static function</span>
</span><span class='line'><span class="nx">request</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="nx">query</span><span class="p">,</span> <span class="nx">variables</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ... or create a GraphQL client instance to send requests</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GraphQLClient</span><span class="p">(</span><span class="nx">endpoint</span><span class="p">,</span> <span class="p">{</span> <span class="nx">headers</span><span class="o">:</span> <span class="p">{}</span> <span class="p">})</span>
</span><span class='line'><span class="nx">client</span><span class="p">.</span><span class="nx">request</span><span class="p">(</span><span class="nx">query</span><span class="p">,</span> <span class="nx">variables</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/graphql-request/graphql-request.gif" alt="graphql-request.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bytes]]></title>
    <link href="http://nmotw.in/bytes/"/>
    <updated>2018-01-28T22:24:12+05:30</updated>
    <id>http://nmotw.in/bytes</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/bytes">bytes</a></h1>

<blockquote><p>parse a string bytes &lt;=> bytes</p></blockquote>

<p><code>bytes</code> is a sweet little util that helps in parsing a string bytes (ex: 1TB) to bytes (1099511627776) and vice-versa.</p>

<p><strong>Get it:</strong> <code>npm install --save bytes</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">bytes</span><span class="p">(</span><span class="mi">1024</span><span class="p">);</span>
</span><span class='line'><span class="c1">// output: &#39;1KB&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bytes</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="c1">// output: &#39;1000B&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bytes</span><span class="p">(</span><span class="mi">1000</span><span class="p">,</span> <span class="p">{</span><span class="nx">thousandsSeparator</span><span class="o">:</span> <span class="s1">&#39; &#39;</span><span class="p">});</span>
</span><span class='line'><span class="c1">// output: &#39;1 000B&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bytes</span><span class="p">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mf">1.7</span><span class="p">,</span> <span class="p">{</span><span class="nx">decimalPlaces</span><span class="o">:</span> <span class="mi">0</span><span class="p">});</span>
</span><span class='line'><span class="c1">// output: &#39;2KB&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bytes</span><span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="p">{</span><span class="nx">unitSeparator</span><span class="o">:</span> <span class="s1">&#39; &#39;</span><span class="p">});</span>
</span><span class='line'><span class="c1">// output: &#39;1 KB&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Supported units and abbreviations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">b</span> <span class="k">for</span> <span class="nx">bytes</span>
</span><span class='line'><span class="nx">kb</span> <span class="k">for</span> <span class="nx">kilobytes</span>
</span><span class='line'><span class="nx">mb</span> <span class="k">for</span> <span class="nx">megabytes</span>
</span><span class='line'><span class="nx">gb</span> <span class="k">for</span> <span class="nx">gigabytes</span>
</span><span class='line'><span class="nx">tb</span> <span class="k">for</span> <span class="nx">terabytes</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/bytes/bytes.gif" alt="bytes.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[technicalindicators]]></title>
    <link href="http://nmotw.in/technicalindicators/"/>
    <updated>2018-01-21T23:43:42+05:30</updated>
    <id>http://nmotw.in/technicalindicators</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/technicalindicators">technicalindicators</a></h1>

<blockquote><p>Techincal Indicators!</p></blockquote>

<p>Techincal Indicators: "Any class of metrics whose value is derived from generic price activity in a stock or asset."</p>

<p>With this module we would get around 20 indicators, 2 charts, 23 candle stick patterns!</p>

<p><strong>Get it:</strong> <code>npm install technicalindicators</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">twoDayBullishInput</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">open</span><span class="o">:</span> <span class="p">[</span><span class="mf">23.25</span><span class="p">,</span><span class="mf">15.36</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">high</span><span class="o">:</span> <span class="p">[</span><span class="mf">25.10</span><span class="p">,</span><span class="mf">30.87</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">close</span><span class="o">:</span> <span class="p">[</span><span class="mf">21.44</span><span class="p">,</span><span class="mf">27.89</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">low</span><span class="o">:</span> <span class="p">[</span><span class="mf">20.82</span><span class="p">,</span><span class="mf">14.93</span><span class="p">],</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">bullish</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;technicalindicators&#39;</span><span class="p">).</span><span class="nx">bullish</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">bullish</span><span class="p">(</span><span class="nx">twoDayBullishInput</span><span class="p">)</span> <span class="c1">//true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/technicalindicators/technicalindicators.gif" alt="technicalindicators.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ccxt]]></title>
    <link href="http://nmotw.in/ccxt/"/>
    <updated>2018-01-14T17:37:05+05:30</updated>
    <id>http://nmotw.in/ccxt</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ccxt">ccxt</a></h1>

<blockquote><p>Connect and trade with cryptocurrency.</p></blockquote>

<p><code>ccxt</code> is library for cryptocurrency trading and e-commerce with support for many bitcoin/ether/altcoin exchange markets and merchant APIs.</p>

<p><strong>Get it:</strong> <code>npm install ccxt</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">ccxt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ccxt&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">exchange</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ccxt</span><span class="p">.</span><span class="nx">bitfinex</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">apiKey</span><span class="o">:</span> <span class="s1">&#39;4FlEDtxDl35gdEiobnfZ72vJeZteE4Bb7JdvqzjIjHq&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;D4DXM8DZdHuAq9YptUsb42aWT1XBnGlIJgLi8a7tzFH&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">await</span> <span class="nx">exchange</span><span class="p">.</span><span class="nx">loadMarkets</span><span class="p">()</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">exchange</span><span class="p">.</span><span class="nx">symbols</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">symbol</span> <span class="o">=</span> <span class="nx">exchange</span><span class="p">.</span><span class="nx">symbols</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">symbol</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">ticker</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">exchange</span><span class="p">.</span><span class="nx">fetchTicker</span><span class="p">(</span><span class="nx">symbol</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ticker</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">orderbook</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">exchange</span><span class="p">.</span><span class="nx">fetchOrderBook</span><span class="p">(</span><span class="nx">symbol</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">orderbook</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">balance</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">exchange</span><span class="p">.</span><span class="nx">fetchBalance</span><span class="p">()</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">balance</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ccxt/ccxt.gif" alt="ccxt" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[circular-json]]></title>
    <link href="http://nmotw.in/circular-json/"/>
    <updated>2018-01-07T11:38:12+05:30</updated>
    <id>http://nmotw.in/circular-json</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/circular-json">circular-json</a></h1>

<blockquote><p>Handle circular JSON references with ease!</p></blockquote>

<p>You would have come acorss <code>TypeError: Converting circular structure to JSON</code> if you have been handling JSONs for a while now, <code>circular-json</code> serializes and deserializes otherwise valid JSON objects containing circular references into and from a specialized JSON format.</p>

<p><strong>Get it:</strong> <code>npm install circular-json</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span>
</span><span class='line'>  <span class="nx">CircularJSON</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;circular-json&#39;</span><span class="p">),</span>
</span><span class='line'>  <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">foo</span><span class="o">:</span> <span class="s1">&#39;bar&#39;</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">str</span>
</span><span class='line'><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">obj</span><span class="p">.</span><span class="nx">self</span> <span class="o">=</span> <span class="nx">obj</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">str</span> <span class="o">=</span> <span class="nx">CircularJSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// &quot;{\&quot;foo\&quot;:\&quot;bar\&quot;,\&quot;self\&quot;:\&quot;~\&quot;}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">JSON.stringify(obj); would have resulted in:</span>
</span><span class='line'><span class="cm">TypeError: Converting circular structure to JSON</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/circular-json/circular-json.gif" alt="circular-json" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scrolldir]]></title>
    <link href="http://nmotw.in/scrolldir/"/>
    <updated>2017-12-30T15:32:47+05:30</updated>
    <id>http://nmotw.in/scrolldir</id>
    <content type="html"><![CDATA[<h1><a href="https://nmpjs.org/scrolldir">scrolldir</a></h1>

<blockquote><p>leverage scroll direction with CSS ‚¨Ü‚¨á</p></blockquote>

<p><code>0</code> dep, <code>1KB</code> micro JS lib to easily leverage vertical scroll direction in CSS via a data attribute.</p>

<p><strong>Get it:</strong> <code>npm install scrolldir</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">scrollDir</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">attribute</span><span class="o">:</span> <span class="s1">&#39;new-attribute-name&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;your-new-selector&#39;</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">off</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollDir</span><span class="p">({</span> <span class="nx">direction</span><span class="o">:</span> <span class="s1">&#39;up&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ScrollDir will set the <code>data-scrolldir</code> attribute on the <code>&lt;html&gt;</code> element to <code>up</code> or <code>down</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/scrolldir/scrolldir.gif" alt="scrolldir.gif" /></p>
]]></content>
  </entry>
  
</feed>
