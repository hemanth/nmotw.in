<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2018-07-08T13:02:09+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[auto-parse]]></title>
    <link href="http://nmotw.in/auto-parse/"/>
    <updated>2018-07-07T21:59:37+05:30</updated>
    <id>http://nmotw.in/auto-parse</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/auto-parse">auto-parse</a></h1>

<blockquote><p>auto-parse any value you happen to send in.</p></blockquote>

<p><code>auto-parse</code> any value you happen to send in like: <code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Array</code>, <code>Object</code>, <code>Function</code>, <code>undefined</code> and <code>null</code> and it shall get parsed to the appropriate value.</p>

<p><strong>GET IT:</strong> <code>npm install auto-parse</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">autoParse</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;auto-parse&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">autoParse</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;TrUe&#39;</span><span class="p">,</span> <span class="s1">&#39; undefined &#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39; null &#39;</span><span class="p">,</span> <span class="s1">&#39;[]&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">age</span> <span class="o">:</span> <span class="s2">&quot;50&quot;</span><span class="p">}</span>
</span><span class='line'><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">[1, true, undefined, null, [], {age: 50} ]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Set Type</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;Boolean&#39;</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="kc">true</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s1">&#39;Number&#39;</span><span class="p">)</span>  <span class="o">=&gt;</span>   <span class="mi">0</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">Boolean</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="kc">true</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">Number</span><span class="p">)</span>  <span class="o">=&gt;</span>   <span class="mi">0</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="mi">1234</span><span class="p">,</span> <span class="nb">String</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="s1">&#39;1234&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// dates</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="s1">&#39;1989-11-30&#39;</span><span class="p">,</span> <span class="s1">&#39;date&#39;</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="nx">Thu</span> <span class="nx">Nov</span> <span class="mi">30</span> <span class="mi">1989</span> <span class="mi">18</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0600</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="s1">&#39;1989-11-30&#39;</span><span class="p">,</span> <span class="nb">Date</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="nx">Thu</span> <span class="nx">Nov</span> <span class="mi">30</span> <span class="mi">1989</span> <span class="mi">18</span><span class="o">:</span><span class="mi">00</span><span class="o">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0600</span> <span class="p">(</span><span class="nx">CST</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Passing Functions to type</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Color</span> <span class="p">(</span><span class="nx">inputColor</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">inputColor</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">autoParse</span><span class="p">(</span><span class="s1">&#39;#AAA&#39;</span><span class="p">,</span> <span class="nx">Color</span><span class="p">)</span>  <span class="o">=&gt;</span>  <span class="p">{</span><span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;#AAA&#39;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/auto-parse/auto-parse.gif" alt="auto-parse" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[error-stack-parser]]></title>
    <link href="http://nmotw.in/error-stack-parser/"/>
    <updated>2018-07-01T20:42:55+05:30</updated>
    <id>http://nmotw.in/error-stack-parser</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/error-stack-parser">error-stack-parser</a></h1>

<blockquote><p>Simple, cross-browser Error parser.</p></blockquote>

<p><code>error-stack-parser</code> library parses and extracts function names, URLs, line numbers, and column numbers from the given Error's stack as an Array of StackFrames.</p>

<p><strong>Get it:</strong> <code>npm install error-stack-parser</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">ErrorStackParser</span> <span class="o">=</span> <span class="nx">rquire</span><span class="p">(</span><span class="err">&quot;</span><span class="nx">error</span><span class="o">-</span><span class="nx">stack</span><span class="o">-</span><span class="nx">parser</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">ErrorStackParser</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;BOOM&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">=&gt; [</span>
</span><span class='line'><span class="cm">        StackFrame({functionName: &#39;foo&#39;, args: [], fileName: &#39;path/to/file.js&#39;, lineNumber: 35, columnNumber: 79, isNative: false, isEval: false}),</span>
</span><span class='line'><span class="cm">        StackFrame({functionName: &#39;Bar&#39;, fileName: &#39;https://cdn.somewherefast.com/utils.min.js&#39;, lineNumber: 1, columnNumber: 832, isNative: false, isEval: false, isConstructor: true}),</span>
</span><span class='line'><span class="cm">        StackFrame(... and so on ...)</span>
</span><span class='line'><span class="cm">   ]</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">ErrorStackParer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">[ &#39;parse&#39;,</span>
</span><span class='line'><span class="cm">  &#39;extractLocation&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseV8OrIE&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseFFOrSafari&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera9&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera10&#39;,</span>
</span><span class='line'><span class="cm">  &#39;parseOpera11&#39; ]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/error-stack-parser/error-stack-parser.gif" alt="error-stack-parser" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ent]]></title>
    <link href="http://nmotw.in/ent/"/>
    <updated>2018-06-24T10:11:29+05:30</updated>
    <id>http://nmotw.in/ent</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/ent">ent</a></h1>

<blockquote><p>Encode and decode HTML entities.</p></blockquote>

<p><code>ent</code> helps in encoding and ecoding HTML entities.</p>

<p><strong>Get it:</strong> <code>npm install ent</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">ent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ent</span><span class="p">.</span><span class="nx">encode</span><span class="p">(</span><span class="s1">&#39;&lt;span&gt;©moo&lt;/span&gt;&#39;</span><span class="p">))</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">ent</span><span class="p">.</span><span class="nx">decode</span><span class="p">(</span><span class="s1">&#39;&amp;pi; &amp;amp; &amp;rho;&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&amp;</span><span class="err">#</span><span class="mi">60</span><span class="p">;</span><span class="nx">span</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">62</span><span class="p">;</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">169</span><span class="p">;</span><span class="nx">moo</span><span class="o">&amp;</span><span class="err">#</span><span class="mi">60</span><span class="p">;</span><span class="err">/span&amp;#62;</span>
</span><span class='line'><span class="err">π</span> <span class="o">&amp;</span> <span class="err">ρ</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">ent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">encode</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent/encode&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ^ Escape unsafe characters in str with html entities.</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">decode</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;ent/decode&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ^ Convert html entities in str back to raw text.</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/ent/ent.gif" alt="ent" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[media-typer]]></title>
    <link href="http://nmotw.in/media-typer/"/>
    <updated>2018-06-15T16:35:15+05:30</updated>
    <id>http://nmotw.in/media-typer</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/media-typer">media-typer</a></h1>

<blockquote><p>RFC 6838 media type parser.</p></blockquote>

<p><code>media-typer</code> helps in parsing and formatting media type.</p>

<p><strong>Get it:</strong> <code>npm install media-typer</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">typer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;media-typer&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">typer</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="s1">&#39;image/svg+xml; charset=utf-8&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{ type: &#39;image&#39;,</span>
</span><span class='line'><span class="cm">  subtype: &#39;svg&#39;,</span>
</span><span class='line'><span class="cm">  suffix: &#39;xml&#39;,</span>
</span><span class='line'><span class="cm">  parameters: { charset: &#39;utf-8&#39; } </span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">typer</span><span class="p">.</span><span class="nx">format</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;image&#39;</span><span class="p">,</span> <span class="nx">subtype</span><span class="o">:</span> <span class="s1">&#39;svg&#39;</span><span class="p">,</span> <span class="nx">suffix</span><span class="o">:</span> <span class="s1">&#39;xml&#39;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ &#39;image/svg+xml&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">typer</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* ^ Parse the `content-type` header from the given req.</span>
</span><span class='line'><span class="cm"> Short-cut for typer.parse(req.headers[&#39;content-type&#39;])*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/media-typer/media-typer.gif" alt="media-typer" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[qw]]></title>
    <link href="http://nmotw.in/qw/"/>
    <updated>2018-06-10T16:10:46+05:30</updated>
    <id>http://nmotw.in/qw</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/qw">qw</a></p>

<blockquote><p>Quoted word literals!</p></blockquote>

<p>qw use template strings to bring over this little common convenience from Perl-land.</p>

<p><strong>Get it:</strong> <code>npm install qw</code></p>

<p><strong>_Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">qw</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;qw&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qw</span> <span class="err">`</span>
</span><span class='line'><span class="k">this</span>
</span><span class='line'><span class="nx">shall</span>
</span><span class='line'><span class="k">break</span>
</span><span class='line'><span class="nx">into</span>
</span><span class='line'><span class="nx">an</span> <span class="nx">array</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ [&quot;this&quot;, &quot;shall&quot;, &quot;break&quot;, &quot;into&quot;, &quot;an&quot;, &quot;array&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">qw</span> <span class="err">`</span><span class="nx">also</span> <span class="nx">xpression</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="mi">40</span><span class="o">+</span><span class="mi">2</span><span class="p">}</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ [&quot;also&quot;, &quot;expression:&quot;, 42]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/qw/qw.gif" alt="qw.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[franc]]></title>
    <link href="http://nmotw.in/franc/"/>
    <updated>2018-05-31T15:52:58+05:30</updated>
    <id>http://nmotw.in/franc</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/franc">franc</a></h1>

<blockquote><p>Detect the language of text.</p></blockquote>

<p><code>franc</code> is a natural language detection lib that supports <code>188</code> languages (1M or more speakers).</p>

<p><strong>Get it:</strong> <code>npm install franc</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">franc</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;franc&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">franc</span><span class="p">(</span><span class="s2">&quot;ಮಾನವ ಕುಟುಂಬದ ಸಮಸ್ತ ಸದಸ್ಯರ ಸಹಜ ಗೌರವವನ್ನೂ ಸಮಾನವೂ ಅನನ್ಯಹಾರ್ಯವೂ ಆದ ಹಕ್ಕುಗಳನ್ನು ಅಂಗೀಕರಿಸುವುದು ಪ್ರಪಂಚದಲ್ಲಿ&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ would return &quot;kan&quot; indicating that it&#39;s Kannada</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/franc/franc.gif" alt="franc.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[what-dog]]></title>
    <link href="http://nmotw.in/what-dog/"/>
    <updated>2018-05-25T16:13:51+05:30</updated>
    <id>http://nmotw.in/what-dog</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/what-dog">what-dog</a></h1>

<blockquote><p>What 🐶 is this?</p></blockquote>

<p>Get the breed of a dog from an image using Microsoft's what-dog.</p>

<p><img src="what-dog.demo.png" alt="" /></p>

<p><strong>Get it:</strong> <code>npm install --save what-dog</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">whatDog</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;what-dog&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">((</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">await</span> <span class="nx">whatDog</span><span class="p">(</span><span class="s1">&#39;http://imgur.com/B7a15F5.jpg&#39;</span><span class="p">))</span>
</span><span class='line'><span class="p">})());</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  &quot;isDog&quot;: true,</span>
</span><span class='line'><span class="cm">  &quot;breed&quot;: &quot;Norfolk Terrier&quot;,</span>
</span><span class='line'><span class="cm">  &quot;about&quot;: &quot;Spirited, small but sturdy, feisty yet sweet personality&quot;</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/what-dog/what-dog.gif" alt="what-dog.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[signal-exit]]></title>
    <link href="http://nmotw.in/signal-exit/"/>
    <updated>2018-05-20T20:33:02+05:30</updated>
    <id>http://nmotw.in/signal-exit</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/signal-exit">signal-exit</a></h1>

<blockquote><p>Fire an event no matter how a process exits.</p></blockquote>

<p><code>signal-exit</code> fires an event no matter how a process exits:</p>

<ul>
<li>reaching the end of execution.</li>
<li>explicitly having <code>process.exit(code)</code> called.</li>
<li>having <code>process.kill(pid, sig)</code> called.</li>
<li>receiving a fatal signal from outside the process</li>
</ul>


<p><strong>Get it:</strong> <code>npm install signal-exit</code></p>

<p><strong>Sample code:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">onExit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;signal-exit&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">onExit</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="nx">signal</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;process exited!&#39;</span><span class="p">,</span> <span class="nx">code</span><span class="p">,</span> <span class="nx">signal</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/signal-exit/signal-exit.gif" alt="signal-exit" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scrape-it]]></title>
    <link href="http://nmotw.in/scrape-it/"/>
    <updated>2018-05-12T11:34:02+05:30</updated>
    <id>http://nmotw.in/scrape-it</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/scrape-it">scrape-it</a></h1>

<blockquote><p>scraper for humans.</p></blockquote>

<p><code>scrape-it</code> uses <a href="https://www.npmjs.com/package/cheerio">cheerio</a> under the hood and makes it easier to scrape websites.</p>

<p><strong>Get it:</strong> <code>npm install [-g] scrape-it</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">scrapeIt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;scrape-it&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrapeIt</span><span class="p">(</span><span class="s2">&quot;https://nmotw.in&quot;</span><span class="p">,</span> <span class="p">{</span><span class="nx">tagLine</span><span class="o">:</span> <span class="s2">&quot;.tagline&quot;</span><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">scraped</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">scraped</span><span class="p">.</span><span class="nx">data</span><span class="p">))</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ {tagLine: &quot;Node Mode Of The Week&quot;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/scrape-it/scrape-it.gif" alt="scrape-it.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[global-cache]]></title>
    <link href="http://nmotw.in/global-cache/"/>
    <updated>2018-05-05T11:45:30+05:30</updated>
    <id>http://nmotw.in/global-cache</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/global-cache">global-cache</a></h1>

<blockquote><p>Use global object as a share singleton.</p></blockquote>

<p>From the 🐴's mouth -> Sometimes you have to do horrible things, like use the global object to share a singleton. Abstract that away, with this!</p>

<p><code>global-cache</code> attaches a cache to the global object. It attempts to make it as undiscoverable as possible:</p>

<ul>
<li><p>uses Symbols if available</p></li>
<li><p>if not, uses a string key that is not a valid identifier, so as not to show up in dot-notation browser autocomplete</p></li>
<li><p>makes it non-enumerable if property descriptors are supported</p></li>
<li><p>keys are required to be strings or symbols.</p></li>
</ul>


<p><strong>Get it:</strong> <code>npm install global-cache</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="p">{},</span> <span class="nx">key</span><span class="o">=</span><span class="s1">&#39;key&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">cache</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;global-cache&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">//[ undefined, false ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span><span class="nx">value</span><span class="p">);</span> <span class="c1">//true</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">//[ {}, true ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="p">[</span><span class="nx">cache</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">key</span><span class="p">),</span> <span class="nx">cache</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">key</span><span class="p">)];</span> <span class="c1">// [ undefined, false ]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cache</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">{ clear: [Function: clear],</span>
</span><span class='line'><span class="cm">  delete: [Function: deleteKey],</span>
</span><span class='line'><span class="cm">  get: [Function: get],</span>
</span><span class='line'><span class="cm">  has: [Function: has],</span>
</span><span class='line'><span class="cm">  set: [Function: set],</span>
</span><span class='line'><span class="cm">  setIfMissingThenGet: [Function: setIfMissingThenGet] }</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/global-cache/global-cache.gif" alt="global-cache.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dayjs]]></title>
    <link href="http://nmotw.in/dayjs/"/>
    <updated>2018-04-26T14:32:27+05:30</updated>
    <id>http://nmotw.in/dayjs</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dayjs">dayjs</a></h1>

<blockquote><p>⏰ Fast 2KB immutable date library.</p></blockquote>

<p><code>dayjs</code> is a minimalist JavaScript library for modern browsers with a largely Moment.js-compatible API, with:</p>

<p>🕒 Familiar Moment.js API &amp; patterns
💪 Immutable
🔥 Chainable
📦 2kb mini library
👫 All browsers support</p>

<p><strong>Get it:</strong> <code>npm install dayjs</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">dayjs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dayjs&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dayjs</span><span class="p">()</span>
</span><span class='line'><span class="p">.</span><span class="nx">startOf</span><span class="p">(</span><span class="s1">&#39;month&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;day&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;year&#39;</span><span class="p">,</span> <span class="mi">2018</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="s1">&#39;YYYY-MM-DD HH:mm:ss&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dayjs/dayjs.gif" alt="dayjs" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tiny-glob]]></title>
    <link href="http://nmotw.in/tiny-glob/"/>
    <updated>2018-04-21T11:56:24+05:30</updated>
    <id>http://nmotw.in/tiny-glob</id>
    <content type="html"><![CDATA[<h1><a href="">tiny-glob</a></h1>

<blockquote><p>Match files and dirs using glob patterns.</p></blockquote>

<p><code>tiny-glob</code> is 🔥 extremely fast, 💪 powerful, 📦 tiny util to match files and folders using glob patterns.</p>

<p><strong>Get it:</strong> <code>npm install tiny-glob</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">glob</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;tiny-glob&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">let</span> <span class="nx">files</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">glob</span><span class="p">(</span><span class="s1">&#39;src/*/*.{js,md}&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// =&gt; [ ... ] array of matching files</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Benchmark results:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">13</span><span class="p">,</span><span class="mi">405</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">±</span><span class="mf">1.80</span><span class="o">%</span> <span class="p">(</span><span class="mi">85</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">fast</span><span class="o">-</span><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">25</span><span class="p">,</span><span class="mi">745</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">±</span><span class="mf">2.76</span><span class="o">%</span> <span class="p">(</span><span class="mi">59</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span> <span class="nx">x</span> <span class="mi">102</span><span class="p">,</span><span class="mi">658</span> <span class="nx">ops</span><span class="o">/</span><span class="nx">sec</span> <span class="err">±</span><span class="mf">0.79</span><span class="o">%</span> <span class="p">(</span><span class="mi">91</span> <span class="nx">runs</span> <span class="nx">sampled</span><span class="p">)</span>
</span><span class='line'><span class="nx">Fastest</span> <span class="nx">is</span> <span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span>
</span><span class='line'><span class="err">┌───────────┬─────────────────────────┬─────────────┬────────────────┐</span>
</span><span class='line'><span class="err">│</span> <span class="nx">Name</span>      <span class="err">│</span> <span class="nx">Mean</span> <span class="nx">time</span>               <span class="err">│</span> <span class="nx">Ops</span><span class="o">/</span><span class="nx">sec</span>     <span class="err">│</span> <span class="nx">Diff</span>           <span class="err">│</span>
</span><span class='line'><span class="err">├───────────┼─────────────────────────┼─────────────┼────────────────┤</span>
</span><span class='line'><span class="err">│</span> <span class="nx">glob</span>      <span class="err">│</span> <span class="mf">0.00007459990597268128</span>  <span class="err">│</span> <span class="mi">13</span><span class="p">,</span><span class="mf">404.843</span>  <span class="err">│</span> <span class="nx">N</span><span class="o">/</span><span class="nx">A</span>            <span class="err">│</span>
</span><span class='line'><span class="err">├───────────┼─────────────────────────┼─────────────┼────────────────┤</span>
</span><span class='line'><span class="err">│</span> <span class="nx">fast</span><span class="o">-</span><span class="nx">glob</span> <span class="err">│</span> <span class="mf">0.000038842529587611705</span> <span class="err">│</span> <span class="mi">25</span><span class="p">,</span><span class="mf">744.976</span>  <span class="err">│</span> <span class="mf">92.06</span><span class="o">%</span> <span class="nx">faster</span>  <span class="err">│</span>
</span><span class='line'><span class="err">├───────────┼─────────────────────────┼─────────────┼────────────────┤</span>
</span><span class='line'><span class="err">│</span> <span class="nx">tiny</span><span class="o">-</span><span class="nx">glob</span> <span class="err">│</span> <span class="mf">0.00000974110141018254</span>  <span class="err">│</span> <span class="mi">102</span><span class="p">,</span><span class="mf">657.796</span> <span class="err">│</span> <span class="mf">298.75</span><span class="o">%</span> <span class="nx">faster</span> <span class="err">│</span>
</span><span class='line'><span class="err">└───────────┴─────────────────────────┴─────────────┴────────────────┘</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/tiny-glob/tiny-glob.gif" alt="tiny-glob" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a11y]]></title>
    <link href="http://nmotw.in/a11y/"/>
    <updated>2018-04-15T07:01:25+05:30</updated>
    <id>http://nmotw.in/a11y</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/a11y">a11y</a></h1>

<blockquote><p>Easy accessibility audits powered by the Chrome Accessibility Tools</p></blockquote>

<p><code>a11y</code> conducts audits using the Chrome Accessibility Tools and PhantomJS and lists out the issues for a given URL.</p>

<p><strong>Get it:</strong> <code>npm install [-g] a11y</code></p>

<p><strong>Sample CLI usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>  Runs an accessibility audit against a URL
</span><span class='line'>
</span><span class='line'>  Usage
</span><span class='line'>    <span class="nv">$ </span>a11y &lt;url&gt;
</span><span class='line'>
</span><span class='line'>  Options
</span><span class='line'>    --viewport-size<span class="o">=</span>&lt;size&gt;  Set the viewport size
</span><span class='line'>    --delay                 Set the delay capturing the page
</span><span class='line'>    --verbose               Display more information
</span><span class='line'>
</span><span class='line'>  Examples
</span><span class='line'>    <span class="nv">$ </span>a11y todomvc.com
</span><span class='line'>    <span class="nv">$ </span>a11y http://todomvc.com https://google.com
</span><span class='line'>    <span class="nv">$ </span>a11y index.html -<span class="o">=</span>viewport-size<span class="o">=</span>1024x768
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sample API usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>const <span class="nv">a11y</span> <span class="o">=</span> require<span class="o">(</span><span class="s1">&#39;a11y&#39;</span><span class="o">)</span>;
</span><span class='line'>
</span><span class='line'>a11y<span class="o">(</span><span class="s1">&#39;nmotw.in&#39;</span>, <span class="o">(</span>err, reports<span class="o">)</span> <span class="o">=</span>&gt; <span class="o">{</span>
</span><span class='line'>    const <span class="nv">audit</span> <span class="o">=</span> reports.audit; // <span class="sb">`</span>a11y<span class="sb">`</span> Formatted report
</span><span class='line'>    const <span class="nv">report</span> <span class="o">=</span> reports.report; // DevTools Accessibility Audit formatted report
</span><span class='line'><span class="o">})</span>;
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/a11y/a11y.gif" alt="a11y.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cryptiles]]></title>
    <link href="http://nmotw.in/cryptiles/"/>
    <updated>2018-04-07T16:56:08+05:30</updated>
    <id>http://nmotw.in/cryptiles</id>
    <content type="html"><![CDATA[<h1><a href="https://npmjs.com/package/cryptiles">cryptiles</a></h1>

<blockquote><p>General purpose crypto utilities.</p></blockquote>

<p><code>cryptiles</code> provides util methods for creating cryptographically strong pseudo-random data with the below methods:</p>

<ul>
<li>fixedTimeComparison</li>
<li>randomBits</li>
<li>randomDigits</li>
<li>randomString</li>
</ul>


<p><strong>Get it:</strong> <code>npm install cryptiles</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">cryptiles</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;cryptiles&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">[</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">fixedTimeComparison</span><span class="p">(</span><span class="s1">&#39;abcd&#39;</span><span class="p">,</span><span class="s1">&#39;abcd&#39;</span><span class="p">),</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">randomBits</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">randomDigits</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span>
</span><span class='line'><span class="nx">cryptiles</span><span class="p">.</span><span class="nx">randomString</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* ^</span>
</span><span class='line'><span class="cm">[</span>
</span><span class='line'><span class="cm">  true,</span>
</span><span class='line'><span class="cm">  Uint8Array &lt;66&gt;,</span>
</span><span class='line'><span class="cm">  &quot;42115&quot;,</span>
</span><span class='line'><span class="cm">  &quot;jsmx9&quot;</span>
</span><span class='line'><span class="cm">]</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/cryptiles/cryptiles.gif" alt="cryptiles" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[april-fools]]></title>
    <link href="http://nmotw.in/april-fools/"/>
    <updated>2018-04-01T05:37:51+05:30</updated>
    <id>http://nmotw.in/april-fools</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/april-fools">april-fools</a></p>

<blockquote><p>Randomly fool with an <code>Error</code> on April 1st.</p></blockquote>

<p>⚠️ This is a foolproof way to lose friends and alienate people. Will likely get you fired!</p>

<p>Few lines of code to have fun on April fools day:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>'use strict'
</span><span class='line'>
</span><span class='line'>const date = new Date()
</span><span class='line'>
</span><span class='line'>if (date.getMonth() === 3 && date.getDate() === 1 && Math.floor(Math.random() * 6) + 1 === 1) {
</span><span class='line'>  const message = require('sentencer').make("Unexpected  with  ")
</span><span class='line'>
</span><span class='line'>  throw new Error(message)
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Related module -> <a href="http://nmotw.in/sentencer/">sentencer</a>.</p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;april-fools&#39;</span><span class="p">);</span> <span class="c1">// That&#39;s it! And it would randomly throw an error like below.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Error</span><span class="o">:</span> <span class="nx">Unexpected</span> <span class="nx">lunch</span> <span class="kd">with</span> <span class="nx">a</span> <span class="nx">brindle</span> <span class="nx">ravioli</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">anonymous</span><span class="o">&gt;</span> <span class="p">(</span><span class="err">/private/tmp/node_modules/april-fools/index.js:8:9)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">_compile</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">652</span><span class="o">:</span><span class="mi">30</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_extensions</span><span class="p">..</span><span class="nx">js</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">663</span><span class="o">:</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">load</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">565</span><span class="o">:</span><span class="mi">32</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">tryModuleLoad</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">505</span><span class="o">:</span><span class="mi">12</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nb">Function</span><span class="p">.</span><span class="nx">Module</span><span class="p">.</span><span class="nx">_load</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">497</span><span class="o">:</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">Module</span><span class="p">.</span><span class="nx">require</span> <span class="p">(</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">596</span><span class="o">:</span><span class="mi">17</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">at</span> <span class="nx">require</span> <span class="p">(</span><span class="nx">internal</span><span class="o">/</span><span class="nx">module</span><span class="p">.</span><span class="nx">js</span><span class="o">:</span><span class="mi">11</span><span class="o">:</span><span class="mi">18</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/april-fools/april-fools.gif" alt="april-fools" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[prompts]]></title>
    <link href="http://nmotw.in/prompts/"/>
    <updated>2018-03-22T23:39:35+05:30</updated>
    <id>http://nmotw.in/prompts</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/prompts">prompts</a></h1>

<blockquote><p>Lightweight, beautiful and user-friendly interactive CLI prompts</p></blockquote>

<p><code>prompts</code> Zero dep, promise based, unifined CLI prompt.</p>

<p><strong>Get it:</strong> <code>npm install prompts</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">prompts</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;prompts&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">questions</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;text&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;dish&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Do you like pizza?&#39;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nx">type</span><span class="o">:</span> <span class="nx">prev</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">==</span> <span class="s1">&#39;pizza&#39;</span> <span class="o">?</span> <span class="s1">&#39;text&#39;</span> <span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;topping&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">message</span><span class="o">:</span> <span class="s1">&#39;Name a topping&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">prompts</span><span class="p">(</span><span class="nx">questions</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>API:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">prompts</span><span class="p">(</span><span class="nx">prompts</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">prompts:</span>
</span><span class='line'><span class="cm">Type: Array|Object</span>
</span><span class='line'>
</span><span class='line'><span class="cm">options: onSubmit or onCancel functions.</span>
</span><span class='line'>
</span><span class='line'><span class="cm">prompt object properties:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  type: String || Function,</span>
</span><span class='line'><span class="cm">  name: String || Function,</span>
</span><span class='line'><span class="cm">  message: String || Function,</span>
</span><span class='line'><span class="cm">  initial: String || Function || Async Function</span>
</span><span class='line'><span class="cm">  format: Function || Async Function,</span>
</span><span class='line'><span class="cm">  onState: Function</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/prompts/prompts.gif" alt="prompts.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fkill]]></title>
    <link href="http://nmotw.in/fkill/"/>
    <updated>2018-03-18T09:01:19+05:30</updated>
    <id>http://nmotw.in/fkill</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fkill">fkill</a></h1>

<blockquote><p>Fabulously kill processes. Cross-platform.</p></blockquote>

<p>You you have mostly used something like: <code>pgrep &lt;progress&gt;</code> <code>kill -9 &lt;pid&gt;</code> <code>pkill &lt;procees&gt;</code>, but <code>fkill</code> makes it fabulosusly easy to kill!</p>

<p><strong>Get it:</strong> <code>npm install [-g] fkill[-cli]</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// API</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">fkill</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fkill&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fkill</span><span class="p">(</span><span class="mi">8080</span><span class="p">).</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Killed process&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fkill</span><span class="p">(</span><span class="s1">&#39;Chrome&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fkill</span><span class="p">(</span><span class="s1">&#39;:8080&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fkill</span><span class="p">([</span><span class="mi">1337</span><span class="p">,</span> <span class="s1">&#39;Chrome&#39;</span><span class="p">,</span> <span class="s1">&#39;:8080&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>```</p>

<h1>cli</h1>

<p>➜  ~ fkill --help</p>

<p>  Fabulously kill processes. Cross-platform.</p>

<p>  Usage</p>

<pre><code>$ fkill [&lt;pid|name|:port&gt; …]
</code></pre>

<p>  Options</p>

<pre><code>--force -f    Force kill
--verbose -v  Show process arguments
</code></pre>

<p>  Examples</p>

<pre><code>$ fkill 1337
$ fkill safari
$ fkill :8080
$ fkill 1337 safari :8080
$ fkill
</code></pre>

<p>  To kill a port, prefix it with a colon. For example: :8080.</p>

<p>  Run without arguments to use the interactive interface.
  The process name is case insensitive.
  ```</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fkill/fkill.gif" alt="fkill.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lazy-cache]]></title>
    <link href="http://nmotw.in/lazy-cache/"/>
    <updated>2018-03-11T21:59:26+05:30</updated>
    <id>http://nmotw.in/lazy-cache</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/lazy-cache">lazy-cache</a></h1>

<blockquote><p>Cache requires to be lazy-loaded when needed.</p></blockquote>

<p><code>lazy-cache</code> uses native, plain-vanilla, tried and true javascript getters to call node's <code>require()</code> system for faster and safer code. (~1second to 50milliseconds)</p>

<p><strong>Get it:</strong> <code>npm install lazy-cache</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">lazyOS</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lazy-cache&quot;</span><span class="p">)(</span><span class="nx">require</span><span class="p">)(</span><span class="s1">&#39;os&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">lazyOS</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">lazyOS</span><span class="p">().</span><span class="nx">arch</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/lazy-cache/lazy-cache.gif" alt="lazy-cache.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[async-exit-hook]]></title>
    <link href="http://nmotw.in/async-exit-hook/"/>
    <updated>2018-03-04T11:56:54+05:30</updated>
    <id>http://nmotw.in/async-exit-hook</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/async-exit-hook">async-exit-hook</a></h1>

<blockquote><p>Run some code when the process exits.</p></blockquote>

<p><code>async-exit-hook</code> is a fork from <code>exit-hook</code> which can catch:</p>

<ul>
<li>process SIGINT, SIGTERM and SIGHUP, SIGBREAK signals</li>
<li>process beforeExit and exit events</li>
<li>PM2's exit.</li>
</ul>


<p>As <code>process.on('exit')</code> event doesn't catch all the ways a process can exit.</p>

<p><strong>Get it:</strong> <code>npm install async-exit-hook</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">exitHook</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;exiting&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">exitHook</span><span class="p">(</span><span class="nx">callback</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;exiting&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">callback</span><span class="p">();</span>
</span><span class='line'>    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/async-exit-hook/async-exit-hook.gif" alt="async-exit-hook" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pressure]]></title>
    <link href="http://nmotw.in/pressure/"/>
    <updated>2018-02-25T09:29:07+05:30</updated>
    <id>http://nmotw.in/pressure</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/pressure">pressure</a></p>

<blockquote><p>Handle Force Touch, 3D Touch, and Pointer Pressure on the web.</p></blockquote>

<p>Devices implement force differently <code>pressure</code> is trying to solve it across all devices, with polyfill and multi touch support.</p>

<p><strong>Get it:</strong> <code>npm install pressure</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Pressure</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;pressure&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Pressure</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;#element&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">start</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this is called on force start</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">end</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// this is called on force end</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">startDeepPress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this is called on &quot;force click&quot; / &quot;deep press&quot;, aka once the force is greater than 0.5</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">endDeepPress</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// this is called when the &quot;force click&quot; / &quot;deep press&quot; end</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">change</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">force</span><span class="p">,</span> <span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// this is called every time there is a change in pressure</span>
</span><span class='line'>    <span class="c1">// force will always be a value from 0 to 1 on mobile and desktop</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">unsupported</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// NOTE: this is only called if the polyfill option is disabled!</span>
</span><span class='line'>    <span class="c1">// this is called once there is a touch on the element and the device or browser does not support Force or 3D touch</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below are the supported devices:</p>

<ul>
<li>Microsoft Surface, Wacom Tablets (Device that supports pointer events)</li>
<li>iPhone 6s, iPhone 6s Plus, iPhone 7, iPhone 7 Plus</li>
<li>MacBook 2015 &amp; MacBook Pro 2015</li>
<li>Magic Trackpad 2</li>
<li>iPad Pro with Apple Pencil</li>
<li>Safari, Chrome, anything using WKWebView</li>
</ul>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/pressure/pressure.gif" alt="pressure" /></p>
]]></content>
  </entry>
  
</feed>
