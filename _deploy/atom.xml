<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2019-07-13T21:59:37+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[hjson]]></title>
    <link href="http://nmotw.in/hjson/"/>
    <updated>2019-07-13T21:22:19+05:30</updated>
    <id>http://nmotw.in/hjson</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/hsjon">hjson</a></h1>

<blockquote><p>A user interface for JSON.</p></blockquote>

<p><code>hjson</code>, human JSON if you may is a syntax extension to <code>JSON</code>, that allows us to create JSON with human friendly syntax with it's <code>prase</code> and <code>strigify</code> methods, like below:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="err">#</span> <span class="nx">specify</span> <span class="nx">rate</span> <span class="k">in</span> <span class="nx">requests</span><span class="o">/</span><span class="nx">second</span> <span class="p">(</span><span class="nx">because</span> <span class="nx">comments</span> <span class="nx">are</span> <span class="nx">helpful</span><span class="o">!</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">rate</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// prefer c-style comments?</span>
</span><span class='line'>  <span class="cm">/* feeling old fashioned? */</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">did</span> <span class="nx">you</span> <span class="nx">notice</span> <span class="nx">that</span> <span class="nx">rate</span> <span class="nx">doesn</span><span class="err">&#39;</span><span class="nx">t</span> <span class="nx">need</span> <span class="nx">quotes</span><span class="o">?</span>
</span><span class='line'>  <span class="nx">hey</span><span class="o">:</span> <span class="nx">look</span> <span class="nx">ma</span><span class="p">,</span> <span class="nx">no</span> <span class="nx">quotes</span> <span class="k">for</span> <span class="nx">strings</span> <span class="nx">either</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">best</span> <span class="nx">of</span> <span class="nx">all</span>
</span><span class='line'>  <span class="nx">notice</span><span class="o">:</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nx">anything</span><span class="o">:</span> <span class="o">?</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">#</span> <span class="nx">yes</span><span class="p">,</span> <span class="nx">commas</span> <span class="nx">are</span> <span class="nx">optional</span><span class="o">!</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GET IT:</strong> <code>npm install hjson</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">Hjson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;hjson&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">Hjson</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">hjsonText</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">text2</span> <span class="o">=</span> <span class="nx">Hjson</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">obj</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Usage:
</span><span class='line'>  hjson <span class="o">[</span>OPTIONS<span class="o">]</span>
</span><span class='line'>  hjson <span class="o">[</span>OPTIONS<span class="o">]</span> INPUT
</span><span class='line'>  hjson <span class="o">(</span>-h | --help | -?<span class="o">)</span>
</span><span class='line'>  hjson <span class="o">(</span>-V | --version<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>INPUT can be in JSON or Hjson format. If no file is given it will <span class="nb">read </span>from stdin.
</span><span class='line'>The default is to output as Hjson.
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  <span class="o">(</span>-j | -json<span class="o">)</span>  output as formatted JSON.
</span><span class='line'>  <span class="o">(</span>-c | -json<span class="o">=</span>compact<span class="o">)</span>  output as JSON.
</span><span class='line'>Options <span class="k">for </span>Hjson output:
</span><span class='line'>  -sl         output the opening brace on the same line
</span><span class='line'>  -quote      quote all strings
</span><span class='line'>  -quote<span class="o">=</span>all  quote keys as well
</span><span class='line'>  -js         output in JavaScript/JSON compatible format
</span><span class='line'>              can be used with -rt and // comments
</span><span class='line'>  -rt         round trip comments
</span><span class='line'>  -nocol      disable colors
</span><span class='line'>  -cond<span class="o">=</span>n     <span class="nb">set </span>condense option <span class="o">(</span>default 60, 0 to disable<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>Domain specific formats are optional extensions to Hjson and can be enabled with the following options:
</span><span class='line'>  +math: support <span class="k">for </span>Inf/inf, -Inf/-inf, Nan/naN and -0
</span><span class='line'>  +hex: parse hexadecimal numbers prefixed with 0x
</span><span class='line'>  +date: support ISO dates
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/hjson/hjson.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fetch-retry]]></title>
    <link href="http://nmotw.in/fetch-retry/"/>
    <updated>2019-07-06T14:23:46+05:30</updated>
    <id>http://nmotw.in/fetch-retry</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fetch-retry">fetch-retry</a></h1>

<blockquote><p>Adds retry functionality to the Fetch API.</p></blockquote>

<p><code>fetch-retry</code> in about 88 lines of code provides an extension to the <code>fetch</code> API to accept <code>retries</code>, <code>retryDelay</code>, and <code>retryOn</code> on the options object, when omitted will default to 3 retries, a 1000ms retry delay, and to retry only on network errors.</p>

<p><strong>Get it:</strong> <code>npm install fetch-retry</code></p>

<p><strong>Smaple usages:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span>  <span class="nx">fetch</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fetch-retry&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retries</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">retryDelay</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something with the result</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Retry on 503</span>
</span><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retryOn</span><span class="o">:</span> <span class="p">[</span><span class="mi">503</span><span class="p">]</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something with the result</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Custorm retry</span>
</span><span class='line'><span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">retryOn</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">attempt</span><span class="p">,</span> <span class="nx">error</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// retry on any network error, or 4xx or 5xx status codes</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">error</span> <span class="o">!==</span> <span class="kc">null</span> <span class="o">||</span> <span class="nx">response</span><span class="p">.</span><span class="nx">status</span> <span class="o">&gt;=</span> <span class="mi">400</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="nx">retrying</span><span class="p">,</span> <span class="nx">attempt</span> <span class="nx">number</span> <span class="nx">$</span><span class="p">{</span><span class="nx">attempt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// do something with the result</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fetch-retry/fetch-retry.gif" alt="fetch-retry" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[toposort]]></title>
    <link href="http://nmotw.in/toposort/"/>
    <updated>2019-06-29T17:54:08+05:30</updated>
    <id>http://nmotw.in/toposort</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/toposort">toposort</a></h1>

<blockquote><p>Sort directed acyclic graphs</p></blockquote>

<p><code>toposort</code> does the topological sort or topological ordering of a directed graph.</p>

<p><strong>Get it:</strong> <code>npm install toposort</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// First, we define our edges.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">graph</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;put on your shoes&#39;</span><span class="p">,</span> <span class="s1">&#39;tie your shoes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shirt&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your jacket&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shorts&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your jacket&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shorts&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shoes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now, sort the vertices topologically, to reveal a legal execution order.</span>
</span><span class='line'><span class="nx">toposort</span><span class="p">(</span><span class="nx">graph</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [ &#39;put on your shirt&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shorts&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your jacket&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;tie your shoes&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Sorting dependencies:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// This time, edges represent dependencies.</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">graph</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="p">[</span><span class="s1">&#39;tie your shoes&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shoes&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your jacket&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shirt&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your shoes&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shorts&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;put on your jacket&#39;</span><span class="p">,</span> <span class="s1">&#39;put on your shorts&#39;</span><span class="p">]</span>
</span><span class='line'><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="nx">toposort</span><span class="p">(</span><span class="nx">graph</span><span class="p">)</span>
</span><span class='line'><span class="c1">// [ &#39;tie your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your jacket&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shirt&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shorts&#39; ]</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now, reversing the list will reveal a legal execution order.</span>
</span><span class='line'><span class="nx">toposort</span><span class="p">(</span><span class="nx">graph</span><span class="p">).</span><span class="nx">reverse</span><span class="p">()</span>
</span><span class='line'><span class="c1">// [ &#39;put on your shorts&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shirt&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your jacket&#39;</span>
</span><span class='line'><span class="c1">// , &#39;put on your shoes&#39;</span>
</span><span class='line'><span class="c1">// , &#39;tie your shoes&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/toposort/toposort.gif" alt="topsort" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[emoji-flags]]></title>
    <link href="http://nmotw.in/emoji-flags/"/>
    <updated>2019-06-23T09:52:10+05:30</updated>
    <id>http://nmotw.in/emoji-flags</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/emoji-flags">emoji-flags</a></h1>

<blockquote><p>emoji flag symbol for a given country code.</p></blockquote>

<p><code>emoji-flags</code> is a sweet module that returns the emjoi flag for a given country code.</p>

<p><strong>Get it:</strong> <code>npm install emoji-flags</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">emojiFlags</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;emoji-flags&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// single country lookup by code</span>
</span><span class='line'><span class="nx">emojiFlags</span><span class="p">.</span><span class="nx">countryCode</span><span class="p">(</span><span class="s1">&#39;DK&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// =&gt; { &quot;code&quot;: &quot;DK&quot;, &quot;emoji&quot;: &quot;🇩🇰&quot;, ... }</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// entire dataset</span>
</span><span class='line'><span class="nx">emojiFlags</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>emoji-flags --help
</span><span class='line'>
</span><span class='line'>  <span class="k">return </span>emoji flag symbol <span class="k">for </span>country code
</span><span class='line'>
</span><span class='line'>  Example
</span><span class='line'>    emoji-flags gb
</span><span class='line'>
</span><span class='line'>    emoji-flags dk --verbose
</span><span class='line'>
</span><span class='line'>    emoji-flags
</span><span class='line'>    <span class="o">=</span>&gt; returns the entire dataset
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/emoji-flags/emoji-flags.gif" alt="emoji-flags" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wait-on]]></title>
    <link href="http://nmotw.in/wait-on/"/>
    <updated>2019-06-14T10:11:12+05:30</updated>
    <id>http://nmotw.in/wait-on</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/wait-on">wait-on</a></h1>

<blockquote><p>wait for files, ports, sockets, http(s) resources.</p></blockquote>

<p><code>wait-on</code> is a cross-platform command line and API utility which will wait for files, ports, sockets, and http(s) resources to become available (or not available using reverse mode).</p>

<p><strong>Get it:</strong> <code>npm install [-g] wait-on</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">wait</span>-on file1 <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for file1, then exec NEXT_CMD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on f1 f2 <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for both f1 and f2, the exec NEXT_CMD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http://localhost:8000/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for http 2XX HEAD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on https://myserver/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for https 2XX HEAD </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http-get://localhost:8000/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for http 2XX GET </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on https-get://myserver/foo <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for https 2XX GET </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on tcp:4000 <span class="o">&amp;&amp;</span> NEXT_CMD <span class="c"># wait for service to listen on a TCP port</span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on socket:/path/mysock <span class="c"># wait for service to listen on domain socket </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http://unix:/var/SOCKPATH:/a/foo <span class="c"># wait for http HEAD on domain socket </span>
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>-on http-get://unix:/var/SOCKPATH:/a/foo <span class="c"># wait for http GET on domain socket </span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">waitOn</span><span class="p">(</span><span class="nx">opts</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// once here, all resources are available</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">handleError</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/wait-on/wait-on.gif" alt="wait-on" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[zxcvbn]]></title>
    <link href="http://nmotw.in/zxcvbn/"/>
    <updated>2019-06-10T10:27:44+05:30</updated>
    <id>http://nmotw.in/zxcvbn</id>
    <content type="html"><![CDATA[<h1><a href="">zxcvbn</a></h1>

<blockquote><p>Password strength estimator!</p></blockquote>

<p><code>zxcvbn</code> is a uniq module through pattern matching and conservative estimation recognizes and weighs 30k common passwords helps us to estimate various parameters related to the strength of the password and also gives us the suggestion to improve the password.</p>

<p><strong>Get it:</strong> <code>npm install zxcvbn</code></p>

<p>__Sample</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">zxcvbn</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;zxcvbn&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">zxcvbn</span><span class="p">(</span><span class="s1">&#39;Tr0ub4dour&amp;3&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ^ Would return an object like below:</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'>
</span><span class='line'><span class="cm">{</span>
</span><span class='line'><span class="cm">  &quot;password&quot;: &quot;Tr0ub4dour&amp;3&quot;,</span>
</span><span class='line'><span class="cm">  &quot;guesses&quot;: 19058000,</span>
</span><span class='line'><span class="cm">  &quot;guesses_log10&quot;: 7.280077322611945,</span>
</span><span class='line'><span class="cm">  &quot;sequence&quot;: [</span>
</span><span class='line'><span class="cm">    {</span>
</span><span class='line'><span class="cm">      &quot;pattern&quot;: &quot;dictionary&quot;,</span>
</span><span class='line'><span class="cm">      &quot;i&quot;: 0,</span>
</span><span class='line'><span class="cm">      &quot;j&quot;: 9,</span>
</span><span class='line'><span class="cm">      &quot;token&quot;: &quot;Tr0ub4dour&quot;,</span>
</span><span class='line'><span class="cm">      &quot;matched_word&quot;: &quot;troubadour&quot;,</span>
</span><span class='line'><span class="cm">      &quot;rank&quot;: 11905,</span>
</span><span class='line'><span class="cm">      &quot;dictionary_name&quot;: &quot;us_tv_and_film&quot;,</span>
</span><span class='line'><span class="cm">      &quot;reversed&quot;: false,</span>
</span><span class='line'><span class="cm">      &quot;l33t&quot;: true,</span>
</span><span class='line'><span class="cm">      &quot;sub&quot;: {</span>
</span><span class='line'><span class="cm">        &quot;0&quot;: &quot;o&quot;,</span>
</span><span class='line'><span class="cm">        &quot;4&quot;: &quot;a&quot;</span>
</span><span class='line'><span class="cm">      },</span>
</span><span class='line'><span class="cm">      &quot;sub_display&quot;: &quot;0 -&gt; o, 4 -&gt; a&quot;,</span>
</span><span class='line'><span class="cm">      &quot;base_guesses&quot;: 11905,</span>
</span><span class='line'><span class="cm">      &quot;uppercase_variations&quot;: 2,</span>
</span><span class='line'><span class="cm">      &quot;l33t_variations&quot;: 4,</span>
</span><span class='line'><span class="cm">      &quot;guesses&quot;: 95240,</span>
</span><span class='line'><span class="cm">      &quot;guesses_log10&quot;: 4.978819386732842</span>
</span><span class='line'><span class="cm">    },</span>
</span><span class='line'><span class="cm">    {</span>
</span><span class='line'><span class="cm">      &quot;pattern&quot;: &quot;bruteforce&quot;,</span>
</span><span class='line'><span class="cm">      &quot;token&quot;: &quot;&amp;3&quot;,</span>
</span><span class='line'><span class="cm">      &quot;i&quot;: 10,</span>
</span><span class='line'><span class="cm">      &quot;j&quot;: 11,</span>
</span><span class='line'><span class="cm">      &quot;guesses&quot;: 100,</span>
</span><span class='line'><span class="cm">      &quot;guesses_log10&quot;: 2</span>
</span><span class='line'><span class="cm">    }</span>
</span><span class='line'><span class="cm">  ],</span>
</span><span class='line'><span class="cm">  &quot;calc_time&quot;: 2,</span>
</span><span class='line'><span class="cm">  &quot;crack_times_seconds&quot;: {</span>
</span><span class='line'><span class="cm">    &quot;online_throttling_100_per_hour&quot;: 686088000,</span>
</span><span class='line'><span class="cm">    &quot;online_no_throttling_10_per_second&quot;: 1905800,</span>
</span><span class='line'><span class="cm">    &quot;offline_slow_hashing_1e4_per_second&quot;: 1905.8,</span>
</span><span class='line'><span class="cm">    &quot;offline_fast_hashing_1e10_per_second&quot;: 0.0019058</span>
</span><span class='line'><span class="cm">  },</span>
</span><span class='line'><span class="cm">  &quot;crack_times_display&quot;: {</span>
</span><span class='line'><span class="cm">    &quot;online_throttling_100_per_hour&quot;: &quot;21 years&quot;,</span>
</span><span class='line'><span class="cm">    &quot;online_no_throttling_10_per_second&quot;: &quot;22 days&quot;,</span>
</span><span class='line'><span class="cm">    &quot;offline_slow_hashing_1e4_per_second&quot;: &quot;32 minutes&quot;,</span>
</span><span class='line'><span class="cm">    &quot;offline_fast_hashing_1e10_per_second&quot;: &quot;less than a second&quot;</span>
</span><span class='line'><span class="cm">  },</span>
</span><span class='line'><span class="cm">  &quot;score&quot;: 2,</span>
</span><span class='line'><span class="cm">  &quot;feedback&quot;: {</span>
</span><span class='line'><span class="cm">    &quot;warning&quot;: &quot;&quot;,</span>
</span><span class='line'><span class="cm">    &quot;suggestions&quot;: [</span>
</span><span class='line'><span class="cm">      &quot;Add another word or two. Uncommon words are better.&quot;,</span>
</span><span class='line'><span class="cm">      &quot;Capitalization doesn&#39;t help very much&quot;,</span>
</span><span class='line'><span class="cm">      &quot;Predictable substitutions like &#39;@&#39; instead of &#39;a&#39; don&#39;t help very much&quot;</span>
</span><span class='line'><span class="cm">    ]</span>
</span><span class='line'><span class="cm">  }</span>
</span><span class='line'><span class="cm">}</span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/zxcvbn/zxcvbn.gif" alt="zxcvbn" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[store]]></title>
    <link href="http://nmotw.in/store/"/>
    <updated>2019-06-02T17:01:14+05:30</updated>
    <id>http://nmotw.in/store</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/store">store</a></h1>

<blockquote><p>Cross-browser storage for all use cases!</p></blockquote>

<p><code>store</code> provides basic <code>key/value</code> storage functionality (<code>get/set/remove/each</code>) as well as a rich set of plug-in <a href="https://github.com/marcuswestin/store.js#user-content-storages">storages</a> and extra functionality.</p>

<p><strong>Get it:</strong> <code>npm install store</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;store&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;site&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span><span class="s1">&#39;nmotw.in&#39;</span> <span class="p">})</span>
</span><span class='line'><span class="nx">store</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">).</span><span class="nx">name</span> <span class="o">==</span> <span class="s1">&#39;nmotw.in&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Example custom storage</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;myStorage&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">read</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">write</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">each</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">},</span>
</span><span class='line'>  <span class="nx">clearAll</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">store</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;store&#39;</span><span class="p">).</span><span class="nx">createStore</span><span class="p">(</span><span class="nx">storage</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>One could use <code>memoryStorage</code> or <code>localStorage</code>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/store/store.gif" alt="store" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tornis]]></title>
    <link href="http://nmotw.in/tornis/"/>
    <updated>2019-05-25T21:08:12+05:30</updated>
    <id>http://nmotw.in/tornis</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/tornis">tornis</a></h1>

<blockquote><p>Store for your viewport.</p></blockquote>

<p><code>tornis</code> a cheeky module with just 300 lines of code, enables us to track:</p>

<ul>
<li>Mouse position</li>
<li>Mouse cursor velocity</li>
<li>Viewport size</li>
<li>Scroll position</li>
<li>Scroll velocity</li>
</ul>


<p>Device orientation is under contruction, this can be thought as a store to your viewport, with state like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nx">scroll</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">changed</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">left</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">right</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">top</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">bottom</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">velocity</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">size</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">changed</span><span class="o">:</span> <span class="nb">Boolean</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">docY</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">mouse</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">changed</span><span class="o">:</span> <span class="nb">Boolean</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="nx">velocity</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">x</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>      <span class="nx">y</span><span class="o">:</span> <span class="nx">Integer</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install tornis</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// From robb0wen/tornis</span>
</span><span class='line'><span class="c1">// import the Tornis store functions</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">watchViewport</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">unwatchViewport</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">getViewportState</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;tornis&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define a watched function, to be run on each update</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">updateValues</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">size</span><span class="p">,</span> <span class="nx">scroll</span><span class="p">,</span> <span class="nx">mouse</span><span class="p">,</span> <span class="nx">orientation</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">size</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something related to size</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">scroll</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something related to scroll position or velocity</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">mouse</span><span class="p">.</span><span class="nx">changed</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// do something related to mouse position or velocity</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// bind the watch function</span>
</span><span class='line'><span class="c1">// By default this will run the function as it is added to the watch list</span>
</span><span class='line'><span class="nx">watchViewport</span><span class="p">(</span><span class="nx">updateValues</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// to bind the watch function without calling it</span>
</span><span class='line'><span class="nx">watchViewport</span><span class="p">(</span><span class="nx">updateValues</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// when you want to stop updating</span>
</span><span class='line'><span class="nx">unwatchViewport</span><span class="p">(</span><span class="nx">updateValues</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// to get a snapshot of the current viewport state</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">state</span> <span class="o">=</span> <span class="nx">getViewportState</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/tornis/tornis.gif" alt="tornis" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dinoql]]></title>
    <link href="http://nmotw.in/dinoql/"/>
    <updated>2019-05-18T12:27:30+05:30</updated>
    <id>http://nmotw.in/dinoql</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/dinoql">dinoql</a></h1>

<blockquote><p>Query JS objects in GraphQL style!</p></blockquote>

<p><code>dinoql</code> provides GraphQL syntax for safe access of objects with aliases support, default resolvers fragments, variables and caching support and is highly customizable.</p>

<p><strong>Get it:</strong> <code>npm install dinoql</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">dinoql</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;dinoql&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">users</span><span class="o">:</span> <span class="p">[{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Victor Igor&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;100&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">age</span><span class="o">:</span> <span class="mi">18</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Paul Gilbert&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;200&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">age</span><span class="o">:</span> <span class="mi">35</span>
</span><span class='line'>  <span class="p">}],</span>  
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">dinoql</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span><span class="err">`</span>
</span><span class='line'><span class="nx">users</span><span class="p">(</span><span class="nx">id</span><span class="o">:</span> <span class="s2">&quot;200&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="err">`</span>
</span><span class='line'><span class="c1">// ^^ {users: [{name: &#39;Paul Gilbert&#39;}]}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/dinoql/dinoql.gif" alt="dinoql-demo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fluture]]></title>
    <link href="http://nmotw.in/fluture/"/>
    <updated>2019-05-12T02:35:08+05:30</updated>
    <id>http://nmotw.in/fluture</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fluture">fluture</a></h1>

<blockquote><p>🦋 Fantasy Land compliant (monadic) alternative to Promises.</p></blockquote>

<p>Fluture offers a control structure similar to Promises, Tasks, Deferreds, and what-have-you, the lib just terms it <code>Futures</code>.</p>

<p><code>Futures</code> represent the value arising from the success or failure of an asynchronous operation they are lazy and adhere to the monadic interface.</p>

<p><strong>Feature comparsion of fluture like libs:</strong></p>

<p><img src="http://nmotw.in/images/fluture/fluture-cmp.png" alt="" /></p>

<p><strong>Get it:</strong> <code>npm install --save fluture</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">readFile</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;fs&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">node</span><span class="p">,</span> <span class="nx">encase</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;fluture&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">getPackageName</span> <span class="o">=</span> <span class="nx">file</span> <span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">node</span><span class="p">(</span><span class="nx">done</span> <span class="o">=&gt;</span> <span class="nx">readFile</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s1">&#39;utf8&#39;</span><span class="p">,</span> <span class="nx">done</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">chain</span><span class="p">(</span><span class="nx">encase</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">))</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">pkg</span> <span class="o">=&gt;</span> <span class="nx">pkg</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getPackageName</span><span class="p">(</span><span class="s1">&#39;package.json&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">fork</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">,</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">);</span>
</span><span class='line'><span class="c1">//&gt; &quot;fluture&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fluture/fluture.gif" alt="fluture" /></p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sql.js]]></title>
    <link href="http://nmotw.in/sql.js/"/>
    <updated>2019-05-04T10:25:55+05:30</updated>
    <id>http://nmotw.in/sql.js</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sql.js">sql.js</a></h1>

<blockquote><p>SQLite compiled to javascript</p></blockquote>

<p><code>sql.js</code> is a port of <code>SQLite</code> to <code>Webassembly</code>, by compiling the SQLite C code with Emscripten.</p>

<p>There are no C bindings or node-gyp compilation here, sql.js is a simple javascript file, that can be used like any traditional javascript library!</p>

<p><strong>Get it:</strong> <code>npm install sql.js</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">DROP</span> <span class="nx">TABLE</span> <span class="nx">IF</span> <span class="nx">EXISTS</span> <span class="nx">employees</span><span class="p">;</span>
</span><span class='line'><span class="nx">CREATE</span> <span class="nx">TABLE</span> <span class="nx">employees</span><span class="p">(</span> <span class="nx">id</span> <span class="nx">integer</span><span class="p">,</span>  <span class="nx">name</span> <span class="nx">text</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">designation</span> <span class="nx">text</span><span class="p">,</span>     <span class="nx">manager</span> <span class="nx">integer</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">hired_on</span>    <span class="nx">date</span><span class="p">,</span>     <span class="nx">salary</span>  <span class="nx">integer</span><span class="p">,</span>
</span><span class='line'>                        <span class="nx">commission</span>  <span class="kr">float</span><span class="p">,</span>    <span class="nx">dept</span>    <span class="nx">integer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nx">employees</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;JOHNSON&#39;</span><span class="p">,</span><span class="s1">&#39;ADMIN&#39;</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="s1">&#39;1990-12-17&#39;</span><span class="p">,</span><span class="mi">18000</span><span class="p">,</span><span class="nx">NULL</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span>
</span><span class='line'><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nx">employees</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;HARDING&#39;</span><span class="p">,</span><span class="s1">&#39;MANAGER&#39;</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="s1">&#39;1998-02-02&#39;</span><span class="p">,</span><span class="mi">52000</span><span class="p">,</span><span class="mi">300</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nx">employees</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="s1">&#39;TAFT&#39;</span><span class="p">,</span><span class="s1">&#39;SALES I&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;1996-01-02&#39;</span><span class="p">,</span><span class="mi">25000</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'><span class="nx">INSERT</span> <span class="nx">INTO</span> <span class="nx">employees</span> <span class="nx">VALUES</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="s1">&#39;HOOVER&#39;</span><span class="p">,</span><span class="s1">&#39;SALES I&#39;</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;1990-04-02&#39;</span><span class="p">,</span><span class="mi">27000</span><span class="p">,</span><span class="nx">NULL</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nx">SELECT</span> <span class="nx">name</span><span class="p">,</span><span class="nx">hired_on</span> <span class="nx">FROM</span> <span class="nx">employees</span> <span class="nx">ORDER</span> <span class="nx">BY</span> <span class="nx">hired_on</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Would output something like:</p>

<table>
<thead>
<tr>
<th></th>
<th>name</th>
<th>hired_on</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td>HOOVER</td>
<td>1990-04-02|</td>
</tr>
<tr>
<td></td>
<td>JOHNSON</td>
<td>1990-12-17|</td>
</tr>
<tr>
<td></td>
<td>TAFT</td>
<td>1996-01-02|</td>
</tr>
<tr>
<td></td>
<td>HARDING</td>
<td>1998-02-02|</td>
</tr>
</tbody>
</table>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/sql.js/sql.js.gif" alt="sql.js" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[heresy]]></title>
    <link href="http://nmotw.in/heresy/"/>
    <updated>2019-04-28T15:42:31+05:30</updated>
    <id>http://nmotw.in/heresy</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/heresy">heresey</a></h1>

<blockquote><p>React like Custom Elements.</p></blockquote>

<p><code>heresey</code> makes good use of <code>domtagger</code>, <code>hyperHTML</code>, <code>smartDiff</code> and <code>lighterhtml</code> to provide React like feeling to Custom Elements.</p>

<p>Mail gaols for <code>heresey</code> :</p>

<ul>
<li>declared elements are the instance you'd expect (no virtual, no facade)</li>
<li>declared elements can be of any kind (table, tr, select, option, ...)</li>
<li>any attribute change, or node lifecycle, can be tracked via VQ API (no componentDidMount and friends)</li>
<li>no redundant dom nodes, no ghost fragments, a clean as possible output</li>
</ul>


<p><strong>Get it:</strong> <code>npm install heresey</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">define</span><span class="p">,</span> <span class="nx">html</span><span class="p">,</span> <span class="nx">render</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;heresy&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">MyButton</span> <span class="kr">extends</span> <span class="nx">HTMLButtonElement</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// the only mandatory static field</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">get</span> <span class="nx">tagName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;button&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// (optional) intercepts some attribute (any value)</span>
</span><span class='line'>  <span class="nx">set</span> <span class="nx">props</span><span class="p">(</span><span class="nx">props</span><span class="p">)</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">_props</span> <span class="o">=</span> <span class="nx">props</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="nx">get</span> <span class="nx">props</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_props</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// (optional) render once connected</span>
</span><span class='line'>  <span class="nx">connectedCallback</span><span class="p">()</span> <span class="p">{</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// (optional) populate this button content</span>
</span><span class='line'>  <span class="c1">//            (kinda useless with void elements such img, input, ...)</span>
</span><span class='line'>  <span class="nx">render</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// this.html or this.svg are provided automatically</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">html</span><span class="err">`</span><span class="nx">Click</span> <span class="nx">$</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">!</span><span class="err">`</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// define the custom element (class name mandatory too)</span>
</span><span class='line'><span class="nx">define</span><span class="p">(</span><span class="nx">MyButton</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// populate some node</span>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">html</span><span class="err">`</span><span class="o">&lt;</span><span class="nx">MyButton</span> <span class="nx">props</span><span class="o">=</span><span class="nx">$</span><span class="p"></span> <span class="o">/&gt;</span><span class="err">`</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span><span class="nx">define</span><span class="p">,</span> <span class="nx">html</span><span class="p">,</span> <span class="nx">render</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;heresy&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a div</span>
</span><span class='line'><span class="nx">define</span><span class="p">(</span><span class="kr">class</span> <span class="nx">Div</span> <span class="kr">extends</span> <span class="nx">HTMLDivElement</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">get</span> <span class="nx">tagName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;div&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a paragraph</span>
</span><span class='line'><span class="nx">define</span><span class="p">(</span><span class="kr">class</span> <span class="nx">P</span> <span class="kr">extends</span> <span class="nx">HTMLParagraphElement</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">get</span> <span class="nx">tagName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;p&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// a h1</span>
</span><span class='line'><span class="nx">define</span><span class="p">(</span><span class="kr">class</span> <span class="nx">H1</span> <span class="kr">extends</span> <span class="nx">HTMLHeadingElement</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">get</span> <span class="nx">tagName</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="s1">&#39;h1&#39;</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">render</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">html</span><span class="err">`</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">Div</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">H1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">there</span><span class="o">&lt;</span><span class="err">/H1&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">P</span><span class="o">&gt;</span><span class="nx">This</span> <span class="nx">is</span> <span class="nx">how</span> <span class="nx">custom</span> <span class="nx">elements</span> <span class="nx">look</span> <span class="nx">via</span> <span class="nx">heresy</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/P&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">P</span><span class="o">&gt;</span><span class="nx">Isn</span><span class="err">&#39;</span><span class="nx">t</span> <span class="k">this</span> <span class="nx">awesome</span><span class="o">?&lt;</span><span class="err">/P&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/Div&gt;</span>
</span><span class='line'><span class="err">`</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/heresy/heresy.gif" alt="heresy.gif" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fetch-mock]]></title>
    <link href="http://nmotw.in/fetch-mock/"/>
    <updated>2019-04-21T11:45:27+05:30</updated>
    <id>http://nmotw.in/fetch-mock</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fetch-mock">fetch-mock</a></h1>

<blockquote><p>Mock HTTP requests with fetch.</p></blockquote>

<p><code>fetch-mock</code> allows mocking HTTP requests made using <code>fetch</code> or a library imitating its api, such as <code>node-fetch</code> or <code>fetch-ponyfill</code>, works across, browser and node.</p>

<p><strong>Get it:</strong> <code>npm install fetch-mock</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">fetchMock</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fetch-mock&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fetchMock</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">ok</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/fetch-mock/fetch-mock.gif" alt="fetch-mock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[glob-to-regexp]]></title>
    <link href="http://nmotw.in/glob-to-regexp/"/>
    <updated>2019-04-14T00:11:35+05:30</updated>
    <id>http://nmotw.in/glob-to-regexp</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/glob-to-regexp">glob-to-regexp</a></h1>

<blockquote><p><code>*-wildcard</code> style glob to R.E</p></blockquote>

<p><code>glob-to-regexp</code> helps us in converting *-wildcard style glob to RE, as in <code>"*.min.js"</code> to <code>/^.*\.min\.js$/</code>.</p>

<p><strong>Get it:</strong> <code>npm install glob-to-regexp</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">globToRegExp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;glob-to-regexp&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;p*uck&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;pot luck&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;pluck&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;puck&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;*.min.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/jquery.min.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/jquery.min.js.map&quot;</span><span class="p">);</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;*/www/*.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/app.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/lib/factory-proxy-model-observer.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Extended globs</span>
</span><span class='line'><span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;*/www/{*.js,*.html}&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/app.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/index.html&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/glob-to-regexp/glob-to-regexp.gif" alt="glob-to-regexp" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[osenv]]></title>
    <link href="http://nmotw.in/osenv/"/>
    <updated>2019-04-06T16:14:07+05:30</updated>
    <id>http://nmotw.in/osenv</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/osenv">osenv</a></h1>

<blockquote><p>Look up environment settings.</p></blockquote>

<p><code>osenv</code> a tiny util that which has about <code>6,294,826</code> weekly downloads on npm, helps us in fetching the required <code>evn</code> setting from <code>process.env</code> acorss OS.</p>

<p><strong>Get it:</strong> <code>npm installl osenv</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;osenv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">prompt</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">hostname</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">tmpdir</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">home</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">path</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">editor</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">shell</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">osenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;osenv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">osenv</span><span class="p">.</span><span class="nx">path</span><span class="p">()</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">osenv</span><span class="p">.</span><span class="nx">user</span><span class="p">()</span>
</span><span class='line'><span class="c1">// etc.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Some things are not reliably in the env, and have a fallback command:</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">osenv</span><span class="p">.</span><span class="nx">hostname</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">er</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">h</span> <span class="o">=</span> <span class="nx">hostname</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// This will still cause it to be memoized, so calling osenv.hostname()</span>
</span><span class='line'><span class="c1">// is now an immediate operation.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You can always send a cb, which will get called in the nextTick</span>
</span><span class='line'><span class="c1">// if it&#39;s been memoized, or wait for the fallback data if it wasn&#39;t</span>
</span><span class='line'><span class="c1">// found in the environment.</span>
</span><span class='line'><span class="nx">osenv</span><span class="p">.</span><span class="nx">hostname</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">er</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;error looking up hostname&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this machine calls itself %s&#39;</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/osenv/osenv.gif" alt="osenv" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eshost-cli]]></title>
    <link href="http://nmotw.in/eshost-cli/"/>
    <updated>2019-03-30T11:37:02+05:30</updated>
    <id>http://nmotw.in/eshost-cli</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/bterlson/eshost-cli">eshost-cli</a></h1>

<blockquote><p>Run ECMAScript code uniformly across any ECMAScript host.</p></blockquote>

<p><code>eshost-cli</code> makes it easy to run and compare <code>ECMAScript</code> code uniformly across a number of runtimes. Support for runtimes is provided by the library <code>eshost</code>.</p>

<p><strong>Get it:</strong> <code>npm install -g eshost-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; eshost -e <span class="s1">&#39;Date.parse(&quot;1 Octopus 2018&quot;)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#### Chakra</span>
</span><span class='line'>NaN
</span><span class='line'>
</span><span class='line'><span class="c">#### JavaScriptCore</span>
</span><span class='line'>1538332200000
</span><span class='line'>
</span><span class='line'><span class="c">#### SpiderMonkey</span>
</span><span class='line'>NaN
</span><span class='line'>
</span><span class='line'><span class="c">#### V8</span>
</span><span class='line'>1538332200000
</span><span class='line'>
</span><span class='line'><span class="c">#### V8 --harmony</span>
</span><span class='line'>1538332200000
</span><span class='line'>
</span><span class='line'><span class="c">#### XS</span>
</span><span class='line'>NaN
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; eshost --help
</span><span class='line'>Usage: eshost <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>input-file<span class="o">]</span>
</span><span class='line'>       eshost <span class="o">[</span>options<span class="o">]</span> -e <span class="s2">&quot;input-script&quot;</span>
</span><span class='line'>       eshost --list
</span><span class='line'>       eshost --add <span class="o">[</span>host name<span class="o">]</span> <span class="o">[</span>host <span class="nb">type</span><span class="o">]</span> &lt;host path&gt; --args &lt;host arguments&gt;
</span><span class='line'>       eshost --delete <span class="o">[</span>host name<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -e, --eval        <span class="nb">eval </span>an expression and print the result
</span><span class='line'>  -x, --execute     execute a multi-statement program
</span><span class='line'>  -h, --host        <span class="k">select </span>hosts by name <span class="o">(</span>glob syntax is supported as well<span class="o">)</span>
</span><span class='line'>  -g, --hostGroup   <span class="k">select </span>host groups by host <span class="nb">type</span>
</span><span class='line'>  --tags            <span class="k">select </span>hosts by tag
</span><span class='line'>  -c, --config      <span class="k">select </span>a config file
</span><span class='line'>  --table, -t       output in a table                                  <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --coalesce, -s    coalesce like output into a single entry           <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --showSource, -i  show input <span class="nb">source</span>                                  <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --unanimous, -u   If all engines agree, <span class="nb">exit</span><span class="o">(</span>0<span class="o">)</span> with no output, otherwise
</span><span class='line'>                    print and <span class="nb">exit</span><span class="o">(</span>1<span class="o">)</span>; implies --coalesce              <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --add             add a host
</span><span class='line'>  --edit            edit a host
</span><span class='line'>  --delete          delete a host
</span><span class='line'>  --args            <span class="nb">set </span>arguments <span class="k">for </span>a host entry <span class="o">(</span>use with --add<span class="o">)</span>
</span><span class='line'>  --configure-jsvu  Configure jsvu hosts in the config                 <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --jsvu-prefix     <span class="o">[</span>OPTIONAL<span class="o">]</span> Set the prefix of the configured hosts. If prefix
</span><span class='line'>                    is <span class="s2">&quot;jsvu&quot;</span> <span class="k">then </span>hosts will be configured as, e.g., <span class="s2">&quot;jsvu-sm&quot;</span>.
</span><span class='line'>                    By default, no prefix <span class="o">(</span>e.g. <span class="s2">&quot;sm&quot;</span><span class="o">)</span>. Use this flag with
</span><span class='line'>                    --configure-jsvu.
</span><span class='line'>  --jsvu-root       <span class="o">[</span>OPTIONAL<span class="o">]</span> Use this path containing the .jsvu folder <span class="o">(</span>use
</span><span class='line'>                    this option <span class="k">if</span> .jsvu is located somewhere other than the
</span><span class='line'>                    home directory<span class="o">)</span>. Use this flag with --configure-jsvu.
</span><span class='line'>  --help            Show <span class="nb">help</span>                                          <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  -a, --async       <span class="nb">wait </span><span class="k">for </span>realm destruction before reporting results<span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  eshost --list
</span><span class='line'>  eshost --add d8 d8 path/to/d8 --args
</span><span class='line'>  <span class="s2">&quot;--harmony&quot;</span>
</span><span class='line'>  eshost --add ch ch path/to/ch --tags
</span><span class='line'>  latest
</span><span class='line'>  eshost --add ch ch path/to/ch --tags
</span><span class='line'>  latest,greatest
</span><span class='line'>  eshost --configure-jsvu
</span><span class='line'>  eshost --configure-jsvu --jsvu-prefix
</span><span class='line'>  jsvu
</span><span class='line'>  eshost test.js
</span><span class='line'>  eshost -e <span class="s2">&quot;1+1&quot;</span>
</span><span class='line'>  eshost -its -x <span class="s2">&quot;for (let i=0; i&lt;10; ++i)</span>
</span><span class='line'><span class="s2">  { print(i) }&quot;</span>
</span><span class='line'>  eshost -h d8 -h chakra test.js
</span><span class='line'>  eshost -h d8,sm test.js
</span><span class='line'>  eshost -g node,ch test.js
</span><span class='line'>  eshost -h d8 -g node test.js
</span><span class='line'>  eshost -h ch-*,node test.js
</span><span class='line'>  eshost -h ch-1.?.? test.js
</span><span class='line'>  eshost --tags latest test.js
</span><span class='line'>  eshost --unanimous test.js
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/eshost-cli/eshost-cli.gif" alt="eshost-cli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[carbon-now-cli]]></title>
    <link href="http://nmotw.in/carbon-now-cli/"/>
    <updated>2019-03-22T22:28:38+05:30</updated>
    <id>http://nmotw.in/carbon-now-cli</id>
    <content type="html"><![CDATA[<h1><a href="">carbon-now-cli</a></h1>

<blockquote><p>carbon code images from CLI.</p></blockquote>

<p><code>carbon-now-cli</code> is a CLI interface for 🎨 Beautiful images of your code — from right inside your terminal!</p>

<p><strong>It also porivdes the below functionality:</strong></p>

<ul>
<li>🖼 Downloads the <strong>real</strong>, <strong>high-quality</strong> image (<em>no DOM screenshots</em>)</li>
<li>✨ Detects file type <strong>automatically</strong></li>
<li>🗂 Supports <strong>all</strong> file extensions supported by <a href="https://carbon.now.sh">carbon.now.sh</a> and <a href="https://github.com/mixn/carbon-now-cli/blob/master/src/helpers/language-map.json">more</a></li>
<li>⚡️ Interactive mode via <code>--interactive</code></li>
<li>🎒 Presets : save and reuse your favorite settings</li>
<li>🖱 Selective highlighting <code>--start</code> and <code>--end</code></li>
<li>📎 Copies image to clipboard via <code>--copy</code> (<strong>cross-OS</strong> 😱)</li>
<li>📚 Accepts file, <code>stdin</code> or clipboard content as input.</li>
<li>🐶 Displays image directly in supported terminals</li>
<li>⏱ Reports each step and therefore <em>shortens the wait</em></li>
<li>👀 Saves to given location or only opens in browser for manual finish.</li>
<li>🌈 Supports saving as <code>.png</code> or <code>.svg</code> — just like Carbon</li>
<li>📏 Supports <code>2x</code>, <code>4x</code> or <code>1x</code> resolutions — just like Carbon</li>
<li>✅ Tested</li>
<li>⛏ Maintained</li>
</ul>


<p><strong>Get it:</strong> <code>npm i -g carbon-now-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>carbon-now --help
</span><span class='line'>
</span><span class='line'>Beautiful images of your code — from right inside your terminal.
</span><span class='line'>
</span><span class='line'>Usage
</span><span class='line'>  <span class="nv">$ </span>carbon-now &lt;file&gt;
</span><span class='line'>  <span class="nv">$ </span>pbpaste | carbon-now
</span><span class='line'>  <span class="nv">$ </span>carbon-now --from-clipboard
</span><span class='line'>
</span><span class='line'>Options
</span><span class='line'>  -s, --start          Starting line of &lt;file&gt;
</span><span class='line'>  -e, --end            Ending line of &lt;file&gt;
</span><span class='line'>  -i, --interactive    Interactive mode
</span><span class='line'>  -l, --location       Image save location, default: cwd
</span><span class='line'>  -t, --target         Image name, default: original-hash.<span class="o">{</span>png|svg<span class="o">}</span>
</span><span class='line'>  -o, --open           Open in browser instead of saving
</span><span class='line'>  -c, --copy           Copy image to clipboard
</span><span class='line'>  -p, --preset         Use a saved preset
</span><span class='line'>  -h, --headless       Use only non-experimental Puppeteer features
</span><span class='line'>  --config             Use a different, <span class="nb">local </span>config <span class="o">(</span><span class="nb">read</span>-only<span class="o">)</span>
</span><span class='line'>  --from-clipboard     Read input from clipboard instead of file
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/carbon-now-cli/carbon-now-cli.gif" alt="carbon-now-cli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react-window]]></title>
    <link href="http://nmotw.in/react-window/"/>
    <updated>2019-03-16T15:14:26+05:30</updated>
    <id>http://nmotw.in/react-window</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/react-window">react-window</a></h1>

<blockquote><p>React components for efficiently rendering large lists and tabular data.</p></blockquote>

<p>From the horse's mouth, what is <code>react-window</code>?</p>

<blockquote><p>react-window is a complete rewrite of react-virtualized. I didn't try to solve as many problems or support as many use cases. Instead I focused on making the package smaller1 and faster. I also put a lot of thought into making the API (and documentation) as beginner-friendly as possible (with the caveat that windowing is still kind of an advanced use case).</p></blockquote>

<p>The compoents react-window provides:</p>

<ul>
<li>FixedSizeList</li>
<li>VariableSizeList</li>
<li>FixedSizeGrid</li>
<li>VariableSizeGrid</li>
</ul>


<p><strong>Get it:</strong> <code>npm install react-window</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">FixedSizeList</span> <span class="nx">as</span> <span class="nx">List</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-window&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Column</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">style</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">style</span><span class="p">}</span><span class="o">&gt;</span><span class="err">عمود</span> <span class="p">{</span><span class="nx">index</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Example</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">List</span>
</span><span class='line'>    <span class="nx">direction</span><span class="o">=</span><span class="s2">&quot;rtl&quot;</span>
</span><span class='line'>    <span class="nx">height</span><span class="o">=</span><span class="p">{</span><span class="mi">75</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">itemCount</span><span class="o">=</span><span class="p">{</span><span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">itemSize</span><span class="o">=</span><span class="p">{</span><span class="mi">100</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">layout</span><span class="o">=</span><span class="s2">&quot;horizontal&quot;</span>
</span><span class='line'>    <span class="nx">width</span><span class="o">=</span><span class="p">{</span><span class="mi">300</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">Column</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/List&gt;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/react-window/react-window.gif" alt="react-window" /></p>

<p>P.S: Don't miss to checkout the <a href="https://react-window.now.sh/">demos</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[image-promise]]></title>
    <link href="http://nmotw.in/image-promise/"/>
    <updated>2019-03-08T15:00:54+05:30</updated>
    <id>http://nmotw.in/image-promise</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/image-promise">image-promise</a></h1>

<blockquote><p>Promisfied image loading!</p></blockquote>

<p>Load one or more images, return a promise that resolves if the image loads or rejects in case of an error.</p>

<p><strong>Get it:</strong> <code>npm install image-pormise</code></p>

<p><strong>Sample code:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">images</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;cat.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;dog.jpg&#39;</span><span class="p">];</span>
</span><span class='line'><span class="c1">// var images = $(&#39;img&#39;); // it can also be a jQuery object</span>
</span><span class='line'><span class="c1">// var images = document.querySelectorAll(&#39;img&#39;); // or a NodeList</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loadImage</span><span class="p">(</span><span class="nx">images</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">allImgs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allImgs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="s1">&#39;images loaded!&#39;</span><span class="p">,</span> <span class="nx">allImgs</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;One or more images have failed to load :(&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">errored</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;But these loaded fine:&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">loaded</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;3&quot;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">imgs</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ImageLoader</span><span class="p">(</span><span class="nx">images</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">errored</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// for CORS enabled imgs</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">image</span> <span class="o">=</span> <span class="s1">&#39;http://catpics.com/cat.jpg&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loadImage</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="p">{</span> <span class="nx">crossorigin</span><span class="o">:</span> <span class="s1">&#39;anonymous&#39;</span> <span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now you can do this</span>
</span><span class='line'>  <span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s1">&#39;image/png&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Image failed to load :(&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/image-promise/image-promise.gif" alt="image-promise" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scroll-into-view-if-needed]]></title>
    <link href="http://nmotw.in/scroll-into-view-if-needed/"/>
    <updated>2019-03-02T23:25:04+05:30</updated>
    <id>http://nmotw.in/scroll-into-view-if-needed</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/scroll-into-view-if-needed">scroll-init-view-if-needed</a></h1>

<blockquote><p>Element.scrollIntoView ponyfills for things like "if-needed" and "smooth".</p></blockquote>

<p><img src="http://nmotw.in/images/scroll-into-view-if-needed/scroll-into-view-if-needed.png" alt="scroll-into-view-if-needed" /></p>

<p>This is a ponyfill for <code>Element.scrollIntoViewIfNeeded</code>. Since then the CSS working group have decided to implement its features in <code>Element.scrollIntoView</code> as the option <code>scrollMode: "if-needed"</code>. Thus this library got rewritten to implement that spec instead of the soon to be deprecated one.</p>

<p>Don't miss the <a href="https://scroll-into-view-if-needed.netlify.com">Demo</a>.</p>

<p><strong>Get it:</strong> <code>npm install scroll-into-view-if-needed</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// es6 import</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">scrollIntoView</span> <span class="nx">from</span> <span class="s1">&#39;scroll-into-view-if-needed&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hero&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scrollMode</span><span class="o">:</span> <span class="s1">&#39;if-needed&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">block</span><span class="o">:</span> <span class="s1">&#39;nearest&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">inline</span><span class="o">:</span> <span class="s1">&#39;nearest&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span> <span class="nx">block</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="nx">inline</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// scrollMode is &quot;always&quot; by default</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// smooth scroll if the browser supports it and if the element isn&#39;t visible</span>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span> <span class="nx">behavior</span><span class="o">:</span> <span class="s1">&#39;smooth&#39;</span><span class="p">,</span> <span class="nx">scrollMode</span><span class="o">:</span> <span class="s1">&#39;if-needed&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/scroll-into-view-if-needed/scroll-into-view-if-needed.gif" alt="scroll-into-view-if-needed" /></p>
]]></content>
  </entry>
  
</feed>
