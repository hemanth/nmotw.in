<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2019-04-21T12:34:05+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[fetch-mock]]></title>
    <link href="http://nmotw.in/fetch-mock/"/>
    <updated>2019-04-21T11:45:27+05:30</updated>
    <id>http://nmotw.in/fetch-mock</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fetch-mock">fetch-mock</a></h1>

<blockquote><p>Mock HTTP requests with fetch.</p></blockquote>

<p><code>fetch-mock</code> allows mocking HTTP requests made using <code>fetch</code> or a library imitating its api, such as <code>node-fetch</code> or <code>fetch-ponyfill</code>, works across, browser and node.</p>

<p><strong>Get it:</strong> <code>npm install fetch-mock</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">fetchMock</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;fetch-mock&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">fetchMock</span><span class="p">.</span><span class="nx">mock</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">,</span> <span class="mi">200</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">res</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="s1">&#39;http://example.com&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">ok</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/fetch-mock/fetch-mock.gif" alt="fetch-mock" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[glob-to-regexp]]></title>
    <link href="http://nmotw.in/glob-to-regexp/"/>
    <updated>2019-04-14T00:11:35+05:30</updated>
    <id>http://nmotw.in/glob-to-regexp</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/glob-to-regexp">glob-to-regexp</a></h1>

<blockquote><p><code>*-wildcard</code> style glob to R.E</p></blockquote>

<p><code>glob-to-regexp</code> helps us in converting *-wildcard style glob to RE, as in <code>"*.min.js"</code> to <code>/^.*\.min\.js$/</code>.</p>

<p><strong>Get it:</strong> <code>npm install glob-to-regexp</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">globToRegExp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;glob-to-regexp&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">let</span> <span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;p*uck&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;pot luck&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;pluck&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;puck&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;*.min.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/jquery.min.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/jquery.min.js.map&quot;</span><span class="p">);</span> <span class="c1">// false</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;*/www/*.js&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/app.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/lib/factory-proxy-model-observer.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Extended globs</span>
</span><span class='line'><span class="nx">re</span> <span class="o">=</span> <span class="nx">globToRegExp</span><span class="p">(</span><span class="s2">&quot;*/www/{*.js,*.html}&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="nx">extended</span><span class="o">:</span> <span class="kc">true</span> <span class="p">});</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/app.js&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">re</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;http://example.com/www/index.html&quot;</span><span class="p">);</span> <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/glob-to-regexp/glob-to-regexp.gif" alt="glob-to-regexp" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[osenv]]></title>
    <link href="http://nmotw.in/osenv/"/>
    <updated>2019-04-06T16:14:07+05:30</updated>
    <id>http://nmotw.in/osenv</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/osenv">osenv</a></h1>

<blockquote><p>Look up environment settings.</p></blockquote>

<p><code>osenv</code> a tiny util that which has about <code>6,294,826</code> weekly downloads on npm, helps us in fetching the required <code>evn</code> setting from <code>process.env</code> acorss OS.</p>

<p><strong>Get it:</strong> <code>npm installl osenv</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">&gt;</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;osenv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="nx">user</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">prompt</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">hostname</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">tmpdir</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">home</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">path</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">editor</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">],</span>
</span><span class='line'>  <span class="nx">shell</span><span class="o">:</span> <span class="p">[</span><span class="nb">Function</span><span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">osenv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;osenv&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">osenv</span><span class="p">.</span><span class="nx">path</span><span class="p">()</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">osenv</span><span class="p">.</span><span class="nx">user</span><span class="p">()</span>
</span><span class='line'><span class="c1">// etc.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Some things are not reliably in the env, and have a fallback command:</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">osenv</span><span class="p">.</span><span class="nx">hostname</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">er</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">h</span> <span class="o">=</span> <span class="nx">hostname</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="c1">// This will still cause it to be memoized, so calling osenv.hostname()</span>
</span><span class='line'><span class="c1">// is now an immediate operation.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You can always send a cb, which will get called in the nextTick</span>
</span><span class='line'><span class="c1">// if it&#39;s been memoized, or wait for the fallback data if it wasn&#39;t</span>
</span><span class='line'><span class="c1">// found in the environment.</span>
</span><span class='line'><span class="nx">osenv</span><span class="p">.</span><span class="nx">hostname</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">er</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">er</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;error looking up hostname&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;this machine calls itself %s&#39;</span><span class="p">,</span> <span class="nx">hostname</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/osenv/osenv.gif" alt="osenv" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eshost-cli]]></title>
    <link href="http://nmotw.in/eshost-cli/"/>
    <updated>2019-03-30T11:37:02+05:30</updated>
    <id>http://nmotw.in/eshost-cli</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/bterlson/eshost-cli">eshost-cli</a></h1>

<blockquote><p>Run ECMAScript code uniformly across any ECMAScript host.</p></blockquote>

<p><code>eshost-cli</code> makes it easy to run and compare <code>ECMAScript</code> code uniformly across a number of runtimes. Support for runtimes is provided by the library <code>eshost</code>.</p>

<p><strong>Get it:</strong> <code>npm install -g eshost-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; eshost -e <span class="s1">&#39;Date.parse(&quot;1 Octopus 2018&quot;)&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c">#### Chakra</span>
</span><span class='line'>NaN
</span><span class='line'>
</span><span class='line'><span class="c">#### JavaScriptCore</span>
</span><span class='line'>1538332200000
</span><span class='line'>
</span><span class='line'><span class="c">#### SpiderMonkey</span>
</span><span class='line'>NaN
</span><span class='line'>
</span><span class='line'><span class="c">#### V8</span>
</span><span class='line'>1538332200000
</span><span class='line'>
</span><span class='line'><span class="c">#### V8 --harmony</span>
</span><span class='line'>1538332200000
</span><span class='line'>
</span><span class='line'><span class="c">#### XS</span>
</span><span class='line'>NaN
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>nmotw.in&gt; eshost --help
</span><span class='line'>Usage: eshost <span class="o">[</span>options<span class="o">]</span> <span class="o">[</span>input-file<span class="o">]</span>
</span><span class='line'>       eshost <span class="o">[</span>options<span class="o">]</span> -e <span class="s2">&quot;input-script&quot;</span>
</span><span class='line'>       eshost --list
</span><span class='line'>       eshost --add <span class="o">[</span>host name<span class="o">]</span> <span class="o">[</span>host <span class="nb">type</span><span class="o">]</span> &lt;host path&gt; --args &lt;host arguments&gt;
</span><span class='line'>       eshost --delete <span class="o">[</span>host name<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Options:
</span><span class='line'>  -e, --eval        <span class="nb">eval </span>an expression and print the result
</span><span class='line'>  -x, --execute     execute a multi-statement program
</span><span class='line'>  -h, --host        <span class="k">select </span>hosts by name <span class="o">(</span>glob syntax is supported as well<span class="o">)</span>
</span><span class='line'>  -g, --hostGroup   <span class="k">select </span>host groups by host <span class="nb">type</span>
</span><span class='line'>  --tags            <span class="k">select </span>hosts by tag
</span><span class='line'>  -c, --config      <span class="k">select </span>a config file
</span><span class='line'>  --table, -t       output in a table                                  <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --coalesce, -s    coalesce like output into a single entry           <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --showSource, -i  show input <span class="nb">source</span>                                  <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --unanimous, -u   If all engines agree, <span class="nb">exit</span><span class="o">(</span>0<span class="o">)</span> with no output, otherwise
</span><span class='line'>                    print and <span class="nb">exit</span><span class="o">(</span>1<span class="o">)</span>; implies --coalesce              <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --add             add a host
</span><span class='line'>  --edit            edit a host
</span><span class='line'>  --delete          delete a host
</span><span class='line'>  --args            <span class="nb">set </span>arguments <span class="k">for </span>a host entry <span class="o">(</span>use with --add<span class="o">)</span>
</span><span class='line'>  --configure-jsvu  Configure jsvu hosts in the config                 <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  --jsvu-prefix     <span class="o">[</span>OPTIONAL<span class="o">]</span> Set the prefix of the configured hosts. If prefix
</span><span class='line'>                    is <span class="s2">&quot;jsvu&quot;</span> <span class="k">then </span>hosts will be configured as, e.g., <span class="s2">&quot;jsvu-sm&quot;</span>.
</span><span class='line'>                    By default, no prefix <span class="o">(</span>e.g. <span class="s2">&quot;sm&quot;</span><span class="o">)</span>. Use this flag with
</span><span class='line'>                    --configure-jsvu.
</span><span class='line'>  --jsvu-root       <span class="o">[</span>OPTIONAL<span class="o">]</span> Use this path containing the .jsvu folder <span class="o">(</span>use
</span><span class='line'>                    this option <span class="k">if</span> .jsvu is located somewhere other than the
</span><span class='line'>                    home directory<span class="o">)</span>. Use this flag with --configure-jsvu.
</span><span class='line'>  --help            Show <span class="nb">help</span>                                          <span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>  -a, --async       <span class="nb">wait </span><span class="k">for </span>realm destruction before reporting results<span class="o">[</span>boolean<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Examples:
</span><span class='line'>  eshost --list
</span><span class='line'>  eshost --add d8 d8 path/to/d8 --args
</span><span class='line'>  <span class="s2">&quot;--harmony&quot;</span>
</span><span class='line'>  eshost --add ch ch path/to/ch --tags
</span><span class='line'>  latest
</span><span class='line'>  eshost --add ch ch path/to/ch --tags
</span><span class='line'>  latest,greatest
</span><span class='line'>  eshost --configure-jsvu
</span><span class='line'>  eshost --configure-jsvu --jsvu-prefix
</span><span class='line'>  jsvu
</span><span class='line'>  eshost test.js
</span><span class='line'>  eshost -e <span class="s2">&quot;1+1&quot;</span>
</span><span class='line'>  eshost -its -x <span class="s2">&quot;for (let i=0; i&lt;10; ++i)</span>
</span><span class='line'><span class="s2">  { print(i) }&quot;</span>
</span><span class='line'>  eshost -h d8 -h chakra test.js
</span><span class='line'>  eshost -h d8,sm test.js
</span><span class='line'>  eshost -g node,ch test.js
</span><span class='line'>  eshost -h d8 -g node test.js
</span><span class='line'>  eshost -h ch-*,node test.js
</span><span class='line'>  eshost -h ch-1.?.? test.js
</span><span class='line'>  eshost --tags latest test.js
</span><span class='line'>  eshost --unanimous test.js
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/eshost-cli/eshost-cli.gif" alt="eshost-cli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[carbon-now-cli]]></title>
    <link href="http://nmotw.in/carbon-now-cli/"/>
    <updated>2019-03-22T22:28:38+05:30</updated>
    <id>http://nmotw.in/carbon-now-cli</id>
    <content type="html"><![CDATA[<h1><a href="">carbon-now-cli</a></h1>

<blockquote><p>carbon code images from CLI.</p></blockquote>

<p><code>carbon-now-cli</code> is a CLI interface for 🎨 Beautiful images of your code — from right inside your terminal!</p>

<p><strong>It also porivdes the below functionality:</strong></p>

<ul>
<li>🖼 Downloads the <strong>real</strong>, <strong>high-quality</strong> image (<em>no DOM screenshots</em>)</li>
<li>✨ Detects file type <strong>automatically</strong></li>
<li>🗂 Supports <strong>all</strong> file extensions supported by <a href="https://carbon.now.sh">carbon.now.sh</a> and <a href="https://github.com/mixn/carbon-now-cli/blob/master/src/helpers/language-map.json">more</a></li>
<li>⚡️ Interactive mode via <code>--interactive</code></li>
<li>🎒 Presets : save and reuse your favorite settings</li>
<li>🖱 Selective highlighting <code>--start</code> and <code>--end</code></li>
<li>📎 Copies image to clipboard via <code>--copy</code> (<strong>cross-OS</strong> 😱)</li>
<li>📚 Accepts file, <code>stdin</code> or clipboard content as input.</li>
<li>🐶 Displays image directly in supported terminals</li>
<li>⏱ Reports each step and therefore <em>shortens the wait</em></li>
<li>👀 Saves to given location or only opens in browser for manual finish.</li>
<li>🌈 Supports saving as <code>.png</code> or <code>.svg</code> — just like Carbon</li>
<li>📏 Supports <code>2x</code>, <code>4x</code> or <code>1x</code> resolutions — just like Carbon</li>
<li>✅ Tested</li>
<li>⛏ Maintained</li>
</ul>


<p><strong>Get it:</strong> <code>npm i -g carbon-now-cli</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>carbon-now --help
</span><span class='line'>
</span><span class='line'>Beautiful images of your code — from right inside your terminal.
</span><span class='line'>
</span><span class='line'>Usage
</span><span class='line'>  <span class="nv">$ </span>carbon-now &lt;file&gt;
</span><span class='line'>  <span class="nv">$ </span>pbpaste | carbon-now
</span><span class='line'>  <span class="nv">$ </span>carbon-now --from-clipboard
</span><span class='line'>
</span><span class='line'>Options
</span><span class='line'>  -s, --start          Starting line of &lt;file&gt;
</span><span class='line'>  -e, --end            Ending line of &lt;file&gt;
</span><span class='line'>  -i, --interactive    Interactive mode
</span><span class='line'>  -l, --location       Image save location, default: cwd
</span><span class='line'>  -t, --target         Image name, default: original-hash.<span class="o">{</span>png|svg<span class="o">}</span>
</span><span class='line'>  -o, --open           Open in browser instead of saving
</span><span class='line'>  -c, --copy           Copy image to clipboard
</span><span class='line'>  -p, --preset         Use a saved preset
</span><span class='line'>  -h, --headless       Use only non-experimental Puppeteer features
</span><span class='line'>  --config             Use a different, <span class="nb">local </span>config <span class="o">(</span><span class="nb">read</span>-only<span class="o">)</span>
</span><span class='line'>  --from-clipboard     Read input from clipboard instead of file
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW</strong></p>

<p><img src="http://nmotw.in/images/carbon-now-cli/carbon-now-cli.gif" alt="carbon-now-cli" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[react-window]]></title>
    <link href="http://nmotw.in/react-window/"/>
    <updated>2019-03-16T15:14:26+05:30</updated>
    <id>http://nmotw.in/react-window</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/react-window">react-window</a></h1>

<blockquote><p>React components for efficiently rendering large lists and tabular data.</p></blockquote>

<p>From the horse's mouth, what is <code>react-window</code>?</p>

<blockquote><p>react-window is a complete rewrite of react-virtualized. I didn't try to solve as many problems or support as many use cases. Instead I focused on making the package smaller1 and faster. I also put a lot of thought into making the API (and documentation) as beginner-friendly as possible (with the caveat that windowing is still kind of an advanced use case).</p></blockquote>

<p>The compoents react-window provides:</p>

<ul>
<li>FixedSizeList</li>
<li>VariableSizeList</li>
<li>FixedSizeGrid</li>
<li>VariableSizeGrid</li>
</ul>


<p><strong>Get it:</strong> <code>npm install react-window</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">FixedSizeList</span> <span class="nx">as</span> <span class="nx">List</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;react-window&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Column</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">index</span><span class="p">,</span> <span class="nx">style</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span><span class="nx">style</span><span class="p">}</span><span class="o">&gt;</span><span class="err">عمود</span> <span class="p">{</span><span class="nx">index</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Example</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">(</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">List</span>
</span><span class='line'>    <span class="nx">direction</span><span class="o">=</span><span class="s2">&quot;rtl&quot;</span>
</span><span class='line'>    <span class="nx">height</span><span class="o">=</span><span class="p">{</span><span class="mi">75</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">itemCount</span><span class="o">=</span><span class="p">{</span><span class="mi">1000</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">itemSize</span><span class="o">=</span><span class="p">{</span><span class="mi">100</span><span class="p">}</span>
</span><span class='line'>    <span class="nx">layout</span><span class="o">=</span><span class="s2">&quot;horizontal&quot;</span>
</span><span class='line'>    <span class="nx">width</span><span class="o">=</span><span class="p">{</span><span class="mi">300</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{</span><span class="nx">Column</span><span class="p">}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/List&gt;</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/react-window/react-window.gif" alt="react-window" /></p>

<p>P.S: Don't miss to checkout the <a href="https://react-window.now.sh/">demos</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[image-promise]]></title>
    <link href="http://nmotw.in/image-promise/"/>
    <updated>2019-03-08T15:00:54+05:30</updated>
    <id>http://nmotw.in/image-promise</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/image-promise">image-promise</a></h1>

<blockquote><p>Promisfied image loading!</p></blockquote>

<p>Load one or more images, return a promise that resolves if the image loads or rejects in case of an error.</p>

<p><strong>Get it:</strong> <code>npm install image-pormise</code></p>

<p><strong>Sample code:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">images</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;cat.jpg&#39;</span><span class="p">,</span> <span class="s1">&#39;dog.jpg&#39;</span><span class="p">];</span>
</span><span class='line'><span class="c1">// var images = $(&#39;img&#39;); // it can also be a jQuery object</span>
</span><span class='line'><span class="c1">// var images = document.querySelectorAll(&#39;img&#39;); // or a NodeList</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loadImage</span><span class="p">(</span><span class="nx">images</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">allImgs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">allImgs</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="s1">&#39;images loaded!&#39;</span><span class="p">,</span> <span class="nx">allImgs</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;One or more images have failed to load :(&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">errored</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="s1">&#39;But these loaded fine:&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">loaded</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">images</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;0&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;1&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;2&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;https://unsplash.it/800/600?random&amp;3&quot;</span>
</span><span class='line'><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">imgs</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">ImageLoader</span><span class="p">(</span><span class="nx">images</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">errored</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// for CORS enabled imgs</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">image</span> <span class="o">=</span> <span class="s1">&#39;http://catpics.com/cat.jpg&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loadImage</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="p">{</span> <span class="nx">crossorigin</span><span class="o">:</span> <span class="s1">&#39;anonymous&#39;</span> <span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">img</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ctx</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// now you can do this</span>
</span><span class='line'>  <span class="nx">canvas</span><span class="p">.</span><span class="nx">toDataURL</span><span class="p">(</span><span class="s1">&#39;image/png&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s1">&#39;Image failed to load :(&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/image-promise/image-promise.gif" alt="image-promise" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[scroll-into-view-if-needed]]></title>
    <link href="http://nmotw.in/scroll-into-view-if-needed/"/>
    <updated>2019-03-02T23:25:04+05:30</updated>
    <id>http://nmotw.in/scroll-into-view-if-needed</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/scroll-into-view-if-needed">scroll-init-view-if-needed</a></h1>

<blockquote><p>Element.scrollIntoView ponyfills for things like "if-needed" and "smooth".</p></blockquote>

<p><img src="http://nmotw.in/images/scroll-into-view-if-needed/scroll-into-view-if-needed.png" alt="scroll-into-view-if-needed" /></p>

<p>This is a ponyfill for <code>Element.scrollIntoViewIfNeeded</code>. Since then the CSS working group have decided to implement its features in <code>Element.scrollIntoView</code> as the option <code>scrollMode: "if-needed"</code>. Thus this library got rewritten to implement that spec instead of the soon to be deprecated one.</p>

<p>Don't miss the <a href="https://scroll-into-view-if-needed.netlify.com">Demo</a>.</p>

<p><strong>Get it:</strong> <code>npm install scroll-into-view-if-needed</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// es6 import</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">scrollIntoView</span> <span class="nx">from</span> <span class="s1">&#39;scroll-into-view-if-needed&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hero&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scrollMode</span><span class="o">:</span> <span class="s1">&#39;if-needed&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">block</span><span class="o">:</span> <span class="s1">&#39;nearest&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">inline</span><span class="o">:</span> <span class="s1">&#39;nearest&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span> <span class="nx">block</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="nx">inline</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// scrollMode is &quot;always&quot; by default</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// smooth scroll if the browser supports it and if the element isn&#39;t visible</span>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span> <span class="nx">behavior</span><span class="o">:</span> <span class="s1">&#39;smooth&#39;</span><span class="p">,</span> <span class="nx">scrollMode</span><span class="o">:</span> <span class="s1">&#39;if-needed&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/scroll-into-view-if-needed/scroll-into-view-if-needed.gif" alt="scroll-into-view-if-needed" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[abort-controller]]></title>
    <link href="http://nmotw.in/abort-controller/"/>
    <updated>2019-02-23T11:10:52+05:30</updated>
    <id>http://nmotw.in/abort-controller</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/abort-controller">abort-controller</a></h1>

<blockquote><p>An implementation of WHATWG AbortController interface.</p></blockquote>

<p>The AbortController interface allows us to abort one or more DOM requests as per the need.</p>

<p>From the <a href="https://dom.spec.whatwg.org/#interface-abortcontroller">sepc</a>:</p>

<p>The <code>AbortController()</code> constructor, when invoked, must run these steps:</p>

<ul>
<li><p>Let signal be a <code>new AbortSignal</code> object.</p></li>
<li><p>Let controller be a <code>new AbortController</code> object whose signal is signal.</p></li>
<li><p>Return controller.</p></li>
</ul>


<p>The <code>signal</code> attribute’s getter, when invoked, must return the context object’s signal.</p>

<p>The <code>abort()</code> method, when invoked, must signal abort on the context object’s signal.</p>

<p><strong>Get it:</strong> <code>npm install abort-controller</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">AbortController</span> <span class="nx">from</span> <span class="s2">&quot;abort-controller&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">AbortController</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;abort-controller&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or UMD version defines a global variable:</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">AbortController</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">AbortControllerShim</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">AbortController</span> <span class="nx">from</span> <span class="s2">&quot;abort-controller&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">signal</span> <span class="o">=</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">signal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">signal</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;abort&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;aborted!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">controller</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/abort-controller/abort-controller.gif" alt="abort-controller" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[package-size]]></title>
    <link href="http://nmotw.in/package-size/"/>
    <updated>2019-02-13T00:21:28+05:30</updated>
    <id>http://nmotw.in/package-size</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/egoist/package-size">package-size</a></h1>

<blockquote><p>Get the bundle size of an npm packages.</p></blockquote>

<p><code>package-size</code> is a sweet CLI util, that gives us info about the bundle size of npm packages.</p>

<p><strong>What it does?</strong></p>

<ul>
<li>Install the packages to a temp directory.</li>
<li>Bundle the packages with webpack and get the bundle size.</li>
<li>Show you the bundle size and cache it by package version.</li>
</ul>


<p><strong>Get it:</strong> <code>npm install -g package-size</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># get the size of vue bundle</span>
</span><span class='line'>package-size vue
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of react+react-dom bundle</span>
</span><span class='line'>package-size react,react-dom
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of vue react+react-dom preact bundles</span>
</span><span class='line'>package-size vue react,react-dom preact
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of react+react-dom without using the cache</span>
</span><span class='line'>package-size react,react-dom --no-cache
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of file in current working directory</span>
</span><span class='line'>package-size ./dist/index.js
</span><span class='line'><span class="c"># or a package in current working directory, explictly using `--cwd` flag</span>
</span><span class='line'>package-size vue --cwd
</span><span class='line'>
</span><span class='line'><span class="c"># or event multiple versions for the same package!</span>
</span><span class='line'>package-size react@0.10 react@0.14 react@15
</span><span class='line'>
</span><span class='line'><span class="c"># save results to file system in JSON format</span>
</span><span class='line'><span class="c"># defaults to ./package-size-output.json</span>
</span><span class='line'>package-size cherow --output
</span><span class='line'><span class="c"># or custom path</span>
</span><span class='line'>package-size cherow --output stats.json
</span><span class='line'>
</span><span class='line'><span class="c"># analyze bundle with webpack-bundle-analyzer</span>
</span><span class='line'>package-size cherow --analyze
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">getSizes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;package-size&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getSizes</span><span class="p">(</span><span class="s1">&#39;react,react-dom&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">//=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;react,react-dom&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">size</span><span class="o">:</span> <span class="mi">12023</span><span class="p">,</span> <span class="c1">// in bytes</span>
</span><span class='line'>      <span class="nx">minified</span><span class="o">:</span> <span class="mi">2342</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">gzipped</span><span class="o">:</span> <span class="mi">534</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">versionedName</span><span class="o">:</span> <span class="s1">&#39;react@16.0.0,react-dom@16.0.0&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/package-size/package-size.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[soted-object]]></title>
    <link href="http://nmotw.in/soted-object/"/>
    <updated>2019-02-09T11:55:29+05:30</updated>
    <id>http://nmotw.in/soted-object</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sorted-object">sorted-object</a></h1>

<blockquote><p>sort object by keys.</p></blockquote>

<p><code>sorted-object</code> is an uber tiny module that helps us sort an object by it's keys.</p>

<p>P.S: It got a <code>232,037</code> downloads last week ;)</p>

<p><strong>Get it:</strong> <code>npm install sorted-object</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">sortedObject</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sorted-object&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sortedObject</span><span class="p">({</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">a</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="p">})</span>
</span><span class='line'><span class="c1">// =&gt; { &#39;0&#39;: 0, a: 3, b: 1, c: 2 }</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/sorted-object/sorted-object.gif" alt="sorted-object" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[to-regex]]></title>
    <link href="http://nmotw.in/to-regex/"/>
    <updated>2019-02-02T15:59:03+05:30</updated>
    <id>http://nmotw.in/to-regex</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/to-regex">to-regex</a></h1>

<blockquote><p>Generate a regex from a string or array of strings.</p></blockquote>

<p><code>to-regex</code> is tiny module that helps us to easily create R.E from a <code>string</code> or an <code>array</code> of strings.</p>

<p><strong>Get it:</strong> <code>npm install to-regex</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">toRegex</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;to-regex&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:foo)$/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">negate</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:(?:(?!^(?:foo)$).)*)$/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">contains</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /(?:foo)/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">],</span> <span class="p">{</span><span class="nx">negate</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:(?:(?!^(?:(?:foo)|(?:bar))$).)*)$/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">],</span> <span class="p">{</span><span class="nx">negate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">contains</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:(?:(?!(?:(?:foo)|(?:bar))).)*)$/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/to-regex/to-regex.gif" alt="to-regex" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lazy-property]]></title>
    <link href="http://nmotw.in/lazy-property/"/>
    <updated>2019-01-26T14:08:16+05:30</updated>
    <id>http://nmotw.in/lazy-property</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/lazy-property">lazy-property</a></h1>

<blockquote><p>Add a lazily initialized property to an object.</p></blockquote>

<p><code>lazy-propert</code> play well with <code>Object.defineProperty</code> to provide laziness over object's properties.</p>

<p><strong>Get it:</strong> <code>npm install lazy-property</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lazy-property&quot;</span><span class="p">)(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">init</span><span class="p">[,</span> <span class="nx">enumerable</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>^ Adds a lazily initialized property to the object.</p>

<ul>
<li><code>obj</code> is the object to add the property to</li>
<li><code>name</code> is the name of the property</li>
<li><code>init</code> is a function that computes the value of the property</li>
<li><code>enumerable</code> if the property is enumerable (default false)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">addLazyProperty</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lazy-property&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">addLazyProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;initialized!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Access the property</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Prints out:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//    initialized!</span>
</span><span class='line'><span class="c1">//    bar</span>
</span><span class='line'><span class="c1">//    bar</span>
</span><span class='line'><span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/lazy-property/lazy-property.gif" alt="lazy-property" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clockmoji]]></title>
    <link href="http://nmotw.in/clockmoji/"/>
    <updated>2019-01-20T20:00:13+05:30</updated>
    <id>http://nmotw.in/clockmoji</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/clockmoji">clockmoji</a></h1>

<blockquote><p>🕗 Get an emoji clock based on the time.</p></blockquote>

<p><code>clockmoji</code> is fun little module for representation of the current time in emoji.</p>

<p>It calculates the short hard, long hard for the clock and fetch the required emoji's unicode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="mi">15</span> <span class="o">*</span> <span class="mi">60000</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">shortHand</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span> <span class="o">%</span> <span class="mi">12</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">longHand</span> <span class="o">=</span> <span class="p">(</span><span class="nx">min</span> <span class="o">-</span> <span class="p">(</span><span class="nx">min</span> <span class="o">%</span> <span class="mi">30</span><span class="p">))</span> <span class="o">/</span> <span class="mi">30</span> <span class="o">?</span> <span class="s1">&#39;30&#39;</span> <span class="o">:</span> <span class="s1">&#39;00&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install clockmoji</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">date</span>
</span><span class='line'><span class="nx">Tue</span> <span class="nx">May</span> <span class="mi">26</span> <span class="mi">18</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">10</span> <span class="nx">CDT</span> <span class="mi">2015</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">no</span> <span class="nx">arguments</span> <span class="nx">will</span> <span class="k">return</span> <span class="nx">the</span> <span class="nx">current</span> <span class="nx">time</span>
</span><span class='line'><span class="nx">clockmoji</span>
</span><span class='line'><span class="err">🕡</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Pass</span> <span class="nx">a</span> <span class="nx">time</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">format</span> <span class="nx">mm</span><span class="o">:</span><span class="nx">ss</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span>
</span><span class='line'><span class="err">🕙</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Military</span> <span class="nx">time</span> <span class="nx">supported</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">14</span><span class="o">:</span><span class="mi">00</span>
</span><span class='line'><span class="err">🕑</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">any</span> <span class="nx">arbitrary</span> <span class="nx">time</span> <span class="nx">works</span> <span class="o">--</span> <span class="nx">rounds</span> <span class="nx">down</span> <span class="k">if</span> <span class="nx">its</span> <span class="nx">less</span> <span class="nx">than</span> <span class="o">:</span><span class="mi">15</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">12</span><span class="o">:</span><span class="mi">04</span>
</span><span class='line'><span class="err">🕛</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">rounds</span> <span class="nx">up</span> <span class="k">if</span> <span class="nx">the</span> <span class="nx">minutes</span> <span class="nx">are</span> <span class="o">:</span><span class="mi">15</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">12</span><span class="o">:</span><span class="mi">24</span>
</span><span class='line'><span class="err">🕧</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">supports</span> <span class="nx">piping</span>
</span><span class='line'><span class="nx">echo</span> <span class="mi">6</span><span class="o">:</span><span class="mi">30</span> <span class="o">|</span> <span class="nx">clockmoji</span>
</span><span class='line'><span class="err">🕡</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">invalid</span> <span class="nx">time</span> <span class="nx">returns</span> <span class="err">⚠</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">9999</span>
</span><span class='line'><span class="err">⚠</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">clockmoji</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;clockmoji&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clockmoji</span><span class="p">())</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clockmoji</span><span class="p">(</span><span class="s1">&#39;12:00&#39;</span><span class="p">))</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clockmoji</span><span class="p">(</span><span class="s1">&#39;18:30&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/clockmoji/clockmoji.gif" alt="clockmoji" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[meant]]></title>
    <link href="http://nmotw.in/meant/"/>
    <updated>2019-01-12T02:44:43+05:30</updated>
    <id>http://nmotw.in/meant</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/meant">meant</a></h1>

<blockquote><p>Best Similarity, like "did you mean".</p></blockquote>

<p><code>meant</code> uses <code>levenshteinD</code> and provides a <code>Did you mean?</code> like feature.</p>

<p><strong>Get it:</strong> <code>npm install meant</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">meant</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;meant&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">meant</span><span class="p">(</span><span class="s1">&#39;lk&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ll&#39;</span><span class="p">,</span> <span class="s1">&#39;ls&#39;</span><span class="p">,</span> <span class="s1">&#39;ts&#39;</span><span class="p">])</span>
</span><span class='line'><span class="c1">// =&gt; [ &#39;ll&#39;, &#39;ls&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/meant/meant.gif" alt="meant" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caseless]]></title>
    <link href="http://nmotw.in/caseless/"/>
    <updated>2019-01-05T14:22:02+05:30</updated>
    <id>http://nmotw.in/caseless</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/caseless">caseless</a></h1>

<blockquote><p>caseless semantic <code>get/set/check</code> for headers.</p></blockquote>

<p><code>caseless</code> helps to <code>get/set/check</code> specially for headers in a caseless manner while also preserving the caseing of headers the first time they are set.</p>

<p><strong>Get it:</strong> <code>npm install caseless</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;caseless&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;a-header&#39;</span><span class="o">:</span> <span class="s1">&#39;asdf&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Content-Length&#39;</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">caseless</span><span class="p">(</span><span class="nx">headers</span><span class="p">)</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get set</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-Header&#39;</span><span class="p">,</span> <span class="s1">&#39;asdf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;asdf&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// has check</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;a-Header&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set values</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-Header&#39;</span><span class="p">,</span> <span class="s1">&#39;fdas&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-HEADER&#39;</span><span class="p">,</span> <span class="s1">&#39;more&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;fdsa,more&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// del</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">del</span><span class="p">(</span><span class="s1">&#39;Content-length&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// swap</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-Header&#39;</span><span class="p">,</span> <span class="s1">&#39;fdas&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="s1">&#39;a-HEADER&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;a-HEADER&#39;</span>
</span><span class='line'><span class="c1">// headers === {&#39;a-HEADER&#39;: &#39;fdas&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/caseless/caseless.gif" alt="caseless" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gauge]]></title>
    <link href="http://nmotw.in/gauge/"/>
    <updated>2018-12-30T06:59:09+05:30</updated>
    <id>http://nmotw.in/gauge</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/gauge">gauge</a></h1>

<blockquote><p>Terminal based horizontal gauge.</p></blockquote>

<p><code>gauge</code> is a terminal based horizontal gauge / progress bar which provides the user the totally control on the progess indication, plusation or hiding the porgress bar. It has provides a convenient theming option.</p>

<p><strong>Get it:</strong> <code>npm install gauge</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Gauge</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gauge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">gauge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gauge</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gauge</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gauge</span><span class="p">.</span><span class="nx">pulse</span><span class="p">(</span><span class="s2">&quot;this&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gauge</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/gauge/gauge.gif" alt="gauge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iron]]></title>
    <link href="http://nmotw.in/iron/"/>
    <updated>2018-12-28T15:29:33+05:30</updated>
    <id>http://nmotw.in/iron</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/iron">iron</a></h1>

<blockquote><p>Sealing a JSON object using symmetric key encryption.</p></blockquote>

<p><code>iron</code> provide a neat way to seal a JSON object using symmetric key encryption with message integrity verification!</p>

<p><strong>Get it:</strong> <code>npm install iron</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Encrypt </span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Iron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;iron&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">c</span><span class="o">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">d</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">e</span><span class="o">:</span> <span class="s1">&#39;f&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="s1">&#39;some_not_random_password_that_is_at_least_32_characters&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">sealed</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">defaults</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sealed</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Decrypt</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">unsealed</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">unseal</span><span class="p">(</span><span class="nx">sealed</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">defaults</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/iron/iron.gif" alt="iron" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[intl-tel-input]]></title>
    <link href="http://nmotw.in/intl-tel-input/"/>
    <updated>2018-12-23T11:37:47+05:30</updated>
    <id>http://nmotw.in/intl-tel-input</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/intl-tel-input">intl-tel-input</a></h1>

<blockquote><p>International Telephone Input</p></blockquote>

<p>Eentering and validating international telephone numbers made easy with <code>intl-tel-input</code>.</p>

<p>It adds a flag dropdown to any input, detects the user's country, displays a relevant placeholder and provides formatting/validation methods!</p>

<p><strong>Get it:</strong> <code>npm i intl-tel-input</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;tel&quot;</span> <span class="na">id=</span><span class="s">&quot;phone&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;node_modules/intl-tel-input/src/css/intlTelInput.css&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">intlTelInput</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;intl-tel-input&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;#phone&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">intlTelInput</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/intl-tel-input/intl-tel-input.gif" alt="intl-tel-input" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@glorious/demo]]></title>
    <link href="http://nmotw.in/glorious-demo/"/>
    <updated>2018-12-14T23:37:14+05:30</updated>
    <id>http://nmotw.in/glorious-demo</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/@glorious/demo">@glorious/demo</a></h1>

<blockquote><p>The easiest way to demonstrate your code in action.</p></blockquote>

<p><code>@glorious/demo</code> a uniq node module that helps in demonstrating your code in action!</p>

<p><strong>Get it:</strong> <code>npm install @glorious/demo --save</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="s1">&#39;@glorious/demo/gdemo.min.css&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">GDemo</span> <span class="nx">from</span> <span class="s1">&#39;@glorious/demo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GDemo</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">greet</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">greet</span><span class="p">();</span>
</span><span class='line'><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="nx">demo</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">openApp</span><span class="p">(</span><span class="s1">&#39;editor&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">minHeight</span><span class="o">:</span> <span class="s1">&#39;350px&#39;</span><span class="p">,</span> <span class="nx">windowTitle</span><span class="o">:</span> <span class="s1">&#39;demo.js&#39;</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="p">{</span><span class="nx">onCompleteDelay</span><span class="o">:</span> <span class="mi">1500</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">openApp</span><span class="p">(</span><span class="s1">&#39;terminal&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">minHeight</span><span class="o">:</span> <span class="s1">&#39;350px&#39;</span><span class="p">,</span> <span class="nx">promptString</span><span class="o">:</span> <span class="s1">&#39;$&#39;</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">&#39;node ./demo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">onCompleteDelay</span><span class="o">:</span> <span class="mi">500</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: Don't miss to playaround with the <a href="https://glorious.codes/demo?demo=Y29uc3QgZ2RlbW8gPSBuZXcgR0RlbW8oJ1tkYXRhLWRlbW8tY29udGFpbmVyXScpOwoKY29uc3QgY29kZSA9ICdjb25zb2xlLmxvZygibm1vdHcuaW4hIik7JwoKY29uc3QgaGlnaGxpZ2h0ZWRDb2RlID0gUHJpc20uaGlnaGxpZ2h0KAogIGNvZGUsCiAgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQsCiAgJ2phdmFzY3JpcHQnCik7CgpnZGVtbwogIC5vcGVuQXBwKCdlZGl0b3InLCB7IG1pbkhlaWdodDogJzQwMHB4Jywgd2luZG93VGl0bGU6ICdkZW1vLmpzJyB9KQogIC53cml0ZShoaWdobGlnaHRlZENvZGUsIHsgb25Db21wbGV0ZURlbGF5OiAyMDAwIH0pCiAgLm9wZW5BcHAoJ3Rlcm1pbmFsJywgeyBtaW5IZWlnaHQ6ICc0MDBweCcsIHByb21wdFN0cmluZzogJyQnIH0pCiAgLmNvbW1hbmQoJ25vZGUgLi9kZW1vJykKICAucmVzcG9uZCgnbm1vdHcuaW4hJykKICAuY29tbWFuZCgnJykKICAuZW5kKCk7Cg==">demo</a>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/glorious-demo/glorious-demo.gif" alt="@glorious/demo" /></p>
]]></content>
  </entry>
  
</feed>
