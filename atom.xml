<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://nmotw.in/atom.xml" rel="self"/>
  <link href="http://nmotw.in/"/>
  <updated>2019-03-02T23:37:35+05:30</updated>
  <id>http://nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[scroll-into-view-if-needed]]></title>
    <link href="http://nmotw.in/scroll-into-view-if-needed/"/>
    <updated>2019-03-02T23:25:04+05:30</updated>
    <id>http://nmotw.in/scroll-into-view-if-needed</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/scroll-into-view-if-needed">scroll-init-view-if-needed</a></h1>

<blockquote><p>Element.scrollIntoView ponyfills for things like "if-needed" and "smooth".</p></blockquote>

<p><img src="http://nmotw.in/images/scroll-into-view-if-needed.png" alt="scroll-into-view-if-needed" /></p>

<p>This is a ponyfill for <code>Element.scrollIntoViewIfNeeded</code>. Since then the CSS working group have decided to implement its features in <code>Element.scrollIntoView</code> as the option <code>scrollMode: "if-needed"</code>. Thus this library got rewritten to implement that spec instead of the soon to be deprecated one.</p>

<p>Don't miss the <a href="https://scroll-into-view-if-needed.netlify.com">Demo</a>.</p>

<p><strong>Get it:</strong> <code>npm install scroll-into-view-if-needed</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// es6 import</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">scrollIntoView</span> <span class="nx">from</span> <span class="s1">&#39;scroll-into-view-if-needed&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;hero&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">scrollMode</span><span class="o">:</span> <span class="s1">&#39;if-needed&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">block</span><span class="o">:</span> <span class="s1">&#39;nearest&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">inline</span><span class="o">:</span> <span class="s1">&#39;nearest&#39;</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span> <span class="nx">block</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span><span class="p">,</span> <span class="nx">inline</span><span class="o">:</span> <span class="s1">&#39;center&#39;</span> <span class="p">});</span>
</span><span class='line'><span class="c1">// scrollMode is &quot;always&quot; by default</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// smooth scroll if the browser supports it and if the element isn&#39;t visible</span>
</span><span class='line'><span class="nx">scrollIntoView</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="p">{</span> <span class="nx">behavior</span><span class="o">:</span> <span class="s1">&#39;smooth&#39;</span><span class="p">,</span> <span class="nx">scrollMode</span><span class="o">:</span> <span class="s1">&#39;if-needed&#39;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/scroll-into-view-if-needed/scroll-into-view-if-needed.gif" alt="scroll-into-view-if-needed" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[abort-controller]]></title>
    <link href="http://nmotw.in/abort-controller/"/>
    <updated>2019-02-23T11:10:52+05:30</updated>
    <id>http://nmotw.in/abort-controller</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/abort-controller">abort-controller</a></h1>

<blockquote><p>An implementation of WHATWG AbortController interface.</p></blockquote>

<p>The AbortController interface allows us to abort one or more DOM requests as per the need.</p>

<p>From the <a href="https://dom.spec.whatwg.org/#interface-abortcontroller">sepc</a>:</p>

<p>The <code>AbortController()</code> constructor, when invoked, must run these steps:</p>

<ul>
<li><p>Let signal be a <code>new AbortSignal</code> object.</p></li>
<li><p>Let controller be a <code>new AbortController</code> object whose signal is signal.</p></li>
<li><p>Return controller.</p></li>
</ul>


<p>The <code>signal</code> attribute’s getter, when invoked, must return the context object’s signal.</p>

<p>The <code>abort()</code> method, when invoked, must signal abort on the context object’s signal.</p>

<p><strong>Get it:</strong> <code>npm install abort-controller</code></p>

<p><strong>Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">AbortController</span> <span class="nx">from</span> <span class="s2">&quot;abort-controller&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// or</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">AbortController</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;abort-controller&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// or UMD version defines a global variable:</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">AbortController</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">AbortControllerShim</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">AbortController</span> <span class="nx">from</span> <span class="s2">&quot;abort-controller&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AbortController</span><span class="p">();</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">signal</span> <span class="o">=</span> <span class="nx">controller</span><span class="p">.</span><span class="nx">signal</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">signal</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;abort&quot;</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;aborted!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">controller</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/abort-controller/abort-controller.gif" alt="abort-controller" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[package-size]]></title>
    <link href="http://nmotw.in/package-size/"/>
    <updated>2019-02-13T00:21:28+05:30</updated>
    <id>http://nmotw.in/package-size</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/egoist/package-size">package-size</a></h1>

<blockquote><p>Get the bundle size of an npm packages.</p></blockquote>

<p><code>package-size</code> is a sweet CLI util, that gives us info about the bundle size of npm packages.</p>

<p><strong>What it does?</strong></p>

<ul>
<li>Install the packages to a temp directory.</li>
<li>Bundle the packages with webpack and get the bundle size.</li>
<li>Show you the bundle size and cache it by package version.</li>
</ul>


<p><strong>Get it:</strong> <code>npm install -g package-size</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c"># get the size of vue bundle</span>
</span><span class='line'>package-size vue
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of react+react-dom bundle</span>
</span><span class='line'>package-size react,react-dom
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of vue react+react-dom preact bundles</span>
</span><span class='line'>package-size vue react,react-dom preact
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of react+react-dom without using the cache</span>
</span><span class='line'>package-size react,react-dom --no-cache
</span><span class='line'>
</span><span class='line'><span class="c"># get the size of file in current working directory</span>
</span><span class='line'>package-size ./dist/index.js
</span><span class='line'><span class="c"># or a package in current working directory, explictly using `--cwd` flag</span>
</span><span class='line'>package-size vue --cwd
</span><span class='line'>
</span><span class='line'><span class="c"># or event multiple versions for the same package!</span>
</span><span class='line'>package-size react@0.10 react@0.14 react@15
</span><span class='line'>
</span><span class='line'><span class="c"># save results to file system in JSON format</span>
</span><span class='line'><span class="c"># defaults to ./package-size-output.json</span>
</span><span class='line'>package-size cherow --output
</span><span class='line'><span class="c"># or custom path</span>
</span><span class='line'>package-size cherow --output stats.json
</span><span class='line'>
</span><span class='line'><span class="c"># analyze bundle with webpack-bundle-analyzer</span>
</span><span class='line'>package-size cherow --analyze
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">getSizes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;package-size&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">getSizes</span><span class="p">(</span><span class="s1">&#39;react,react-dom&#39;</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">data</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">//=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;react,react-dom&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">size</span><span class="o">:</span> <span class="mi">12023</span><span class="p">,</span> <span class="c1">// in bytes</span>
</span><span class='line'>      <span class="nx">minified</span><span class="o">:</span> <span class="mi">2342</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">gzipped</span><span class="o">:</span> <span class="mi">534</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">versionedName</span><span class="o">:</span> <span class="s1">&#39;react@16.0.0,react-dom@16.0.0&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/package-size/package-size.gif" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[soted-object]]></title>
    <link href="http://nmotw.in/soted-object/"/>
    <updated>2019-02-09T11:55:29+05:30</updated>
    <id>http://nmotw.in/soted-object</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/sorted-object">sorted-object</a></h1>

<blockquote><p>sort object by keys.</p></blockquote>

<p><code>sorted-object</code> is an uber tiny module that helps us sort an object by it's keys.</p>

<p>P.S: It got a <code>232,037</code> downloads last week ;)</p>

<p><strong>Get it:</strong> <code>npm install sorted-object</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">sortedObject</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;sorted-object&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">sortedObject</span><span class="p">({</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span><span class="nx">a</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="p">})</span>
</span><span class='line'><span class="c1">// =&gt; { &#39;0&#39;: 0, a: 3, b: 1, c: 2 }</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/sorted-object/sorted-object.gif" alt="sorted-object" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[to-regex]]></title>
    <link href="http://nmotw.in/to-regex/"/>
    <updated>2019-02-02T15:59:03+05:30</updated>
    <id>http://nmotw.in/to-regex</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/to-regex">to-regex</a></h1>

<blockquote><p>Generate a regex from a string or array of strings.</p></blockquote>

<p><code>to-regex</code> is tiny module that helps us to easily create R.E from a <code>string</code> or an <code>array</code> of strings.</p>

<p><strong>Get it:</strong> <code>npm install to-regex</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">toRegex</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;to-regex&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:foo)$/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">negate</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:(?:(?!^(?:foo)$).)*)$/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">contains</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /(?:foo)/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">],</span> <span class="p">{</span><span class="nx">negate</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:(?:(?!^(?:(?:foo)|(?:bar))$).)*)$/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">toRegex</span><span class="p">([</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">],</span> <span class="p">{</span><span class="nx">negate</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">contains</span><span class="o">:</span> <span class="kc">true</span><span class="p">}));</span>
</span><span class='line'><span class="c1">//=&gt; /^(?:(?:(?!(?:(?:foo)|(?:bar))).)*)$/</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/to-regex/to-regex.gif" alt="to-regex" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lazy-property]]></title>
    <link href="http://nmotw.in/lazy-property/"/>
    <updated>2019-01-26T14:08:16+05:30</updated>
    <id>http://nmotw.in/lazy-property</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/lazy-property">lazy-property</a></h1>

<blockquote><p>Add a lazily initialized property to an object.</p></blockquote>

<p><code>lazy-propert</code> play well with <code>Object.defineProperty</code> to provide laziness over object's properties.</p>

<p><strong>Get it:</strong> <code>npm install lazy-property</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lazy-property&quot;</span><span class="p">)(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">init</span><span class="p">[,</span> <span class="nx">enumerable</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>^ Adds a lazily initialized property to the object.</p>

<ul>
<li><code>obj</code> is the object to add the property to</li>
<li><code>name</code> is the name of the property</li>
<li><code>init</code> is a function that computes the value of the property</li>
<li><code>enumerable</code> if the property is enumerable (default false)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">addLazyProperty</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;lazy-property&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">addLazyProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="s2">&quot;foo&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;initialized!&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="s2">&quot;bar&quot;</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Access the property</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">)</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">foo</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//Prints out:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//    initialized!</span>
</span><span class='line'><span class="c1">//    bar</span>
</span><span class='line'><span class="c1">//    bar</span>
</span><span class='line'><span class="c1">//</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/lazy-property/lazy-property.gif" alt="lazy-property" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[clockmoji]]></title>
    <link href="http://nmotw.in/clockmoji/"/>
    <updated>2019-01-20T20:00:13+05:30</updated>
    <id>http://nmotw.in/clockmoji</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/clockmoji">clockmoji</a></h1>

<blockquote><p>🕗 Get an emoji clock based on the time.</p></blockquote>

<p><code>clockmoji</code> is fun little module for representation of the current time in emoji.</p>

<p>It calculates the short hard, long hard for the clock and fetch the required emoji's unicode.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">date</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">date</span><span class="p">.</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">+</span> <span class="mi">15</span> <span class="o">*</span> <span class="mi">60000</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">shortHand</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getHours</span><span class="p">()</span> <span class="o">%</span> <span class="mi">12</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">date</span><span class="p">.</span><span class="nx">getMinutes</span><span class="p">()</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">longHand</span> <span class="o">=</span> <span class="p">(</span><span class="nx">min</span> <span class="o">-</span> <span class="p">(</span><span class="nx">min</span> <span class="o">%</span> <span class="mi">30</span><span class="p">))</span> <span class="o">/</span> <span class="mi">30</span> <span class="o">?</span> <span class="s1">&#39;30&#39;</span> <span class="o">:</span> <span class="s1">&#39;00&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Get it:</strong> <code>npm install clockmoji</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">date</span>
</span><span class='line'><span class="nx">Tue</span> <span class="nx">May</span> <span class="mi">26</span> <span class="mi">18</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">10</span> <span class="nx">CDT</span> <span class="mi">2015</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">no</span> <span class="nx">arguments</span> <span class="nx">will</span> <span class="k">return</span> <span class="nx">the</span> <span class="nx">current</span> <span class="nx">time</span>
</span><span class='line'><span class="nx">clockmoji</span>
</span><span class='line'><span class="err">🕡</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Pass</span> <span class="nx">a</span> <span class="nx">time</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">format</span> <span class="nx">mm</span><span class="o">:</span><span class="nx">ss</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">10</span><span class="o">:</span><span class="mi">00</span>
</span><span class='line'><span class="err">🕙</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">Military</span> <span class="nx">time</span> <span class="nx">supported</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">14</span><span class="o">:</span><span class="mi">00</span>
</span><span class='line'><span class="err">🕑</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">any</span> <span class="nx">arbitrary</span> <span class="nx">time</span> <span class="nx">works</span> <span class="o">--</span> <span class="nx">rounds</span> <span class="nx">down</span> <span class="k">if</span> <span class="nx">its</span> <span class="nx">less</span> <span class="nx">than</span> <span class="o">:</span><span class="mi">15</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">12</span><span class="o">:</span><span class="mi">04</span>
</span><span class='line'><span class="err">🕛</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">rounds</span> <span class="nx">up</span> <span class="k">if</span> <span class="nx">the</span> <span class="nx">minutes</span> <span class="nx">are</span> <span class="o">:</span><span class="mi">15</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">12</span><span class="o">:</span><span class="mi">24</span>
</span><span class='line'><span class="err">🕧</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">supports</span> <span class="nx">piping</span>
</span><span class='line'><span class="nx">echo</span> <span class="mi">6</span><span class="o">:</span><span class="mi">30</span> <span class="o">|</span> <span class="nx">clockmoji</span>
</span><span class='line'><span class="err">🕡</span>
</span><span class='line'>
</span><span class='line'><span class="err">#</span> <span class="nx">invalid</span> <span class="nx">time</span> <span class="nx">returns</span> <span class="err">⚠</span>
</span><span class='line'><span class="nx">clockmoji</span> <span class="mi">9999</span>
</span><span class='line'><span class="err">⚠</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">clockmoji</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;clockmoji&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clockmoji</span><span class="p">())</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clockmoji</span><span class="p">(</span><span class="s1">&#39;12:00&#39;</span><span class="p">))</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">clockmoji</span><span class="p">(</span><span class="s1">&#39;18:30&#39;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/clockmoji/clockmoji.gif" alt="clockmoji" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[meant]]></title>
    <link href="http://nmotw.in/meant/"/>
    <updated>2019-01-12T02:44:43+05:30</updated>
    <id>http://nmotw.in/meant</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/meant">meant</a></h1>

<blockquote><p>Best Similarity, like "did you mean".</p></blockquote>

<p><code>meant</code> uses <code>levenshteinD</code> and provides a <code>Did you mean?</code> like feature.</p>

<p><strong>Get it:</strong> <code>npm install meant</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">meant</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;meant&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">meant</span><span class="p">(</span><span class="s1">&#39;lk&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ll&#39;</span><span class="p">,</span> <span class="s1">&#39;ls&#39;</span><span class="p">,</span> <span class="s1">&#39;ts&#39;</span><span class="p">])</span>
</span><span class='line'><span class="c1">// =&gt; [ &#39;ll&#39;, &#39;ls&#39; ]</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/meant/meant.gif" alt="meant" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[caseless]]></title>
    <link href="http://nmotw.in/caseless/"/>
    <updated>2019-01-05T14:22:02+05:30</updated>
    <id>http://nmotw.in/caseless</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/caseless">caseless</a></h1>

<blockquote><p>caseless semantic <code>get/set/check</code> for headers.</p></blockquote>

<p><code>caseless</code> helps to <code>get/set/check</code> specially for headers in a caseless manner while also preserving the caseing of headers the first time they are set.</p>

<p><strong>Get it:</strong> <code>npm install caseless</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;caseless&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">let</span> <span class="nx">headers</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;a-header&#39;</span><span class="o">:</span> <span class="s1">&#39;asdf&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Content-Length&#39;</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>  <span class="p">,</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">caseless</span><span class="p">(</span><span class="nx">headers</span><span class="p">)</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get set</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-Header&#39;</span><span class="p">,</span> <span class="s1">&#39;asdf&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;asdf&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// has check</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;a-Header&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// set values</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-Header&#39;</span><span class="p">,</span> <span class="s1">&#39;fdas&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-HEADER&#39;</span><span class="p">,</span> <span class="s1">&#39;more&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;fdsa,more&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// del</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">del</span><span class="p">(</span><span class="s1">&#39;Content-length&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// swap</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;a-Header&#39;</span><span class="p">,</span> <span class="s1">&#39;fdas&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">swap</span><span class="p">(</span><span class="s1">&#39;a-HEADER&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nx">c</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;a-header&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;a-HEADER&#39;</span>
</span><span class='line'><span class="c1">// headers === {&#39;a-HEADER&#39;: &#39;fdas&#39;}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/caseless/caseless.gif" alt="caseless" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gauge]]></title>
    <link href="http://nmotw.in/gauge/"/>
    <updated>2018-12-30T06:59:09+05:30</updated>
    <id>http://nmotw.in/gauge</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/gauge">gauge</a></h1>

<blockquote><p>Terminal based horizontal gauge.</p></blockquote>

<p><code>gauge</code> is a terminal based horizontal gauge / progress bar which provides the user the totally control on the progess indication, plusation or hiding the porgress bar. It has provides a convenient theming option.</p>

<p><strong>Get it:</strong> <code>npm install gauge</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">Gauge</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gauge&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">gauge</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Gauge</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gauge</span><span class="p">.</span><span class="nx">show</span><span class="p">(</span><span class="s2">&quot;test&quot;</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gauge</span><span class="p">.</span><span class="nx">pulse</span><span class="p">(</span><span class="s2">&quot;this&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">gauge</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/gauge/gauge.gif" alt="gauge" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iron]]></title>
    <link href="http://nmotw.in/iron/"/>
    <updated>2018-12-28T15:29:33+05:30</updated>
    <id>http://nmotw.in/iron</id>
    <content type="html"><![CDATA[<h1><a href="https://npm.im/iron">iron</a></h1>

<blockquote><p>Sealing a JSON object using symmetric key encryption.</p></blockquote>

<p><code>iron</code> provide a neat way to seal a JSON object using symmetric key encryption with message integrity verification!</p>

<p><strong>Get it:</strong> <code>npm install iron</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//Encrypt </span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Iron</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;iron&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">a</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">b</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">c</span><span class="o">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>
</span><span class='line'>    <span class="nx">d</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">e</span><span class="o">:</span> <span class="s1">&#39;f&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">password</span> <span class="o">=</span> <span class="s1">&#39;some_not_random_password_that_is_at_least_32_characters&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">sealed</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">seal</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">defaults</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">sealed</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// Decrypt</span>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">(</span><span class="nx">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kr">const</span> <span class="nx">unsealed</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">unseal</span><span class="p">(</span><span class="nx">sealed</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">Iron</span><span class="p">.</span><span class="nx">defaults</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})();</span>
</span><span class='line'><span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/iron/iron.gif" alt="iron" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[intl-tel-input]]></title>
    <link href="http://nmotw.in/intl-tel-input/"/>
    <updated>2018-12-23T11:37:47+05:30</updated>
    <id>http://nmotw.in/intl-tel-input</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/intl-tel-input">intl-tel-input</a></h1>

<blockquote><p>International Telephone Input</p></blockquote>

<p>Eentering and validating international telephone numbers made easy with <code>intl-tel-input</code>.</p>

<p>It adds a flag dropdown to any input, detects the user's country, displays a relevant placeholder and provides formatting/validation methods!</p>

<p><strong>Get it:</strong> <code>npm i intl-tel-input</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;tel&quot;</span> <span class="na">id=</span><span class="s">&quot;phone&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s2">&quot;node_modules/intl-tel-input/src/css/intlTelInput.css&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">intlTelInput</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s2">&quot;intl-tel-input&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;#phone&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">intlTelInput</span><span class="p">(</span><span class="nx">input</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/intl-tel-input/intl-tel-input.gif" alt="intl-tel-input" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[@glorious/demo]]></title>
    <link href="http://nmotw.in/glorious-demo/"/>
    <updated>2018-12-14T23:37:14+05:30</updated>
    <id>http://nmotw.in/glorious-demo</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/@glorious/demo">@glorious/demo</a></h1>

<blockquote><p>The easiest way to demonstrate your code in action.</p></blockquote>

<p><code>@glorious/demo</code> a uniq node module that helps in demonstrating your code in action!</p>

<p><strong>Get it:</strong> <code>npm install @glorious/demo --save</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="s1">&#39;@glorious/demo/gdemo.min.css&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">GDemo</span> <span class="nx">from</span> <span class="s1">&#39;@glorious/demo&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">demo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">GDemo</span><span class="p">(</span><span class="s1">&#39;#container&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">code</span> <span class="o">=</span> <span class="err">`</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">greet</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Hello World!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">greet</span><span class="p">();</span>
</span><span class='line'><span class="err">`</span>
</span><span class='line'>
</span><span class='line'><span class="nx">demo</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">openApp</span><span class="p">(</span><span class="s1">&#39;editor&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">minHeight</span><span class="o">:</span> <span class="s1">&#39;350px&#39;</span><span class="p">,</span> <span class="nx">windowTitle</span><span class="o">:</span> <span class="s1">&#39;demo.js&#39;</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">code</span><span class="p">,</span> <span class="p">{</span><span class="nx">onCompleteDelay</span><span class="o">:</span> <span class="mi">1500</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">openApp</span><span class="p">(</span><span class="s1">&#39;terminal&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">minHeight</span><span class="o">:</span> <span class="s1">&#39;350px&#39;</span><span class="p">,</span> <span class="nx">promptString</span><span class="o">:</span> <span class="s1">&#39;$&#39;</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">&#39;node ./demo&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">onCompleteDelay</span><span class="o">:</span> <span class="mi">500</span><span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;Hello World!&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">command</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: Don't miss to playaround with the <a href="https://glorious.codes/demo?demo=Y29uc3QgZ2RlbW8gPSBuZXcgR0RlbW8oJ1tkYXRhLWRlbW8tY29udGFpbmVyXScpOwoKY29uc3QgY29kZSA9ICdjb25zb2xlLmxvZygibm1vdHcuaW4hIik7JwoKY29uc3QgaGlnaGxpZ2h0ZWRDb2RlID0gUHJpc20uaGlnaGxpZ2h0KAogIGNvZGUsCiAgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQsCiAgJ2phdmFzY3JpcHQnCik7CgpnZGVtbwogIC5vcGVuQXBwKCdlZGl0b3InLCB7IG1pbkhlaWdodDogJzQwMHB4Jywgd2luZG93VGl0bGU6ICdkZW1vLmpzJyB9KQogIC53cml0ZShoaWdobGlnaHRlZENvZGUsIHsgb25Db21wbGV0ZURlbGF5OiAyMDAwIH0pCiAgLm9wZW5BcHAoJ3Rlcm1pbmFsJywgeyBtaW5IZWlnaHQ6ICc0MDBweCcsIHByb21wdFN0cmluZzogJyQnIH0pCiAgLmNvbW1hbmQoJ25vZGUgLi9kZW1vJykKICAucmVzcG9uZCgnbm1vdHcuaW4hJykKICAuY29tbWFuZCgnJykKICAuZW5kKCk7Cg==">demo</a>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/glorious-demo/glorious-demo.gif" alt="@glorious/demo" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[animate-css-grid]]></title>
    <link href="http://nmotw.in/animate-css-grid/"/>
    <updated>2018-12-09T09:21:40+05:30</updated>
    <id>http://nmotw.in/animate-css-grid</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/animate-css-grid">animate-css-gird</a></h1>

<blockquote><p>Easy transitions for CSS Grid.</p></blockquote>

<p><code>FLIP</code> animation applied on CSS grids with the help of <code>MutationObserver</code> that activates when the grid or one of its children adds or loses a class or element.</p>

<p><strong>Get it:</strong> <code>npm install animate-css-grid</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">wrapGrid</span> <span class="p">}</span> <span class="nx">from</span> <span class="nx">animateCSSGrid</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">grid</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s2">&quot;.grid&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// int: default is 0 ms</span>
</span><span class='line'>  <span class="nx">stagger</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">// int: default is 250 ms</span>
</span><span class='line'>  <span class="nx">duration</span><span class="o">:</span> <span class="mi">500</span>
</span><span class='line'>  <span class="c1">// string: default is &#39;easeInOut&#39;</span>
</span><span class='line'>  <span class="nx">easing</span><span class="o">:</span> <span class="s1">&#39;backInOut&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">wrapGrid</span><span class="p">(</span><span class="nx">grid</span><span class="p">,</span> <span class="nx">config</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- grid style applied via a class --&gt;</span>
</span><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;some-grid-class-that-changes&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- each grid item has a single direct child --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;grid-item&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h3&gt;</span>Item title<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div&gt;</span>Item body<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Check out the <a href="https://codepen.io/aholachek/pen/VXjOPB">DEMO</a>!</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/animate-css-grid/animate-css-grid.gif" alt="animate-css-grid" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[progress-estimator]]></title>
    <link href="http://nmotw.in/progress-estimator/"/>
    <updated>2018-11-30T08:54:21+05:30</updated>
    <id>http://nmotw.in/progress-estimator</id>
    <content type="html"><![CDATA[<h1><a href="">progress-estimator</a></h1>

<blockquote><p>Progress bar and estimation for Promise compilation.</p></blockquote>

<p><code>progress-estimator</code> logs a progress bar and estimation for how long a Promise will take to complete.</p>

<p>It tracks previous durations in order to provide more accurate estimates over time!</p>

<p><strong>Get it:</strong> <code>npm install progress-estimator</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">createLogger</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;progress-estimator&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// All configuration keys are optional, but it&#39;s recommended to specify a storage location.</span>
</span><span class='line'><span class="c1">// Learn more about configuration options below.</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">createLogger</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">storagePath</span><span class="o">:</span> <span class="nx">join</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="s1">&#39;.progress-estimator&#39;</span><span class="p">),</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">async</span> <span class="kd">function</span> <span class="nx">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">logger</span><span class="p">(</span><span class="nx">promiseOne</span><span class="p">,</span> <span class="s2">&quot;This is a promise&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">await</span> <span class="nx">logger</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">promiseTwo</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;This is another promise. I think it will take about 1 second&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">estimate</span><span class="o">:</span> <span class="mi">1000</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/progress-estimator/progress-estimator.gif" alt="progress-estimator" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[query-state]]></title>
    <link href="http://nmotw.in/query-state/"/>
    <updated>2018-11-22T16:09:44+05:30</updated>
    <id>http://nmotw.in/query-state</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/query-state">query-state</a></h1>

<blockquote><p>Application state in query string.</p></blockquote>

<p><code>query-state</code> is a cheeky module that uses <code>history</code> API and <code>encodeURIComponent</code> magic to maintain the application state in the query string.</p>

<p><strong>Get it:</strong> <code>npm install query-state</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">queryState</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;query-state&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// create a new query state instance</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">qs</span> <span class="o">=</span> <span class="nx">queryState</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// get current application state from the hash string:</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">appState</span> <span class="o">=</span> <span class="nx">qs</span><span class="p">.</span><span class="nx">get</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// you can also monitor for changes in the query string:</span>
</span><span class='line'><span class="nx">qs</span><span class="p">.</span><span class="nx">onChange</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">appState</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// prints new application state on each hash update</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;app state changed!&#39;</span><span class="p">,</span> <span class="nx">appState</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// If you want to set a new value in the app state:</span>
</span><span class='line'><span class="nx">qs</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;answer&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now the query string will have `answer=42` part in it.</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;answer=42&#39;</span><span class="p">))</span> <span class="c1">// prints value &gt; 0.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You can also set multiple values at once:</span>
</span><span class='line'><span class="nx">qs</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Haddaway&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">song</span><span class="o">:</span> <span class="s1">&#39;What is love?&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// NOTE: The call above merges new properties. It appends two new properties to </span>
</span><span class='line'><span class="c1">// the current query string</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/query-state/query-state.gif" alt="query-state" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[fx]]></title>
    <link href="http://nmotw.in/fx/"/>
    <updated>2018-11-16T08:20:35+05:30</updated>
    <id>http://nmotw.in/fx</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/fx">fx</a></h1>

<blockquote><p>CLI JSON processing tool</p></blockquote>

<p><code>fx</code> is one of a kind JSON processing tool, that provides:</p>

<ul>
<li>Don't need to learn new syntax</li>
<li>Plain JavaScript</li>
<li>Formatting and highlighting</li>
<li>Standalone binary</li>
<li>Interactive mode 🎉</li>
</ul>


<p><strong>Get it:</strong> <code>npm install -g fx</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;{...}&#39;</span> | fx <span class="o">[</span>code ...<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nb">echo</span> <span class="s1">&#39;{&quot;foo&quot;: [{&quot;bar&quot;: &quot;value&quot;}]}&#39;</span> | fx <span class="s1">&#39;x =&gt; x.foo[0].bar&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;{&quot;count&quot;: 0}&#39;</span> | fx <span class="s1">&#39;{...this, count: 1}&#39;</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;count&quot;</span>: 1
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/fx/fx.gif" alt="fx" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[is-vegan]]></title>
    <link href="http://nmotw.in/is-vegan/"/>
    <updated>2018-11-12T12:07:49+05:30</updated>
    <id>http://nmotw.in/is-vegan</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/is-vegan">is-vegan</a></h1>

<blockquote><p>Find out which food ingredients are vegan / non-vegan.</p></blockquote>

<p>If you are vegan you would understand the challenge of staying a vegan, this module helps you to find out which food ingredients are vegan / non-vegan. It can answer that on 1 ingredient or on a list of ingredients. It uses a 850+ entries list of non-vegan ingredients.</p>

<p>It basically had parsed the information from the below sites into a JSON file.</p>

<ul>
<li>veganpeace</li>
<li>peta</li>
<li>veganwolf</li>
</ul>


<p><strong>P.S:</strong> I can be cool to use this as a API and build an app, that would scan the ingeratients and let one know if it's vegan or not!</p>

<p><strong>Get it:</strong> <code>npm install is-vegan</code></p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">const</span> <span class="nx">isVegan</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;is-vegan&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// example for single ingredient</span>
</span><span class='line'><span class="nx">isVegan</span><span class="p">.</span><span class="nx">isVeganIngredient</span><span class="p">(</span><span class="s1">&#39;soy&#39;</span><span class="p">);</span> <span class="c1">// true</span>
</span><span class='line'><span class="nx">isVegan</span><span class="p">.</span><span class="nx">isVeganIngredient</span><span class="p">(</span><span class="s1">&#39;milk&#39;</span><span class="p">);</span> <span class="c1">// false</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// example for list of ingredients</span>
</span><span class='line'><span class="nx">isVegan</span><span class="p">.</span><span class="nx">isVeganIngredientList</span><span class="p">([</span><span class="s1">&#39;aspic&#39;</span><span class="p">,</span> <span class="s1">&#39;albumin&#39;</span><span class="p">]);</span> <span class="c1">// false</span>
</span><span class='line'><span class="nx">isVegan</span><span class="p">.</span><span class="nx">isVeganIngredientList</span><span class="p">([</span><span class="s1">&#39;soy&#39;</span><span class="p">,</span> <span class="s1">&#39;cacao butter&#39;</span><span class="p">]);</span> <span class="c1">// true</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// example for list of ingredients wich contain flagged and non-vegan ingredients</span>
</span><span class='line'><span class="nx">isVegan</span><span class="p">.</span><span class="nx">checkIngredients</span><span class="p">([</span><span class="s1">&#39;soy&#39;</span><span class="p">,</span> <span class="s1">&#39;cacao butter&#39;</span><span class="p">,</span> <span class="s1">&#39;pork&#39;</span><span class="p">,</span> <span class="s1">&#39;glycine&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="c1">// returns</span>
</span><span class='line'><span class="c1">// {</span>
</span><span class='line'><span class="c1">//   nonvegan: [&#39;pork&#39;, &#39;beef&#39;],</span>
</span><span class='line'><span class="c1">//   flagged: [&#39;glycine&#39;]</span>
</span><span class='line'><span class="c1">// }</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/is-vegan/is-vegan.gif" alt="is-vegan" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[errno]]></title>
    <link href="http://nmotw.in/errno/"/>
    <updated>2018-11-04T15:15:46+05:30</updated>
    <id>http://nmotw.in/errno</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/errno">errno</a></h1>

<blockquote><p>Better <code>libuv</code> error handling &amp; reporting.</p></blockquote>

<p>🐴 said: Ever find yourself needing more details about Node.js errors? Me too, so node-errno contains the errno mappings direct from libuv so you can use them in your code.</p>

<p><strong>By errno:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;errno&#39;</span><span class="p">).</span><span class="nx">errno</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</span><span class='line'><span class="c1">// → {</span>
</span><span class='line'><span class="c1">//     &quot;errno&quot;: 3,</span>
</span><span class='line'><span class="c1">//     &quot;code&quot;: &quot;EACCES&quot;,</span>
</span><span class='line'><span class="c1">//     &quot;description&quot;: &quot;permission denied&quot;</span>
</span><span class='line'><span class="c1">//   }</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>By code:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;errno&#39;</span><span class="p">).</span><span class="nx">code</span><span class="p">.</span><span class="nx">ENOTEMPTY</span>
</span><span class='line'><span class="c1">// → {</span>
</span><span class='line'><span class="c1">//     &quot;errno&quot;: 53,</span>
</span><span class='line'><span class="c1">//     &quot;code&quot;: &quot;ENOTEMPTY&quot;,</span>
</span><span class='line'><span class="c1">//     &quot;description&quot;: &quot;directory not empty&quot;</span>
</span><span class='line'><span class="c1">//   }</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Make your errors more descriptive:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">errno</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;errno&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">errmsg</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s1">&#39;Error: &#39;</span>
</span><span class='line'>  <span class="c1">// if it&#39;s a libuv error then get the description from errno</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">errno</span><span class="p">.</span><span class="nx">errno</span><span class="p">[</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span><span class="p">])</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">+=</span> <span class="nx">errno</span><span class="p">.</span><span class="nx">errno</span><span class="p">[</span><span class="nx">err</span><span class="p">.</span><span class="nx">errno</span><span class="p">].</span><span class="nx">description</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">+=</span> <span class="nx">err</span><span class="p">.</span><span class="nx">message</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if it&#39;s a `fs` error then it&#39;ll have a &#39;path&#39; property</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">path</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">str</span> <span class="o">+=</span> <span class="s1">&#39; [&#39;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">str</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;thisisnotarealfile.txt&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">errmsg</span><span class="p">(</span><span class="nx">err</span><span class="p">))</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Use as a command line tool:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">~</span> <span class="nx">$</span> <span class="nx">errno</span> <span class="mi">53</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;errno&quot;</span><span class="o">:</span> <span class="mi">53</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;code&quot;</span><span class="o">:</span> <span class="s2">&quot;ENOTEMPTY&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;directory not empty&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">~</span> <span class="nx">$</span> <span class="nx">errno</span> <span class="nx">EROFS</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;errno&quot;</span><span class="o">:</span> <span class="mi">56</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;code&quot;</span><span class="o">:</span> <span class="s2">&quot;EROFS&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;description&quot;</span><span class="o">:</span> <span class="s2">&quot;read-only file system&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">~</span> <span class="nx">$</span> <span class="nx">errno</span> <span class="nx">foo</span>
</span><span class='line'><span class="nx">No</span> <span class="nx">such</span> <span class="nx">errno</span><span class="o">/</span><span class="nx">code</span><span class="o">:</span> <span class="s2">&quot;foo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>P.S: You can also create <a href="https://github.com/rvagg/node-errno/blob/master/README.md#custom-errors">custom-erros</a>.</p>

<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/errno/errno.gif" alt="errno" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[the-platform]]></title>
    <link href="http://nmotw.in/the-platform/"/>
    <updated>2018-10-28T15:33:43+05:30</updated>
    <id>http://nmotw.in/the-platform</id>
    <content type="html"><![CDATA[<h1><a href="https://www.npmjs.com/package/the-platform">the-platform</a></h1>

<blockquote><p>Browser API's turned into React Hooks and Suspense-friendly components.</p></blockquote>

<p><code>the-platform</code> is a uber fun module that has React Hooks and Suspense friendly componets, it provides the below:</p>

<p><strong>Hooks:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useDeviceMotion()
</span><span class='line'>useDeviceOrientation()
</span><span class='line'>useGeoPosition()
</span><span class='line'>useNetworkStatus()
</span><span class='line'>useMedia()
</span><span class='line'>useScript()
</span><span class='line'>useStylesheet()
</span><span class='line'>useWindowScrollPosition()
</span><span class='line'>useWindowSize()</span></code></pre></td></tr></table></div></figure>


<p><strong>Components:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Img&gt;
</span><span class='line'>&lt;Script&gt;
</span><span class='line'>&lt;Video&gt;
</span><span class='line'>&lt;Audio&gt;
</span><span class='line'>&lt;Preload&gt;
</span><span class='line'>&lt;Stylesheet&gt;</span></code></pre></td></tr></table></div></figure>


<p>P.S: Looks like it's a pun on <code>#useThePlatform</code> none the less it's an intresting module.</p>

<p><strong>Sample usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">useGeoPosition</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;the-platform&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">Example</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">coords</span><span class="o">:</span> <span class="p">{</span> <span class="nx">latitude</span><span class="p">,</span> <span class="nx">longitude</span> <span class="p">},</span>
</span><span class='line'>  <span class="p">}</span> <span class="o">=</span> <span class="nx">useGeoPosition</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// ...</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">React</span> <span class="nx">from</span> <span class="s1">&#39;react&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="p">{</span> <span class="nx">Img</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;the-platform&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">React</span><span class="p">.</span><span class="nx">Suspense</span> <span class="nx">maxDuration</span><span class="o">=</span><span class="p">{</span><span class="mi">300</span><span class="p">}</span> <span class="nx">fallback</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;loading...&#39;</span><span class="p">}</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">Img</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;https://source.unsplash.com/random/4000x2000&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/React.Suspense&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">App</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIT FTW!</strong></p>

<p><img src="http://nmotw.in/images/the-platform/the-platform.gif" alt="" /></p>
]]></content>
  </entry>
  
</feed>
