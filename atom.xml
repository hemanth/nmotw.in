<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[NMOTW]]></title>
  <link href="http://hemanth.github.io/nmotw.in/atom.xml" rel="self"/>
  <link href="http://hemanth.github.io/nmotw.in/"/>
  <updated>2014-03-20T18:59:21+05:30</updated>
  <id>http://hemanth.github.io/nmotw.in/</id>
  <author>
    <name><![CDATA[Hemanth.HM]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[configstore]]></title>
    <link href="http://hemanth.github.io/nmotw.in/configstore/"/>
    <updated>2014-03-20T17:53:08+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/configstore</id>
    <content type="html"><![CDATA[<p>CLI apps normally use configurations for different situations like:</p>

<ul>
<li><p>Saving the state of an app and restoring it.</p></li>
<li><p>Having global and user level configurations for their own benefits.</p></li>
<li><p>Maintaining interval threshold value for cron like activities.</p></li>
<li><p>Storing strings for Internationalization and localization.</p></li>
</ul>


<p>And many more similar use cases.</p>

<p><a href="configstore">https://github.com/yeoman/configstore</a> is one such node module that helps you to easily load and persist config without having to think about where and how!</p>

<p>This is wonderful module is a gift from <a href="http://yeoman.io">Yeoman</a> which has about 18432 downloads yesterday alone!</p>

<p>Installing is it just like any other module: <code>$ npm install configstore</code></p>

<p><strong>API:</strong></p>

<p>The API set is very simple had has:</p>

<ul>
<li><p><code>set(key, val)</code> -> Set an item.</p></li>
<li><p><code>get(key)</code> -> Get an item.</p></li>
<li><p><code>del(key)</code> -> To delete an item.</p></li>
<li><p><code>all</code> -> Get all the items in the current config store and replace them all with a new object.</p></li>
<li><p><code>size</code> -> Count of the items.</p></li>
<li><p><code>path</code> -> File path to the config store.</p></li>
</ul>


<p><strong>Example usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Configstore</span> <span class="o">=</span>  <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;configstore&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">conf</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Configstore</span><span class="p">(</span><span class="s1">&#39;appConf&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">  var conf = new ( require(&#39;configstore&#39;) )(&#39;appConf&#39;);</span>
</span><span class='line'><span class="cm">  </span>
</span><span class='line'><span class="cm">  var conf = new ( require(&#39;configstore&#39;) )\</span>
</span><span class='line'><span class="cm">             (&#39;appConf&#39;, {&#39;ans&#39;: 42});</span>
</span><span class='line'>
</span><span class='line'><span class="cm">  i.e  Configstore(id, defaults);</span>
</span><span class='line'><span class="cm">  id -&gt; mandator</span>
</span><span class='line'><span class="cm">  defaults -&gt; optional</span>
</span><span class='line'>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Set some values.</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;life&#39;</span><span class="p">,</span> <span class="mi">42</span><span class="p">);</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;key&#39;</span><span class="p">,</span> <span class="p">{</span><span class="s1">&#39;scrt&#39;</span><span class="o">:</span> <span class="s1">&#39;42&#39;</span><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get some values.</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;life&#39;</span><span class="p">);</span> <span class="c1">// 42</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;key&#39;</span><span class="p">);</span> <span class="c1">// {&#39;scrt&#39;: 42}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Delete a value.</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">del</span><span class="p">(</span><span class="s1">&#39;life&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;life&#39;</span><span class="p">);</span> <span class="c1">// undefined.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Get the count.</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="c1">// 1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Reset the entier conf with new conf.</span>
</span><span class='line'><span class="nx">conf</span><span class="p">.</span><span class="nx">all</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;ans&#39;</span> <span class="o">:</span> <span class="mi">42</span><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Under the covers:</strong></p>

<p>Config is stored as a <a href="http://www.yaml.org/">YAML</a> file in <code>$XDG_CONFIG_HOME</code> or <code>~/.config/configstore/your-config.yaml</code> there is an <a href="https://github.com/yeoman/configstore/issues/10">issue</a> for JSON support as well.</p>

<p>For the above example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>cat ~/.config/configstore/appConf.yaml
</span><span class='line'>
</span><span class='line'><span class="c"># Would be something like</span>
</span><span class='line'>key:
</span><span class='line'>  scrt: 42
</span><span class='line'>life: 42
</span></code></pre></td></tr></table></div></figure>


<p><strong>GIF FTW!</strong></p>

<p><img src="http://nmotw.in/images/configstore/configstore.gif" alt="configstore" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chalk]]></title>
    <link href="http://hemanth.github.io/nmotw.in/chalk/"/>
    <updated>2014-03-13T18:33:53+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/chalk</id>
    <content type="html"><![CDATA[<p>There are many wonderful node modules that adhere to Unix philosophy:</p>

<blockquote><p>&#8220;Write programs that do one thing and do it well.&#8221;</p></blockquote>

<p>Out of many such one such elegant module is <a href="https://www.npmjs.org/package/chalk">chalk</a> thanks to <a href="http://sindresorhus.com/hi/">Sindre Sorhus</a> for that.</p>

<p>Whenever one wants to color the terminal, as in styling the strings on the console the first module that would come to mind is <a href="https://github.com/Marak/colors.js">colors.js</a> but one of the major drawbacks with that being it extending <code>String.portotye</code> or be <a href="https://github.com/yeoman/yo/issues/68">these</a> problems.</p>

<p>Installing chalk is like any other module: <code>npm install --save chalk</code></p>

<p>Apart from allow the normal styling syntax, it also provides multiple styles, nested styles and multiple arguments.</p>

<p><strong>For example:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">chalk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chalk&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>  <span class="nx">chalk</span><span class="p">.</span><span class="nx">blue</span><span class="p">.</span><span class="nx">bgRed</span><span class="p">.</span><span class="nx">bold</span><span class="p">(</span><span class="s1">&#39;Hello world!&#39;</span><span class="p">)</span>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>  <span class="nx">chalk</span><span class="p">.</span><span class="nx">red</span><span class="p">(</span><span class="s1">&#39;Hello&#39;</span><span class="p">,</span> <span class="nx">chalk</span><span class="p">.</span><span class="nx">underline</span><span class="p">(</span><span class="s1">&#39;world&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;!&#39;</span><span class="p">)</span>  <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a simple snippet for printing all of the styles it provides:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">chalk</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;chalk&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">chalk</span><span class="p">.</span><span class="nx">styles</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">style</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">style</span> <span class="o">!==</span> <span class="s2">&quot;reset&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="nx">chalk</span><span class="p">[</span><span class="nx">style</span><span class="p">](</span><span class="nx">style</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>gif FTW!?</strong></p>

<p><img src="http://nmotw.in/images/chalk/chalk.gif" alt="chalk" /></p>

<p>Until next week, happy coloring!</p>

<p><img src="http://nmotw.in/images/chalk/chalk.png" alt="chalk-colors" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSVP]]></title>
    <link href="http://hemanth.github.io/nmotw.in/rsvp/"/>
    <updated>2014-03-04T06:23:51+05:30</updated>
    <id>http://hemanth.github.io/nmotw.in/rsvp</id>
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.org/package/rsvp">RSVP</a> : A lightweight library that provides tools for organizing asynchronous code.</p>

<p>This module gives a tiny implementation of <a href="http://promises-aplus.github.com/promises-spec/">Promises/A+</a>.</p>

<p>As usual do a <code>npm install rsvp</code> to get the module.</p>

<p><strong>Basic Usage:</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">RSVP</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;rsvp&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">promise</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RSVP</span><span class="p">.</span><span class="nx">Promise</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// succeed</span>
</span><span class='line'>  <span class="nx">resolve</span><span class="p">(</span><span class="nx">value</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// or reject</span>
</span><span class='line'>  <span class="nx">reject</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">promise</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// success</span>
</span><span class='line'><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// failure</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once a promise has been resolved or rejected, it cannot be resolved or rejected again.</p>

<p>It give some more goddies like:</p>

<ul>
<li><p>Chaining</p></li>
<li><p>Easy Error Handling.</p></li>
<li><p>Compatible with <a href="http://taskjs.org/">TaskJS</a>.</p></li>
</ul>


<p>So, what are you waiting for? Go got it and have fun!</p>
]]></content>
  </entry>
  
</feed>
